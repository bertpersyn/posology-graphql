// Code generated by xsdgen. DO NOT EDIT.

package internal

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

// May be one of ADD
type AddActionType string

type AddAmpBcpiType struct {
	AmpComponent      []AddAmpComponentBcpiType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common AmpComponent"`
	AbbreviatedName   Text255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core AbbreviatedName"`
	ProprietarySuffix Text255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core ProprietarySuffix"`
	PrescriptionName  Text255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core PrescriptionName"`
	Action            AddActionType             `xml:"action,attr"`
	From              ValidityDateType          `xml:"from,attr"`
	To                ValidityDateType          `xml:"to,attr,omitempty"`
	Code              AmpCodeType               `xml:"code,attr"`
}

type AddAmpComponentBcpiType struct {
	Dividable            DividableType       `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Dividable,omitempty"`
	Scored               ScoredType          `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Scored,omitempty"`
	Crushable            CrushableType       `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Crushable,omitempty"`
	ContainsAlcohol      ContainsAlcoholType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ContainsAlcohol,omitempty"`
	SugarFree            bool                `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SugarFree,omitempty"`
	ModifiedReleaseType  int                 `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ModifiedReleaseType,omitempty"`
	SpecificDrugDevice   int                 `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SpecificDrugDevice,omitempty"`
	Dimensions           String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Dimensions,omitempty"`
	Name                 Text255Type         `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Note                 TextType            `xml:"urn:be:fgov:ehealth:samws:v2:core Note,omitempty"`
	Concentration        Text255Type         `xml:"urn:be:fgov:ehealth:samws:v2:core Concentration,omitempty"`
	OsmoticConcentration float64             `xml:"urn:be:fgov:ehealth:samws:v2:core OsmoticConcentration,omitempty"`
	CaloricValue         float64             `xml:"urn:be:fgov:ehealth:samws:v2:core CaloricValue,omitempty"`
	SequenceNr           int                 `xml:"sequenceNr,attr"`
}

type AddAmpComponentFamhpType struct {
	PharmaceuticalFormCode    []String10Type                `xml:"urn:be:fgov:ehealth:samws:v2:core PharmaceuticalFormCode"`
	RouteOfAdministrationCode []String10Type                `xml:"urn:be:fgov:ehealth:samws:v2:core RouteOfAdministrationCodes"`
	RealActualIngredient      []AddRealActualIngredientType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common RealActualIngredient"`
	SequenceNr                int                           `xml:"sequenceNr,attr"`
}

type AddAmpFamhpType struct {
	AmpComponent          []AddAmpComponentFamhpType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common AmpComponent"`
	Ampp                  []AddAmppFamhpType         `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
	OfficialName          String255Type              `xml:"urn:be:fgov:ehealth:samws:v2:core OfficialName"`
	Status                AmpStatusType              `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Status,omitempty"`
	Name                  Text255Type                `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	BlackTriangle         bool                       `xml:"urn:be:fgov:ehealth:samws:v2:actual:common BlackTriangle"`
	MedicineType          MedicineTypeType           `xml:"urn:be:fgov:ehealth:samws:v2:actual:common MedicineType"`
	PrescriptionNameFamhp Text255Type                `xml:"urn:be:fgov:ehealth:samws:v2:core PrescriptionNameFamhp,omitempty"`
	CompanyActorNr        CompanyActorNrType         `xml:"urn:be:fgov:ehealth:samws:v2:core CompanyActorNr"`
	Action                AddActionType              `xml:"action,attr"`
	From                  ValidityDateType           `xml:"from,attr"`
	To                    ValidityDateType           `xml:"to,attr,omitempty"`
	Code                  AmpCodeType                `xml:"code,attr"`
}

type AddAmppBcpiType struct {
	SingleUse                       bool             `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SingleUse,omitempty"`
	SpeciallyRegulated              int              `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SpeciallyRegulated,omitempty"`
	AbbreviatedName                 Text255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core AbbreviatedName"`
	PrescriptionName                Text255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core PrescriptionName"`
	Note                            TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core Note,omitempty"`
	PosologyNote                    TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core PosologyNote,omitempty"`
	CrmLink                         Text255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core CrmLink,omitempty"`
	NoGenericPrescriptionReasonCode []String10Type   `xml:"urn:be:fgov:ehealth:samws:v2:core NoGenericPrescriptionReasonCode,omitempty"`
	Action                          AddActionType    `xml:"action,attr"`
	From                            ValidityDateType `xml:"from,attr"`
	To                              ValidityDateType `xml:"to,attr,omitempty"`
	CtiExtended                     CtiExtendedType  `xml:"ctiExtended,attr"`
}

type AddAmppComponentEquivalentType struct {
	Content    QuantityType `xml:"urn:be:fgov:ehealth:samws:v2:core Content"`
	SequenceNr int          `xml:"sequenceNr,attr"`
}

type AddAmppComponentType struct {
	AmppComponentEquivalent []AddAmppComponentEquivalentType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common AmppComponentEquivalent"`
	AmpcSequenceNr          int                              `xml:"urn:be:fgov:ehealth:samws:v2:core AmpcSequenceNr,omitempty"`
	ContentType             ContentTypeType                  `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ContentType"`
	ContentMultiplier       int                              `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ContentMultiplier,omitempty"`
	PackSpecification       String255Type                    `xml:"urn:be:fgov:ehealth:samws:v2:core PackSpecification,omitempty"`
	DeviceTypeCode          String8Type                      `xml:"urn:be:fgov:ehealth:samws:v2:core DeviceTypeCode,omitempty"`
	PackagingClosureCode    []String8Type                    `xml:"urn:be:fgov:ehealth:samws:v2:core PackagingClosureCode,omitempty"`
	PackagingMaterialCode   []String8Type                    `xml:"urn:be:fgov:ehealth:samws:v2:core PackagingMaterialCode,omitempty"`
	PackagingTypeCode       String8Type                      `xml:"urn:be:fgov:ehealth:samws:v2:core PackagingTypeCode,omitempty"`
	SequenceNr              int                              `xml:"sequenceNr,attr"`
}

type AddAmppFamhpToExistingAmpType struct {
	Ampp []AddAmppFamhpType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
	Code AmpCodeType        `xml:"code,attr"`
}

type AddAmppFamhpType struct {
	AmppComponent                  []AddAmppComponentType    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common AmppComponent"`
	Commercialization              AddCommercializationType  `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Commercialization,omitempty"`
	SupplyProblem                  AddSupplyProblemType      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SupplyProblem,omitempty"`
	DerogationImport               []AddDerogationImportType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common DerogationImport,omitempty"`
	AuthorisationNr                String50Type              `xml:"urn:be:fgov:ehealth:samws:v2:core AuthorisationNr"`
	Orphan                         bool                      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Orphan"`
	LeafletLink                    Text255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core LeafletLink,omitempty"`
	SpcLink                        Text255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core SpcLink,omitempty"`
	RmaPatientLink                 Text255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core RmaPatientLink,omitempty"`
	RmaProfessionalLink            Text255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core RmaProfessionalLink,omitempty"`
	ParallelCircuit                int                       `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ParallelCircuit,omitempty"`
	ParallelDistributor            String255Type             `xml:"urn:be:fgov:ehealth:samws:v2:core ParallelDistributor,omitempty"`
	PackMultiplier                 int                       `xml:"urn:be:fgov:ehealth:samws:v2:core PackMultiplier,omitempty"`
	PackAmount                     PackAmountType            `xml:"urn:be:fgov:ehealth:samws:v2:actual:common PackAmount,omitempty"`
	PackDisplayValue               String255Type             `xml:"urn:be:fgov:ehealth:samws:v2:core PackDisplayValue,omitempty"`
	Status                         AmpStatusType             `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Status"`
	GTIN                           String20Type              `xml:"urn:be:fgov:ehealth:samws:v2:core GTIN,omitempty"`
	DHPCLink                       Text255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core DHPCLink,omitempty"`
	PrescriptionNameFamhp          Text255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core PrescriptionNameFamhp,omitempty"`
	FMDProductCode                 []String20Type            `xml:"urn:be:fgov:ehealth:samws:v2:core FMDProductCode,omitempty"`
	FMDInScope                     bool                      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common FMDInScope,omitempty"`
	AntiTemperingDevicePresent     bool                      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common AntiTemperingDevicePresent,omitempty"`
	AtcCode                        []String7Type             `xml:"urn:be:fgov:ehealth:samws:v2:core AtcCode,omitempty"`
	DeliveryModusCode              String7Type               `xml:"urn:be:fgov:ehealth:samws:v2:core DeliveryModusCode"`
	DeliveryModusSpecificationCode String7Type               `xml:"urn:be:fgov:ehealth:samws:v2:core DeliveryModusSpecificationCode,omitempty"`
	DistributorCompanyActorNr      CompanyActorNrType        `xml:"urn:be:fgov:ehealth:samws:v2:core DistributorCompanyActorNr,omitempty"`
	Action                         AddActionType             `xml:"action,attr"`
	From                           ValidityDateType          `xml:"from,attr"`
	To                             ValidityDateType          `xml:"to,attr,omitempty"`
	CtiExtended                    CtiExtendedType           `xml:"ctiExtended,attr"`
}

type AddAmppMinEcoType struct {
	ExFactoryPrice     float64          `xml:"urn:be:fgov:ehealth:samws:v2:core ExFactoryPrice"`
	RealExFactoryPrice float64          `xml:"urn:be:fgov:ehealth:samws:v2:core RealExFactoryPrice,omitempty"`
	DecisionDate       time.Time        `xml:"urn:be:fgov:ehealth:samws:v2:actual:common DecisionDate"`
	Index              float64          `xml:"urn:be:fgov:ehealth:samws:v2:core Index,omitempty"`
	Action             AddActionType    `xml:"action,attr"`
	From               ValidityDateType `xml:"from,attr"`
	To                 ValidityDateType `xml:"to,attr,omitempty"`
	CtiExtended        CtiExtendedType  `xml:"ctiExtended,attr"`
}

func (t *AddAmppMinEcoType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AddAmppMinEcoType
	var layout struct {
		*T
		DecisionDate *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:actual:common DecisionDate"`
	}
	layout.T = (*T)(t)
	layout.DecisionDate = (*xsdDate)(&layout.T.DecisionDate)
	return e.EncodeElement(layout, start)
}
func (t *AddAmppMinEcoType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AddAmppMinEcoType
	var overlay struct {
		*T
		DecisionDate *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:actual:common DecisionDate"`
	}
	overlay.T = (*T)(t)
	overlay.DecisionDate = (*xsdDate)(&overlay.T.DecisionDate)
	return d.DecodeElement(&overlay, &start)
}

type AddAmppNihdiBisType struct {
	DefinedDailyDose QuantityType     `xml:"urn:be:fgov:ehealth:samws:v2:core DefinedDailyDose,omitempty"`
	Action           AddActionType    `xml:"action,attr"`
	From             ValidityDateType `xml:"from,attr"`
	To               ValidityDateType `xml:"to,attr,omitempty"`
	CtiExtended      CtiExtendedType  `xml:"ctiExtended,attr"`
}

type AddAmppNihdiType struct {
	ExFactoryPrice    float64          `xml:"urn:be:fgov:ehealth:samws:v2:core ExFactoryPrice,omitempty"`
	ReimbursementCode int              `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ReimbursementCode,omitempty"`
	BigPackage        bool             `xml:"urn:be:fgov:ehealth:samws:v2:actual:common BigPackage,omitempty"`
	Index             float64          `xml:"urn:be:fgov:ehealth:samws:v2:core Index,omitempty"`
	Action            AddActionType    `xml:"action,attr"`
	From              ValidityDateType `xml:"from,attr"`
	To                ValidityDateType `xml:"to,attr,omitempty"`
	CtiExtended       CtiExtendedType  `xml:"ctiExtended,attr"`
}

// May be one of ADD, CHANGE, REMOVE
type AddChangeRemoveType string

type AddCommentedClassificationRequestType struct {
	CommentedClassification AddCommentedClassificationType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common CommentedClassification"`
}

type AddCommentedClassificationType struct {
	CommentedClassification []AddCommentedClassificationType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common CommentedClassification,omitempty"`
	Title                   Text255Type                      `xml:"urn:be:fgov:ehealth:samws:v2:core Title,omitempty"`
	Content                 TextType                         `xml:"urn:be:fgov:ehealth:samws:v2:core Content,omitempty"`
	PosologyNote            TextType                         `xml:"urn:be:fgov:ehealth:samws:v2:core PosologyNote"`
	Url                     Text255Type                      `xml:"urn:be:fgov:ehealth:samws:v2:core Url,omitempty"`
	Action                  AddNoChangeActionsType           `xml:"action,attr"`
	Code                    String10Type                     `xml:"code,attr"`
}

type AddCommercializationType struct {
	EndOfCommercialization TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core EndOfCommercialization,omitempty"`
	Reason                 TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core Reason,omitempty"`
	AdditionalInformation  TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core AdditionalInformation,omitempty"`
	Impact                 TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core Impact,omitempty"`
	Action                 AddActionType    `xml:"action,attr"`
	From                   ValidityDateType `xml:"from,attr"`
	To                     ValidityDateType `xml:"to,attr,omitempty"`
}

type AddCompanyRequestType struct {
	Company AddCompanyType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit Company"`
}

type AddCompanyType struct {
	AuthorisationNr String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core AuthorisationNr,omitempty"`
	VatNr           VatNrPerCountryType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit VatNr,omitempty"`
	EuropeanNr      string              `xml:"urn:be:fgov:ehealth:samws:v2:company:submit EuropeanNr,omitempty"`
	Denomination    String255Type       `xml:"urn:be:fgov:ehealth:samws:v2:core Denomination"`
	LegalForm       String30Type        `xml:"urn:be:fgov:ehealth:samws:v2:core LegalForm,omitempty"`
	Building        String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Building,omitempty"`
	StreetName      String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core StreetName,omitempty"`
	StreetNum       String10Type        `xml:"urn:be:fgov:ehealth:samws:v2:core StreetNum,omitempty"`
	Postbox         String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Postbox,omitempty"`
	Postcode        String10Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Postcode,omitempty"`
	City            String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core City,omitempty"`
	CountryCode     CountryCodeType     `xml:"urn:be:fgov:ehealth:samws:v2:company:submit CountryCode,omitempty"`
	Phone           String30Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Phone,omitempty"`
	Language        CompanyLanguageType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit Language"`
	Website         String255Type       `xml:"urn:be:fgov:ehealth:samws:v2:core Website,omitempty"`
	Email           String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Email,omitempty"`
	Action          AddActionType       `xml:"action,attr"`
	From            ValidityDateType    `xml:"from,attr,omitempty"`
	To              ValidityDateType    `xml:"to,attr,omitempty"`
	ActorNr         CompanyActorNrType  `xml:"actorNr,attr"`
}

func (t *AddCompanyType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AddCompanyType
	var overlay struct {
		*T
		From *ValidityDateType `xml:"from,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*ValidityDateType)(&overlay.T.From)
	return d.DecodeElement(&overlay, &start)
}

type AddCompoundingFormulaRequestType struct {
	CompoundingFormula []AddCompoundingFormulaType `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common CompoundingFormula"`
}

type AddCompoundingFormulaType struct {
	Synonym   []SynonymType    `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common Synonym"`
	Formulary []string         `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common Formulary,omitempty"`
	Action    AddActionType    `xml:"action,attr"`
	From      ValidityDateType `xml:"from,attr"`
	To        ValidityDateType `xml:"to,attr,omitempty"`
	Code      DmppCodeType     `xml:"code,attr"`
	CodeType  DmppCodeTypeType `xml:"codeType,attr,omitempty"`
}

func (t *AddCompoundingFormulaType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AddCompoundingFormulaType
	var overlay struct {
		*T
		CodeType *DmppCodeTypeType `xml:"codeType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CodeType = (*DmppCodeTypeType)(&overlay.T.CodeType)
	return d.DecodeElement(&overlay, &start)
}

type AddCompoundingIngredientRequestType struct {
	CompoundingIngredient []AddCompoundingIngredientType `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common CompoundingIngredient"`
}

type AddCompoundingIngredientType struct {
	Synonym  []SynonymType    `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common Synonym"`
	Action   AddActionType    `xml:"action,attr"`
	From     ValidityDateType `xml:"from,attr"`
	To       ValidityDateType `xml:"to,attr,omitempty"`
	Code     DmppCodeType     `xml:"code,attr"`
	CodeType DmppCodeTypeType `xml:"codeType,attr,omitempty"`
}

func (t *AddCompoundingIngredientType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AddCompoundingIngredientType
	var overlay struct {
		*T
		CodeType *DmppCodeTypeType `xml:"codeType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CodeType = (*DmppCodeTypeType)(&overlay.T.CodeType)
	return d.DecodeElement(&overlay, &start)
}

type AddDerogationImportType struct {
	Note       TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core Note"`
	Action     AddActionType    `xml:"action,attr"`
	From       ValidityDateType `xml:"from,attr"`
	To         ValidityDateType `xml:"to,attr,omitempty"`
	SequenceNr int              `xml:"sequenceNr,attr"`
}

type AddDmppFamhpRequestType struct {
	Dmpp AddDmppToAmppType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Dmpp"`
}

type AddDmppMinEcoType struct {
	Price               float64                 `xml:"urn:be:fgov:ehealth:samws:v2:core Price"`
	Action              AddActionType           `xml:"action,attr"`
	From                ValidityDateType        `xml:"from,attr"`
	To                  ValidityDateType        `xml:"to,attr,omitempty"`
	CtiExtended         CtiExtendedType         `xml:"ctiExtended,attr"`
	DeliveryEnvironment DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                DmppCodeType            `xml:"code,attr"`
	CodeType            DmppCodeTypeType        `xml:"codeType,attr"`
}

type AddDmppNihdiRequestType struct {
	Dmpp []AddDmppNihdiType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Dmpp"`
}

type AddDmppNihdiType struct {
	Reimbursable        bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Reimbursable"`
	Price               float64                 `xml:"urn:be:fgov:ehealth:samws:v2:core Price,omitempty"`
	Cheap               bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Cheap,omitempty"`
	Cheapest            bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Cheapest,omitempty"`
	CtiExtended         CtiExtendedType         `xml:"ctiExtended,attr"`
	Action              AddActionType           `xml:"action,attr"`
	From                ValidityDateType        `xml:"from,attr"`
	To                  ValidityDateType        `xml:"to,attr,omitempty"`
	DeliveryEnvironment DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                DmppCodeType            `xml:"code,attr"`
	CodeType            DmppCodeTypeType        `xml:"codeType,attr"`
}

type AddDmppToAmppType struct {
	Price               float64                 `xml:"urn:be:fgov:ehealth:samws:v2:core Price,omitempty"`
	Cheap               bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Cheap,omitempty"`
	Cheapest            bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Cheapest,omitempty"`
	CtiExtended         CtiExtendedType         `xml:"ctiExtended,attr"`
	Action              AddActionType           `xml:"action,attr"`
	From                ValidityDateType        `xml:"from,attr"`
	To                  ValidityDateType        `xml:"to,attr,omitempty"`
	DeliveryEnvironment DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                DmppCodeType            `xml:"code,attr"`
	CodeType            DmppCodeTypeType        `xml:"codeType,attr"`
}

type AddDmppType struct {
	Price               float64                 `xml:"urn:be:fgov:ehealth:samws:v2:core Price,omitempty"`
	Cheap               bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Cheap,omitempty"`
	Cheapest            bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Cheapest,omitempty"`
	Action              AddActionType           `xml:"action,attr"`
	From                ValidityDateType        `xml:"from,attr"`
	To                  ValidityDateType        `xml:"to,attr,omitempty"`
	DeliveryEnvironment DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                DmppCodeType            `xml:"code,attr"`
	CodeType            DmppCodeTypeType        `xml:"codeType,attr"`
}

type AddDrugPackageBcpiRequestType struct {
	Ampp AddAmppBcpiType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
}

type AddDrugPackageFamhpRequestType struct {
	Amp AddAmppFamhpToExistingAmpType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Amp"`
}

type AddDrugPackageNihdiBisRequestType struct {
	Ampp []AddAmppNihdiBisType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
}

type AddDrugPackageNihdiRequestType struct {
	Ampp []AddAmppNihdiType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
}

type AddDrugProductBcpiRequestType struct {
	Amp AddAmpBcpiType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Amp"`
}

type AddDrugProductRequestType struct {
	Amp AddAmpFamhpType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Amp"`
}

type AddDrugStatusRequestType struct {
	Ampp AddDrugStatusType `xml:"urn:be:fgov:ehealth:samws:v2:actual:status Ampp"`
}

type AddDrugStatusType struct {
	Commercialization AddCommercializationType  `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Commercialization,omitempty"`
	SupplyProblem     AddSupplyProblemType      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SupplyProblem,omitempty"`
	DerogationImport  []AddDerogationImportType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common DerogationImport,omitempty"`
	CtiExtended       CtiExtendedType           `xml:"ctiExtended,attr"`
}

// May be one of ADD, NO_CHANGE
type AddNoChangeActionsType string

type AddNonMedicinalProductRequestType struct {
	NonMedicinalProduct []AddNonMedicinalProductType `xml:"urn:be:fgov:ehealth:samws:v2:nonmedicinal:common NonMedicinalProduct"`
}

type AddNonMedicinalProductType struct {
	Name             Text255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Category         Category         `xml:"urn:be:fgov:ehealth:samws:v2:nonmedicinal:common Category"`
	CommercialStatus CommercialStatus `xml:"urn:be:fgov:ehealth:samws:v2:nonmedicinal:common CommercialStatus"`
	Producer         TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core Producer"`
	Distributor      TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core Distributor,omitempty"`
	Action           AddActionType    `xml:"action,attr"`
	From             ValidityDateType `xml:"from,attr"`
	To               ValidityDateType `xml:"to,attr,omitempty"`
	Code             string           `xml:"code,attr"`
}

type AddParagraphRequestType struct {
}

type AddPricingInformationRequestType struct {
	Ampp []AddAmppMinEcoType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
}

type AddPublicNonReimbursablePriceRequestType struct {
	Dmpp []AddDmppMinEcoType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Dmpp"`
}

type AddRealActualIngredientEquivalentType struct {
	Type                IngredientTypeType `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	KnownEffect         bool               `xml:"urn:be:fgov:ehealth:samws:v2:actual:common KnownEffect,omitempty"`
	Strength            QuantityType       `xml:"urn:be:fgov:ehealth:samws:v2:core Strength"`
	StrengthDescription String50Type       `xml:"urn:be:fgov:ehealth:samws:v2:core StrengthDescription"`
	SubstanceCode       String10Type       `xml:"urn:be:fgov:ehealth:samws:v2:core SubstanceCode"`
	SequenceNr          int                `xml:"sequenceNr,attr"`
}

type AddRealActualIngredientType struct {
	RealActualIngredientEquivalent []AddRealActualIngredientEquivalentType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common RealActualIngredientEquivalent,omitempty"`
	Type                           IngredientTypeType                      `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	KnownEffect                    bool                                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common KnownEffect,omitempty"`
	Strength                       QuantityType                            `xml:"urn:be:fgov:ehealth:samws:v2:core Strength"`
	StrengthDescription            String50Type                            `xml:"urn:be:fgov:ehealth:samws:v2:core StrengthDescription"`
	AdditionalInformation          String255Type                           `xml:"urn:be:fgov:ehealth:samws:v2:core AdditionalInformation,omitempty"`
	SubstanceCode                  String10Type                            `xml:"urn:be:fgov:ehealth:samws:v2:core SubstanceCode"`
	Rank                           int                                     `xml:"rank,attr"`
}

type AddRealVirtualIngredientType struct {
	Type          IngredientTypeType `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	Strength      StrengthRangeType  `xml:"urn:be:fgov:ehealth:samws:v2:core Strength,omitempty"`
	SubstanceCode String10Type       `xml:"urn:be:fgov:ehealth:samws:v2:core SubstanceCode"`
	SequenceNr    int                `xml:"sequenceNr,attr"`
}

type AddSupplyProblemType struct {
	ExpectedEndOn         time.Time        `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ExpectedEndOn,omitempty"`
	ReportedBy            String50Type     `xml:"urn:be:fgov:ehealth:samws:v2:core ReportedBy,omitempty"`
	ReportedOn            time.Time        `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ReportedOn,omitempty"`
	ContactName           String50Type     `xml:"urn:be:fgov:ehealth:samws:v2:core ContactName,omitempty"`
	ContactMail           String50Type     `xml:"urn:be:fgov:ehealth:samws:v2:core ContactMail,omitempty"`
	ContactCompany        String255Type    `xml:"urn:be:fgov:ehealth:samws:v2:core ContactCompany,omitempty"`
	Phone                 String50Type     `xml:"urn:be:fgov:ehealth:samws:v2:core Phone,omitempty"`
	Reason                TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core Reason,omitempty"`
	AdditionalInformation TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core AdditionalInformation,omitempty"`
	Impact                Text255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core Impact,omitempty"`
	Action                AddActionType    `xml:"action,attr"`
	From                  ValidityDateType `xml:"from,attr"`
	To                    ValidityDateType `xml:"to,attr,omitempty"`
}

func (t *AddSupplyProblemType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AddSupplyProblemType
	var layout struct {
		*T
		ExpectedEndOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ExpectedEndOn,omitempty"`
		ReportedOn    *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ReportedOn,omitempty"`
	}
	layout.T = (*T)(t)
	layout.ExpectedEndOn = (*xsdDate)(&layout.T.ExpectedEndOn)
	layout.ReportedOn = (*xsdDate)(&layout.T.ReportedOn)
	return e.EncodeElement(layout, start)
}
func (t *AddSupplyProblemType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AddSupplyProblemType
	var overlay struct {
		*T
		ExpectedEndOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ExpectedEndOn,omitempty"`
		ReportedOn    *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ReportedOn,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.ExpectedEndOn = (*xsdDate)(&overlay.T.ExpectedEndOn)
	overlay.ReportedOn = (*xsdDate)(&overlay.T.ReportedOn)
	return d.DecodeElement(&overlay, &start)
}

type AddVirtualDefinitionRequestType struct {
	Vmp AddVmpType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common Vmp"`
}

type AddVirtualIngredientType struct {
	RealVirtualIngredient []AddRealVirtualIngredientType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common RealVirtualIngredient,omitempty"`
	Type                  IngredientTypeType             `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	Strength              StrengthRangeType              `xml:"urn:be:fgov:ehealth:samws:v2:core Strength,omitempty"`
	SubstanceCode         String10Type                   `xml:"urn:be:fgov:ehealth:samws:v2:core SubstanceCode"`
	Rank                  int                            `xml:"rank,attr"`
}

type AddVmpComponentType struct {
	VirtualIngredient         []AddVirtualIngredientType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common VirtualIngredient"`
	PhaseNumber               int                        `xml:"urn:be:fgov:ehealth:samws:v2:core PhaseNumber,omitempty"`
	Name                      Text255Type                `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	VirtualFormCode           String10Type               `xml:"urn:be:fgov:ehealth:samws:v2:core VirtualFormCode"`
	RouteOfAdministrationCode []String10Type             `xml:"urn:be:fgov:ehealth:samws:v2:core RouteOfAdministrationCodes"`
	Code                      int                        `xml:"code,attr"`
}

type AddVmpGroupRequestType struct {
	VmpGroup AddVmpGroupType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common VmpGroup"`
}

type AddVmpGroupType struct {
	Name                            Text255Type          `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	NoGenericPrescriptionReasonCode String10Type         `xml:"urn:be:fgov:ehealth:samws:v2:core NoGenericPrescriptionReasonCode,omitempty"`
	NoSwitchReasonCode              String10Type         `xml:"urn:be:fgov:ehealth:samws:v2:core NoSwitchReasonCode,omitempty"`
	PatientFrailtyIndicator         bool                 `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common PatientFrailtyIndicator,omitempty"`
	SingleAdministrationDose        QuantityType         `xml:"urn:be:fgov:ehealth:samws:v2:core SingleAdministrationDose,omitempty"`
	StandardDosage                  []StandardDosageType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common StandardDosage,omitempty"`
	Action                          AddActionType        `xml:"action,attr"`
	Code                            int                  `xml:"code,attr"`
}

type AddVmpType struct {
	VmpComponent                []AddVmpComponentType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common VmpComponent"`
	Name                        Text255Type           `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Abbreviation                Text255Type           `xml:"urn:be:fgov:ehealth:samws:v2:core Abbreviation"`
	SingleAdministrationDose    QuantityType          `xml:"urn:be:fgov:ehealth:samws:v2:core SingleAdministrationDose,omitempty"`
	CommentedClassificationCode []String10Type        `xml:"urn:be:fgov:ehealth:samws:v2:core CommentedClassificationCode,omitempty"`
	VmpGroupCode                int                   `xml:"urn:be:fgov:ehealth:samws:v2:core VmpGroupCode"`
	VtmCode                     int                   `xml:"urn:be:fgov:ehealth:samws:v2:core VtmCode,omitempty"`
	WadaCode                    []String10Type        `xml:"urn:be:fgov:ehealth:samws:v2:core WadaCode,omitempty"`
	Action                      AddActionType         `xml:"action,attr"`
	Code                        int                   `xml:"code,attr"`
}

type AddVtmRequestType struct {
	Vtm AddVtmType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common Vtm"`
}

type AddVtmType struct {
	Name   Text255Type   `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Action AddActionType `xml:"action,attr"`
	Code   int           `xml:"code,attr"`
}

type AddedDocumentDataType struct {
	CreatedTimestamp   time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
	CreatedUserId      String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	NameId             float64       `xml:"urn:be:fgov:ehealth:samws:v2:core NameId"`
	FormTypeId         int           `xml:"urn:be:fgov:ehealth:samws:v2:core FormTypeId"`
	AppendixTypeId     int           `xml:"urn:be:fgov:ehealth:samws:v2:core AppendixTypeId"`
	MimeType           String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core MimeType,omitempty"`
	DocumentContent    []byte        `xml:"urn:be:fgov:ehealth:samws:v2:export DocumentContent,omitempty"`
	AddressUrl         String255Type `xml:"urn:be:fgov:ehealth:samws:v2:core AddressUrl,omitempty"`
	ModificationStatus CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	From               time.Time     `xml:"from,attr"`
	To                 time.Time     `xml:"to,attr,omitempty"`
}

func (t *AddedDocumentDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AddedDocumentDataType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime     `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		DocumentContent  *xsdBase64Binary `xml:"urn:be:fgov:ehealth:samws:v2:export DocumentContent,omitempty"`
		From             *xsdDate         `xml:"from,attr"`
		To               *xsdDate         `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	layout.DocumentContent = (*xsdBase64Binary)(&layout.T.DocumentContent)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *AddedDocumentDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AddedDocumentDataType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime     `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		DocumentContent  *xsdBase64Binary `xml:"urn:be:fgov:ehealth:samws:v2:export DocumentContent,omitempty"`
		From             *xsdDate         `xml:"from,attr"`
		To               *xsdDate         `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	overlay.DocumentContent = (*xsdBase64Binary)(&overlay.T.DocumentContent)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type AddedDocumentFullDataType struct {
	Data        []AddedDocumentDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	DocumentSeq int                     `xml:"DocumentSeq,attr"`
}

type AddedDocumentKeyType struct {
	DocumentSeq int `xml:"DocumentSeq,attr"`
}

type AddedDocumentType struct {
	CreatedTimestamp   time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	CreatedUserId      String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	NameId             float64       `xml:"urn:be:fgov:ehealth:samws:v2:core NameId"`
	FormTypeId         int           `xml:"urn:be:fgov:ehealth:samws:v2:core FormTypeId"`
	AppendixTypeId     int           `xml:"urn:be:fgov:ehealth:samws:v2:core AppendixTypeId"`
	MimeType           String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core MimeType,omitempty"`
	DocumentContent    []byte        `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit DocumentContent,omitempty"`
	AddressUrl         String255Type `xml:"urn:be:fgov:ehealth:samws:v2:core AddressUrl,omitempty"`
	ModificationStatus CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	DocumentSeq        int           `xml:"DocumentSeq,attr"`
}

func (t *AddedDocumentType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AddedDocumentType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
		DocumentContent  *xsdBase64Binary `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit DocumentContent,omitempty"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	layout.DocumentContent = (*xsdBase64Binary)(&layout.T.DocumentContent)
	return e.EncodeElement(layout, start)
}
func (t *AddedDocumentType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AddedDocumentType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
		DocumentContent  *xsdBase64Binary `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit DocumentContent,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	overlay.DocumentContent = (*xsdBase64Binary)(&overlay.T.DocumentContent)
	return d.DecodeElement(&overlay, &start)
}

type AdministrationFrequencyType struct {
	Quantity  int          `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common Quantity"`
	Timeframe QuantityType `xml:"urn:be:fgov:ehealth:samws:v2:core Timeframe"`
}

// May be one of ADD, CHANGE, REMOVE, NO_CHANGE
type AllActionsType string

type AmpBcpiType struct {
	AbbreviatedName   Text255Type `xml:"urn:be:fgov:ehealth:samws:v2:core AbbreviatedName"`
	ProprietarySuffix Text255Type `xml:"urn:be:fgov:ehealth:samws:v2:core ProprietarySuffix"`
	PrescriptionName  Text255Type `xml:"urn:be:fgov:ehealth:samws:v2:core PrescriptionName"`
	Code              AmpCodeType `xml:"code,attr"`
}

// Must match the pattern SAM\d{6}\-\d{2}
type AmpCodeType string

type AmpComponentBcpiType struct {
	Dividable            DividableType       `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Dividable,omitempty"`
	Scored               ScoredType          `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Scored,omitempty"`
	Crushable            CrushableType       `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Crushable,omitempty"`
	ContainsAlcohol      ContainsAlcoholType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ContainsAlcohol,omitempty"`
	SugarFree            bool                `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SugarFree,omitempty"`
	ModifiedReleaseType  int                 `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ModifiedReleaseType,omitempty"`
	SpecificDrugDevice   int                 `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SpecificDrugDevice,omitempty"`
	Dimensions           String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Dimensions,omitempty"`
	Name                 Text255Type         `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Note                 TextType            `xml:"urn:be:fgov:ehealth:samws:v2:core Note,omitempty"`
	Concentration        Text255Type         `xml:"urn:be:fgov:ehealth:samws:v2:core Concentration,omitempty"`
	OsmoticConcentration float64             `xml:"urn:be:fgov:ehealth:samws:v2:core OsmoticConcentration,omitempty"`
	CaloricValue         float64             `xml:"urn:be:fgov:ehealth:samws:v2:core CaloricValue,omitempty"`
	SequenceNr           int                 `xml:"sequenceNr,attr"`
}

type AmpComponentDataType struct {
	PharmaceuticalForm    []PharmaceuticalFormWithStandardsType    `xml:"urn:be:fgov:ehealth:samws:v2:export PharmaceuticalFormCode"`
	RouteOfAdministration []RouteOfAdministrationWithStandardsType `xml:"urn:be:fgov:ehealth:samws:v2:export RouteOfAdministration"`
	Dividable             DividableType                            `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Dividable,omitempty"`
	Scored                ScoredType                               `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Scored,omitempty"`
	Crushable             CrushableType                            `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Crushable,omitempty"`
	ContainsAlcohol       ContainsAlcoholType                      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ContainsAlcohol,omitempty"`
	SugarFree             bool                                     `xml:"urn:be:fgov:ehealth:samws:v2:export SugarFree,omitempty"`
	ModifiedReleaseType   int                                      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ModifiedReleaseType,omitempty"`
	SpecificDrugDevice    int                                      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SpecificDrugDevice,omitempty"`
	Dimensions            String50Type                             `xml:"urn:be:fgov:ehealth:samws:v2:core Dimensions,omitempty"`
	Name                  Text255Type                              `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Note                  TextType                                 `xml:"urn:be:fgov:ehealth:samws:v2:core Note,omitempty"`
	Concentration         Text255Type                              `xml:"urn:be:fgov:ehealth:samws:v2:core Concentration,omitempty"`
	OsmoticConcentration  float64                                  `xml:"urn:be:fgov:ehealth:samws:v2:core OsmoticConcentration,omitempty"`
	CaloricValue          float64                                  `xml:"urn:be:fgov:ehealth:samws:v2:core CaloricValue,omitempty"`
	From                  time.Time                                `xml:"from,attr"`
	To                    time.Time                                `xml:"to,attr,omitempty"`
}

func (t *AmpComponentDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AmpComponentDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *AmpComponentDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AmpComponentDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type AmpComponentFamhpType struct {
	PharmaceuticalFormCode    []String10Type                `xml:"urn:be:fgov:ehealth:samws:v2:core PharmaceuticalFormCode"`
	RouteOfAdministrationCode []String10Type                `xml:"urn:be:fgov:ehealth:samws:v2:core RouteOfAdministrationCodes"`
	RealActualIngredient      []AddRealActualIngredientType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common RealActualIngredient"`
	SequenceNr                int                           `xml:"sequenceNr,attr"`
}

type AmpComponentFullDataType struct {
	Data                 []AmpComponentDataType             `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	RealActualIngredient []RealActualIngredientFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export RealActualIngredient,omitempty"`
	VmpComponentCode     int                                `xml:"vmpComponentCode,attr,omitempty"`
	SequenceNr           int                                `xml:"sequenceNr,attr"`
}

type AmpComponentKeyType struct {
	SequenceNr int `xml:"sequenceNr,attr"`
}

type AmpComponentLinkToVirtualType struct {
	VmpComponent VmpComponentKeyType `xml:"urn:be:fgov:ehealth:samws:v2:core VmpComponent"`
	SequenceNr   int                 `xml:"sequenceNr,attr"`
}

type AmpDataType struct {
	OfficialName     String255Type    `xml:"urn:be:fgov:ehealth:samws:v2:core OfficialName,omitempty"`
	Name             ConsultTextType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	PrescriptionName ConsultTextType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation PrescriptionName,omitempty"`
	AbbreviatedName  ConsultTextType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation AbbreviatedName,omitempty"`
	From             ValidityDateType `xml:"from,attr"`
	To               ValidityDateType `xml:"to,attr,omitempty"`
}

type AmpFamhpType struct {
	OfficialName          String255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core OfficialName"`
	Status                AmpStatusType      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Status,omitempty"`
	Name                  Text255Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	BlackTriangle         bool               `xml:"urn:be:fgov:ehealth:samws:v2:actual:common BlackTriangle"`
	MedicineType          MedicineTypeType   `xml:"urn:be:fgov:ehealth:samws:v2:actual:common MedicineType"`
	PrescriptionNameFamhp Text255Type        `xml:"urn:be:fgov:ehealth:samws:v2:core PrescriptionNameFamhp,omitempty"`
	CompanyActorNr        CompanyActorNrType `xml:"urn:be:fgov:ehealth:samws:v2:core CompanyActorNr"`
	Code                  AmpCodeType        `xml:"code,attr"`
}

type AmpFullDataType struct {
	Data         []AmpDataType              `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	AmpComponent []AmpComponentFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export AmpComponent,omitempty"`
	Ampp         []AmppFullDataType         `xml:"urn:be:fgov:ehealth:samws:v2:export Ampp,omitempty"`
	VmpCode      int                        `xml:"vmpCode,attr,omitempty"`
	Code         AmpCodeType                `xml:"code,attr"`
}

type AmpKeyType struct {
	Code AmpCodeType `xml:"code,attr"`
}

type AmpLinkToVirtualType struct {
	Vmp          VmpKeyType                      `xml:"urn:be:fgov:ehealth:samws:v2:core Vmp"`
	AmpComponent []AmpComponentLinkToVirtualType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common AmpComponent"`
	Code         AmpCodeType                     `xml:"code,attr"`
}

// May be one of AUTHORIZED, SUSPENDED, REVOKED
type AmpStatusType string

type AmpType struct {
	Data []AmpDataType `xml:"urn:be:fgov:ehealth:samws:v2:consultation:list Data"`
	Code string        `xml:"code,attr"`
}

type AmppBcpiType struct {
	SingleUse                       bool            `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SingleUse,omitempty"`
	SpeciallyRegulated              int             `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SpeciallyRegulated,omitempty"`
	AbbreviatedName                 Text255Type     `xml:"urn:be:fgov:ehealth:samws:v2:core AbbreviatedName"`
	PrescriptionName                Text255Type     `xml:"urn:be:fgov:ehealth:samws:v2:core PrescriptionName"`
	Note                            TextType        `xml:"urn:be:fgov:ehealth:samws:v2:core Note,omitempty"`
	PosologyNote                    TextType        `xml:"urn:be:fgov:ehealth:samws:v2:core PosologyNote,omitempty"`
	CrmLink                         Text255Type     `xml:"urn:be:fgov:ehealth:samws:v2:core CrmLink,omitempty"`
	NoGenericPrescriptionReasonCode []String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core NoGenericPrescriptionReasonCode,omitempty"`
	CtiExtended                     CtiExtendedType `xml:"ctiExtended,attr"`
}

type AmppComponentDataType struct {
	AmpcSequenceNr    int                     `xml:"urn:be:fgov:ehealth:samws:v2:core AmpcSequenceNr,omitempty"`
	ContentType       ContentTypeType         `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ContentType"`
	ContentMultiplier int                     `xml:"urn:be:fgov:ehealth:samws:v2:export ContentMultiplier,omitempty"`
	PackSpecification String255Type           `xml:"urn:be:fgov:ehealth:samws:v2:core PackSpecification,omitempty"`
	DeviceType        DeviceTypeType          `xml:"urn:be:fgov:ehealth:samws:v2:refdata DeviceType,omitempty"`
	PackagingClosure  []PackagingClosureType  `xml:"urn:be:fgov:ehealth:samws:v2:refdata PackagingClosure,omitempty"`
	PackagingMaterial []PackagingMaterialType `xml:"urn:be:fgov:ehealth:samws:v2:refdata PackagingMaterial,omitempty"`
	PackagingType     PackagingTypeType       `xml:"urn:be:fgov:ehealth:samws:v2:refdata PackagingType,omitempty"`
	From              time.Time               `xml:"from,attr"`
	To                time.Time               `xml:"to,attr,omitempty"`
}

func (t *AmppComponentDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AmppComponentDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *AmppComponentDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AmppComponentDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type AmppComponentEquivalentDataType struct {
	Content QuantityType `xml:"urn:be:fgov:ehealth:samws:v2:core Content"`
	From    time.Time    `xml:"from,attr"`
	To      time.Time    `xml:"to,attr,omitempty"`
}

func (t *AmppComponentEquivalentDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AmppComponentEquivalentDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *AmppComponentEquivalentDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AmppComponentEquivalentDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type AmppComponentEquivalentFullDataType struct {
	Data       []AmppComponentEquivalentDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	SequenceNr int                               `xml:"sequenceNr,attr"`
}

type AmppComponentEquivalentKeyType struct {
	SequenceNr int `xml:"sequenceNr,attr"`
}

// This extra detail level in the AMPPC has been created because the packaging
// described in an AMPP can have one or many equivalent specification(s) which have to be
// specified for the medicinal product prescription.
//
// For example, a substance is described on the package with a quantity of “10 doses”. It is
// important to also specify that these doses are equivalent to “10x 20ml” of that substance.
type AmppComponentEquivalentType struct {
	Content    QuantityType `xml:"urn:be:fgov:ehealth:samws:v2:core Content"`
	SequenceNr int          `xml:"sequenceNr,attr"`
}

type AmppComponentFullDataType struct {
	Data                    []AmppComponentDataType               `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	AmppComponentEquivalent []AmppComponentEquivalentFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export AmppComponentEquivalent,omitempty"`
	SequenceNr              int                                   `xml:"sequenceNr,attr"`
}

type AmppComponentKeyType struct {
	SequenceNr int `xml:"sequenceNr,attr"`
}

type AmppComponentType struct {
	AmpcSequenceNr        int             `xml:"urn:be:fgov:ehealth:samws:v2:core AmpcSequenceNr,omitempty"`
	ContentType           ContentTypeType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ContentType"`
	ContentMultiplier     int             `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ContentMultiplier,omitempty"`
	PackSpecification     String255Type   `xml:"urn:be:fgov:ehealth:samws:v2:core PackSpecification,omitempty"`
	DeviceTypeCode        String8Type     `xml:"urn:be:fgov:ehealth:samws:v2:core DeviceTypeCode,omitempty"`
	PackagingClosureCode  []String8Type   `xml:"urn:be:fgov:ehealth:samws:v2:core PackagingClosureCode,omitempty"`
	PackagingMaterialCode []String8Type   `xml:"urn:be:fgov:ehealth:samws:v2:core PackagingMaterialCode,omitempty"`
	PackagingTypeCode     String8Type     `xml:"urn:be:fgov:ehealth:samws:v2:core PackagingTypeCode,omitempty"`
	SequenceNr            int             `xml:"sequenceNr,attr"`
}

type AmppDataType struct {
	AtcCode          []String7Type    `xml:"urn:be:fgov:ehealth:samws:v2:core AtcCode,omitempty"`
	AbbreviatedName  ConsultTextType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation AbbreviatedName,omitempty"`
	PrescriptionName ConsultTextType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation PrescriptionName,omitempty"`
	From             ValidityDateType `xml:"from,attr"`
	To               ValidityDateType `xml:"to,attr,omitempty"`
}

type AmppFamhpType struct {
	AuthorisationNr                String50Type       `xml:"urn:be:fgov:ehealth:samws:v2:core AuthorisationNr"`
	Orphan                         bool               `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Orphan"`
	LeafletLink                    Text255Type        `xml:"urn:be:fgov:ehealth:samws:v2:core LeafletLink,omitempty"`
	SpcLink                        Text255Type        `xml:"urn:be:fgov:ehealth:samws:v2:core SpcLink,omitempty"`
	RmaPatientLink                 Text255Type        `xml:"urn:be:fgov:ehealth:samws:v2:core RmaPatientLink,omitempty"`
	RmaProfessionalLink            Text255Type        `xml:"urn:be:fgov:ehealth:samws:v2:core RmaProfessionalLink,omitempty"`
	ParallelCircuit                int                `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ParallelCircuit,omitempty"`
	ParallelDistributor            String255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core ParallelDistributor,omitempty"`
	PackMultiplier                 int                `xml:"urn:be:fgov:ehealth:samws:v2:core PackMultiplier,omitempty"`
	PackAmount                     PackAmountType     `xml:"urn:be:fgov:ehealth:samws:v2:actual:common PackAmount,omitempty"`
	PackDisplayValue               String255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core PackDisplayValue,omitempty"`
	Status                         AmpStatusType      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Status"`
	GTIN                           String20Type       `xml:"urn:be:fgov:ehealth:samws:v2:core GTIN,omitempty"`
	DHPCLink                       Text255Type        `xml:"urn:be:fgov:ehealth:samws:v2:core DHPCLink,omitempty"`
	PrescriptionNameFamhp          Text255Type        `xml:"urn:be:fgov:ehealth:samws:v2:core PrescriptionNameFamhp,omitempty"`
	FMDProductCode                 []String20Type     `xml:"urn:be:fgov:ehealth:samws:v2:core FMDProductCode,omitempty"`
	FMDInScope                     bool               `xml:"urn:be:fgov:ehealth:samws:v2:actual:common FMDInScope,omitempty"`
	AntiTemperingDevicePresent     bool               `xml:"urn:be:fgov:ehealth:samws:v2:actual:common AntiTemperingDevicePresent,omitempty"`
	AtcCode                        []String7Type      `xml:"urn:be:fgov:ehealth:samws:v2:core AtcCode,omitempty"`
	DeliveryModusCode              String7Type        `xml:"urn:be:fgov:ehealth:samws:v2:core DeliveryModusCode"`
	DeliveryModusSpecificationCode String7Type        `xml:"urn:be:fgov:ehealth:samws:v2:core DeliveryModusSpecificationCode,omitempty"`
	DistributorCompanyActorNr      CompanyActorNrType `xml:"urn:be:fgov:ehealth:samws:v2:core DistributorCompanyActorNr,omitempty"`
	CtiExtended                    CtiExtendedType    `xml:"ctiExtended,attr"`
}

type AmppFullDataType struct {
	Data              []AmppDataType                 `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	AmppComponent     []AmppComponentFullDataType    `xml:"urn:be:fgov:ehealth:samws:v2:export AmppComponent,omitempty"`
	Commercialization CommercializationFullDataType  `xml:"urn:be:fgov:ehealth:samws:v2:export Commercialization,omitempty"`
	SupplyProblem     SupplyProblemFullDataType      `xml:"urn:be:fgov:ehealth:samws:v2:export SupplyProblem,omitempty"`
	DerogationImport  []DerogationImportFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export DerogationImport,omitempty"`
	Dmpp              []DmppFullDataType             `xml:"urn:be:fgov:ehealth:samws:v2:export Dmpp,omitempty"`
	CtiExtended       CtiExtendedType                `xml:"ctiExtended,attr"`
}

type AmppKeyType struct {
	CtiExtended CtiExtendedType `xml:"ctiExtended,attr"`
}

type AmppNihdiBisType struct {
	DefinedDailyDose QuantityType    `xml:"urn:be:fgov:ehealth:samws:v2:core DefinedDailyDose,omitempty"`
	CtiExtended      CtiExtendedType `xml:"ctiExtended,attr"`
}

type AmppNihdiType struct {
	ExFactoryPrice    float64         `xml:"urn:be:fgov:ehealth:samws:v2:core ExFactoryPrice,omitempty"`
	ReimbursementCode int             `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ReimbursementCode,omitempty"`
	BigPackage        bool            `xml:"urn:be:fgov:ehealth:samws:v2:actual:common BigPackage,omitempty"`
	Index             float64         `xml:"urn:be:fgov:ehealth:samws:v2:core Index,omitempty"`
	CtiExtended       CtiExtendedType `xml:"ctiExtended,attr"`
}

type AmppType struct {
	Data        []AmppDataType `xml:"urn:be:fgov:ehealth:samws:v2:consultation:list Data"`
	CtiExtended string         `xml:"ctiExtended,attr"`
}

type AnomalyType struct {
	Code            string `xml:"urn:be:fgov:ehealth:samws:v2:core Code"`
	Description     string `xml:"urn:be:fgov:ehealth:samws:v2:core Description"`
	TargetObject    string `xml:"urn:be:fgov:ehealth:samws:v2:core TargetObject"`
	TargetReference string `xml:"urn:be:fgov:ehealth:samws:v2:core TargetReference"`
}

// May be one of
type Anon1 string

type Appendix struct {
	Description ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Description"`
	Code        String10Type    `xml:"code,attr"`
}

type AppendixKeyType struct {
	Code String10Type `xml:"code,attr"`
}

type AppendixType struct {
	Description TextType     `xml:"urn:be:fgov:ehealth:samws:v2:core Description"`
	Code        String10Type `xml:"code,attr"`
}

type AppendixTypeType struct {
	NameId         float64 `xml:"urn:be:fgov:ehealth:samws:v2:core NameId"`
	AppendixTypeId int     `xml:"AppendixTypeId,attr"`
}

type AtcClassification struct {
	Description string      `xml:"urn:be:fgov:ehealth:samws:v2:consultation Description"`
	Code        String7Type `xml:"code,attr,omitempty"`
}

type AtcClassificationKeyType struct {
	Code String7Type `xml:"code,attr"`
}

type AtcClassificationType struct {
	Description string      `xml:"urn:be:fgov:ehealth:samws:v2:refdata Description"`
	Code        String7Type `xml:"code,attr"`
}

type AttachmentDataType struct {
	Name         Text255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	TemplateUrl  String255Type    `xml:"urn:be:fgov:ehealth:samws:v2:core TemplateUrl"`
	Mandatory    bool             `xml:"urn:be:fgov:ehealth:samws:v2:export Mandatory"`
	Appendix     AppendixType     `xml:"urn:be:fgov:ehealth:samws:v2:refdata Appendix"`
	FormCategory FormCategoryType `xml:"urn:be:fgov:ehealth:samws:v2:refdata FormCategory"`
	From         time.Time        `xml:"from,attr"`
	To           time.Time        `xml:"to,attr,omitempty"`
}

func (t *AttachmentDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AttachmentDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *AttachmentDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AttachmentDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type AttachmentFullDataType struct {
	Data       []AttachmentDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	SequenceNr int                  `xml:"sequenceNr,attr"`
}

type AttachmentKeyType struct {
	SequenceNr int `xml:"sequenceNr,attr"`
}

type AttachmentType struct {
	Name             Text255Type   `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	TemplateUrl      String255Type `xml:"urn:be:fgov:ehealth:samws:v2:core TemplateUrl"`
	Mandatory        bool          `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Mandatory"`
	AppendixCode     String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core AppendixCode"`
	FormCategoryCode String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core FormCategoryCode"`
	SequenceNr       int           `xml:"sequenceNr,attr"`
}

type BoundedParameterType struct {
	DosageParameterName String255Type `xml:"urn:be:fgov:ehealth:samws:v2:core DosageParameterName"`
	LowerBound          QuantityType  `xml:"urn:be:fgov:ehealth:samws:v2:core LowerBound,omitempty"`
	UpperBound          QuantityType  `xml:"urn:be:fgov:ehealth:samws:v2:core UpperBound,omitempty"`
}

// May be one of S, H, D, C, E, M, B, I, A, R, F, G, O, T, K
type Category string

// May be one of CHANGE
type ChangeActionType string

type ChangeAmpBcpiType struct {
	AbbreviatedName   Text255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core AbbreviatedName"`
	ProprietarySuffix Text255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core ProprietarySuffix"`
	PrescriptionName  Text255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core PrescriptionName"`
	AmpComponent      []ChangeAmpComponentBcpiType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common AmpComponent,omitempty"`
	Action            ChangeNoChangeActionType     `xml:"action,attr"`
	From              ValidityDateType             `xml:"from,attr,omitempty"`
	To                ValidityDateType             `xml:"to,attr,omitempty"`
	Code              AmpCodeType                  `xml:"code,attr"`
}

type ChangeAmpComponentBcpiType struct {
	Dividable            DividableType       `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Dividable,omitempty"`
	Scored               ScoredType          `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Scored,omitempty"`
	Crushable            CrushableType       `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Crushable,omitempty"`
	ContainsAlcohol      ContainsAlcoholType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ContainsAlcohol,omitempty"`
	SugarFree            bool                `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SugarFree,omitempty"`
	ModifiedReleaseType  int                 `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ModifiedReleaseType,omitempty"`
	SpecificDrugDevice   int                 `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SpecificDrugDevice,omitempty"`
	Dimensions           String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Dimensions,omitempty"`
	Name                 Text255Type         `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Note                 TextType            `xml:"urn:be:fgov:ehealth:samws:v2:core Note,omitempty"`
	Concentration        Text255Type         `xml:"urn:be:fgov:ehealth:samws:v2:core Concentration,omitempty"`
	OsmoticConcentration float64             `xml:"urn:be:fgov:ehealth:samws:v2:core OsmoticConcentration,omitempty"`
	CaloricValue         float64             `xml:"urn:be:fgov:ehealth:samws:v2:core CaloricValue,omitempty"`
	Action               ChangeActionType    `xml:"action,attr"`
	From                 ValidityDateType    `xml:"from,attr"`
	To                   ValidityDateType    `xml:"to,attr,omitempty"`
	SequenceNr           int                 `xml:"sequenceNr,attr"`
}

type ChangeAmpComponentFamhpType struct {
	PharmaceuticalFormCode    []String10Type                   `xml:"urn:be:fgov:ehealth:samws:v2:core PharmaceuticalFormCode"`
	RouteOfAdministrationCode []String10Type                   `xml:"urn:be:fgov:ehealth:samws:v2:core RouteOfAdministrationCodes"`
	RealActualIngredient      []ChangeRealActualIngredientType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common RealActualIngredient,omitempty"`
	Action                    ChangeNoChangeActionType         `xml:"action,attr"`
	From                      ValidityDateType                 `xml:"from,attr,omitempty"`
	To                        ValidityDateType                 `xml:"to,attr,omitempty"`
	SequenceNr                int                              `xml:"sequenceNr,attr"`
}

type ChangeAmpFamhpType struct {
	OfficialName          String255Type                 `xml:"urn:be:fgov:ehealth:samws:v2:core OfficialName"`
	Status                AmpStatusType                 `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Status,omitempty"`
	Name                  Text255Type                   `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	BlackTriangle         bool                          `xml:"urn:be:fgov:ehealth:samws:v2:actual:common BlackTriangle"`
	MedicineType          MedicineTypeType              `xml:"urn:be:fgov:ehealth:samws:v2:actual:common MedicineType"`
	PrescriptionNameFamhp Text255Type                   `xml:"urn:be:fgov:ehealth:samws:v2:core PrescriptionNameFamhp,omitempty"`
	CompanyActorNr        CompanyActorNrType            `xml:"urn:be:fgov:ehealth:samws:v2:core CompanyActorNr"`
	AmpComponent          []ChangeAmpComponentFamhpType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common AmpComponent,omitempty"`
	Ampp                  []ChangeAmppFamhpType         `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp,omitempty"`
	Action                ChangeNoChangeActionType      `xml:"action,attr"`
	From                  ValidityDateType              `xml:"from,attr,omitempty"`
	To                    ValidityDateType              `xml:"to,attr,omitempty"`
	Code                  AmpCodeType                   `xml:"code,attr"`
}

type ChangeAmppBcpiType struct {
	SingleUse                       bool             `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SingleUse,omitempty"`
	SpeciallyRegulated              int              `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SpeciallyRegulated,omitempty"`
	AbbreviatedName                 Text255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core AbbreviatedName"`
	PrescriptionName                Text255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core PrescriptionName"`
	Note                            TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core Note,omitempty"`
	PosologyNote                    TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core PosologyNote,omitempty"`
	CrmLink                         Text255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core CrmLink,omitempty"`
	NoGenericPrescriptionReasonCode []String10Type   `xml:"urn:be:fgov:ehealth:samws:v2:core NoGenericPrescriptionReasonCode,omitempty"`
	Action                          ChangeActionType `xml:"action,attr"`
	From                            ValidityDateType `xml:"from,attr"`
	To                              ValidityDateType `xml:"to,attr,omitempty"`
	CtiExtended                     CtiExtendedType  `xml:"ctiExtended,attr"`
}

type ChangeAmppComponentEquivalentType struct {
	Content    QuantityType     `xml:"urn:be:fgov:ehealth:samws:v2:core Content"`
	Action     ChangeActionType `xml:"action,attr"`
	From       ValidityDateType `xml:"from,attr"`
	To         ValidityDateType `xml:"to,attr,omitempty"`
	SequenceNr int              `xml:"sequenceNr,attr"`
}

type ChangeAmppComponentType struct {
	AmpcSequenceNr          int                                 `xml:"urn:be:fgov:ehealth:samws:v2:core AmpcSequenceNr,omitempty"`
	ContentType             ContentTypeType                     `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ContentType"`
	ContentMultiplier       int                                 `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ContentMultiplier,omitempty"`
	PackSpecification       String255Type                       `xml:"urn:be:fgov:ehealth:samws:v2:core PackSpecification,omitempty"`
	DeviceTypeCode          String8Type                         `xml:"urn:be:fgov:ehealth:samws:v2:core DeviceTypeCode,omitempty"`
	PackagingClosureCode    []String8Type                       `xml:"urn:be:fgov:ehealth:samws:v2:core PackagingClosureCode,omitempty"`
	PackagingMaterialCode   []String8Type                       `xml:"urn:be:fgov:ehealth:samws:v2:core PackagingMaterialCode,omitempty"`
	PackagingTypeCode       String8Type                         `xml:"urn:be:fgov:ehealth:samws:v2:core PackagingTypeCode,omitempty"`
	AmppComponentEquivalent []ChangeAmppComponentEquivalentType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common AmppComponentEquivalent,omitempty"`
	Action                  ChangeNoChangeActionType            `xml:"action,attr"`
	From                    ValidityDateType                    `xml:"from,attr,omitempty"`
	To                      ValidityDateType                    `xml:"to,attr,omitempty"`
	SequenceNr              int                                 `xml:"sequenceNr,attr"`
}

type ChangeAmppFamhpType struct {
	AuthorisationNr                String50Type                 `xml:"urn:be:fgov:ehealth:samws:v2:core AuthorisationNr"`
	Orphan                         bool                         `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Orphan"`
	LeafletLink                    Text255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core LeafletLink,omitempty"`
	SpcLink                        Text255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core SpcLink,omitempty"`
	RmaPatientLink                 Text255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core RmaPatientLink,omitempty"`
	RmaProfessionalLink            Text255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core RmaProfessionalLink,omitempty"`
	ParallelCircuit                int                          `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ParallelCircuit,omitempty"`
	ParallelDistributor            String255Type                `xml:"urn:be:fgov:ehealth:samws:v2:core ParallelDistributor,omitempty"`
	PackMultiplier                 int                          `xml:"urn:be:fgov:ehealth:samws:v2:core PackMultiplier,omitempty"`
	PackAmount                     PackAmountType               `xml:"urn:be:fgov:ehealth:samws:v2:actual:common PackAmount,omitempty"`
	PackDisplayValue               String255Type                `xml:"urn:be:fgov:ehealth:samws:v2:core PackDisplayValue,omitempty"`
	Status                         AmpStatusType                `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Status"`
	GTIN                           String20Type                 `xml:"urn:be:fgov:ehealth:samws:v2:core GTIN,omitempty"`
	DHPCLink                       Text255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core DHPCLink,omitempty"`
	PrescriptionNameFamhp          Text255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core PrescriptionNameFamhp,omitempty"`
	AtcCode                        []String7Type                `xml:"urn:be:fgov:ehealth:samws:v2:core AtcCode,omitempty"`
	DeliveryModusCode              String7Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core DeliveryModusCode"`
	DeliveryModusSpecificationCode String7Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core DeliveryModusSpecificationCode,omitempty"`
	DistributorCompanyActorNr      CompanyActorNrType           `xml:"urn:be:fgov:ehealth:samws:v2:core DistributorCompanyActorNr,omitempty"`
	AmppComponent                  []ChangeAmppComponentType    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common AmppComponent,omitempty"`
	SupplyProblem                  ChangeSupplyProblemType      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SupplyProblem,omitempty"`
	DerogationImport               []ChangeDerogationImportType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common DerogationImport,omitempty"`
	Action                         ChangeNoChangeActionType     `xml:"action,attr"`
	From                           ValidityDateType             `xml:"from,attr,omitempty"`
	To                             ValidityDateType             `xml:"to,attr,omitempty"`
	CtiExtended                    CtiExtendedType              `xml:"ctiExtended,attr"`
}

type ChangeAmppNihdiBisType struct {
	DefinedDailyDose QuantityType     `xml:"urn:be:fgov:ehealth:samws:v2:core DefinedDailyDose,omitempty"`
	Action           ChangeActionType `xml:"action,attr"`
	From             ValidityDateType `xml:"from,attr"`
	To               ValidityDateType `xml:"to,attr,omitempty"`
	CtiExtended      CtiExtendedType  `xml:"ctiExtended,attr"`
}

type ChangeAmppNihdiType struct {
	ExFactoryPrice    float64          `xml:"urn:be:fgov:ehealth:samws:v2:core ExFactoryPrice,omitempty"`
	ReimbursementCode int              `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ReimbursementCode,omitempty"`
	BigPackage        bool             `xml:"urn:be:fgov:ehealth:samws:v2:actual:common BigPackage,omitempty"`
	Index             float64          `xml:"urn:be:fgov:ehealth:samws:v2:core Index,omitempty"`
	Action            ChangeActionType `xml:"action,attr"`
	From              ValidityDateType `xml:"from,attr"`
	To                ValidityDateType `xml:"to,attr,omitempty"`
	CtiExtended       CtiExtendedType  `xml:"ctiExtended,attr"`
}

type ChangeCommentedClassificationRequestType struct {
	CommentedClassification ChangeCommentedClassificationType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common CommentedClassification"`
}

type ChangeCommentedClassificationType struct {
	CommentedClassification []ChangeCommentedClassificationType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common CommentedClassification,omitempty"`
	Title                   Text255Type                         `xml:"urn:be:fgov:ehealth:samws:v2:core Title,omitempty"`
	Content                 TextType                            `xml:"urn:be:fgov:ehealth:samws:v2:core Content,omitempty"`
	PosologyNote            TextType                            `xml:"urn:be:fgov:ehealth:samws:v2:core PosologyNote"`
	Url                     Text255Type                         `xml:"urn:be:fgov:ehealth:samws:v2:core Url,omitempty"`
	Action                  ChangeNoChangeActionType            `xml:"action,attr"`
	Code                    String10Type                        `xml:"code,attr"`
}

type ChangeCommercializationType struct {
	EndOfCommercialization TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core EndOfCommercialization,omitempty"`
	Reason                 TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core Reason,omitempty"`
	AdditionalInformation  TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core AdditionalInformation,omitempty"`
	Impact                 TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core Impact,omitempty"`
	Action                 ChangeActionType `xml:"action,attr"`
	From                   ValidityDateType `xml:"from,attr"`
	To                     ValidityDateType `xml:"to,attr,omitempty"`
}

type ChangeCompanyRequestType struct {
	Company ChangeCompanyType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit Company"`
}

type ChangeCompanyType struct {
	AuthorisationNr String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core AuthorisationNr,omitempty"`
	VatNr           VatNrPerCountryType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit VatNr,omitempty"`
	EuropeanNr      string              `xml:"urn:be:fgov:ehealth:samws:v2:company:submit EuropeanNr,omitempty"`
	Denomination    String255Type       `xml:"urn:be:fgov:ehealth:samws:v2:core Denomination"`
	LegalForm       String30Type        `xml:"urn:be:fgov:ehealth:samws:v2:core LegalForm,omitempty"`
	Building        String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Building,omitempty"`
	StreetName      String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core StreetName,omitempty"`
	StreetNum       String10Type        `xml:"urn:be:fgov:ehealth:samws:v2:core StreetNum,omitempty"`
	Postbox         String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Postbox,omitempty"`
	Postcode        String10Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Postcode,omitempty"`
	City            String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core City,omitempty"`
	CountryCode     CountryCodeType     `xml:"urn:be:fgov:ehealth:samws:v2:company:submit CountryCode,omitempty"`
	Phone           String30Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Phone,omitempty"`
	Language        CompanyLanguageType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit Language"`
	Website         String255Type       `xml:"urn:be:fgov:ehealth:samws:v2:core Website,omitempty"`
	Email           String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Email,omitempty"`
	Action          ChangeActionType    `xml:"action,attr"`
	From            ValidityDateType    `xml:"from,attr"`
	To              ValidityDateType    `xml:"to,attr,omitempty"`
	ActorNr         CompanyActorNrType  `xml:"actorNr,attr"`
}

type ChangeDerogationImportType struct {
	Note       TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core Note"`
	Action     ChangeActionType `xml:"action,attr"`
	From       ValidityDateType `xml:"from,attr"`
	To         ValidityDateType `xml:"to,attr,omitempty"`
	SequenceNr int              `xml:"sequenceNr,attr"`
}

type ChangeDmppFamhpRequestType struct {
	Dmpp ChangeDmppType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Dmpp"`
}

type ChangeDmppNihdiRequestType struct {
	Dmpp []ChangeDmppNihdiType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Dmpp"`
}

type ChangeDmppNihdiType struct {
	Price               float64                 `xml:"urn:be:fgov:ehealth:samws:v2:core Price,omitempty"`
	Cheap               bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Cheap,omitempty"`
	Cheapest            bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Cheapest,omitempty"`
	Reimbursable        bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Reimbursable"`
	CtiExtended         CtiExtendedType         `xml:"ctiExtended,attr"`
	Action              ChangeActionType        `xml:"action,attr"`
	From                ValidityDateType        `xml:"from,attr"`
	To                  ValidityDateType        `xml:"to,attr,omitempty"`
	DeliveryEnvironment DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                DmppCodeType            `xml:"code,attr"`
	CodeType            DmppCodeTypeType        `xml:"codeType,attr"`
}

type ChangeDmppType struct {
	Price               float64                 `xml:"urn:be:fgov:ehealth:samws:v2:core Price,omitempty"`
	Cheap               bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Cheap,omitempty"`
	Cheapest            bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Cheapest,omitempty"`
	CtiExtended         CtiExtendedType         `xml:"ctiExtended,attr"`
	Action              ChangeActionType        `xml:"action,attr"`
	From                ValidityDateType        `xml:"from,attr"`
	To                  ValidityDateType        `xml:"to,attr,omitempty"`
	DeliveryEnvironment DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                DmppCodeType            `xml:"code,attr"`
	CodeType            DmppCodeTypeType        `xml:"codeType,attr"`
}

type ChangeDrugPackageBcpiRequestType struct {
	Ampp ChangeAmppBcpiType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
}

type ChangeDrugPackageFamhpRequestType struct {
	Ampp ChangeAmppFamhpType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
}

type ChangeDrugPackageNihdiBisRequestType struct {
	Ampp []ChangeAmppNihdiBisType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
}

type ChangeDrugPackageNihdiRequestType struct {
	Ampp []ChangeAmppNihdiType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
}

type ChangeDrugProductBcpiRequestType struct {
	Amp ChangeAmpBcpiType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Amp"`
}

type ChangeDrugProductRequestType struct {
	Amp ChangeAmpFamhpType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Amp"`
}

type ChangeDrugStatusRequestType struct {
	Ampp ChangeDrugStatusType `xml:"urn:be:fgov:ehealth:samws:v2:actual:status Ampp"`
}

type ChangeDrugStatusType struct {
	Commercialization ChangeCommercializationType  `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Commercialization,omitempty"`
	SupplyProblem     ChangeSupplyProblemType      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SupplyProblem,omitempty"`
	DerogationImport  []ChangeDerogationImportType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common DerogationImport,omitempty"`
	CtiExtended       CtiExtendedType              `xml:"ctiExtended,attr"`
}

// May be one of CHANGE, NO_CHANGE
type ChangeNoChangeActionType string

type ChangeRealActualIngredientEquivalentType struct {
	Type                IngredientTypeType `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	KnownEffect         bool               `xml:"urn:be:fgov:ehealth:samws:v2:actual:common KnownEffect,omitempty"`
	Strength            QuantityType       `xml:"urn:be:fgov:ehealth:samws:v2:core Strength"`
	StrengthDescription String50Type       `xml:"urn:be:fgov:ehealth:samws:v2:core StrengthDescription"`
	SubstanceCode       String10Type       `xml:"urn:be:fgov:ehealth:samws:v2:core SubstanceCode"`
	Action              ChangeActionType   `xml:"action,attr"`
	From                ValidityDateType   `xml:"from,attr"`
	To                  ValidityDateType   `xml:"to,attr,omitempty"`
	SequenceNr          int                `xml:"sequenceNr,attr"`
}

type ChangeRealActualIngredientType struct {
	Type                           IngredientTypeType                         `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	KnownEffect                    bool                                       `xml:"urn:be:fgov:ehealth:samws:v2:actual:common KnownEffect,omitempty"`
	Strength                       QuantityType                               `xml:"urn:be:fgov:ehealth:samws:v2:core Strength"`
	StrengthDescription            String50Type                               `xml:"urn:be:fgov:ehealth:samws:v2:core StrengthDescription"`
	AdditionalInformation          String255Type                              `xml:"urn:be:fgov:ehealth:samws:v2:core AdditionalInformation,omitempty"`
	SubstanceCode                  String10Type                               `xml:"urn:be:fgov:ehealth:samws:v2:core SubstanceCode"`
	RealActualIngredientEquivalent []ChangeRealActualIngredientEquivalentType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common RealActualIngredientEquivalent,omitempty"`
	Action                         ChangeNoChangeActionType                   `xml:"action,attr"`
	From                           ValidityDateType                           `xml:"from,attr,omitempty"`
	To                             ValidityDateType                           `xml:"to,attr,omitempty"`
	Rank                           int                                        `xml:"rank,attr"`
}

type ChangeRealVirtualIngredientType struct {
	Type          IngredientTypeType `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	Strength      StrengthRangeType  `xml:"urn:be:fgov:ehealth:samws:v2:core Strength,omitempty"`
	SubstanceCode String10Type       `xml:"urn:be:fgov:ehealth:samws:v2:core SubstanceCode"`
	Action        ChangeActionType   `xml:"action,attr"`
	SequenceNr    int                `xml:"sequenceNr,attr"`
}

type ChangeSupplyProblemType struct {
	ExpectedEndOn         time.Time        `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ExpectedEndOn,omitempty"`
	ReportedBy            String50Type     `xml:"urn:be:fgov:ehealth:samws:v2:core ReportedBy,omitempty"`
	ReportedOn            time.Time        `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ReportedOn,omitempty"`
	ContactName           String50Type     `xml:"urn:be:fgov:ehealth:samws:v2:core ContactName,omitempty"`
	ContactMail           String50Type     `xml:"urn:be:fgov:ehealth:samws:v2:core ContactMail,omitempty"`
	ContactCompany        String255Type    `xml:"urn:be:fgov:ehealth:samws:v2:core ContactCompany,omitempty"`
	Phone                 String50Type     `xml:"urn:be:fgov:ehealth:samws:v2:core Phone,omitempty"`
	Reason                TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core Reason,omitempty"`
	AdditionalInformation TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core AdditionalInformation,omitempty"`
	Impact                Text255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core Impact,omitempty"`
	Action                ChangeActionType `xml:"action,attr"`
	From                  ValidityDateType `xml:"from,attr"`
	To                    ValidityDateType `xml:"to,attr,omitempty"`
}

func (t *ChangeSupplyProblemType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ChangeSupplyProblemType
	var layout struct {
		*T
		ExpectedEndOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ExpectedEndOn,omitempty"`
		ReportedOn    *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ReportedOn,omitempty"`
	}
	layout.T = (*T)(t)
	layout.ExpectedEndOn = (*xsdDate)(&layout.T.ExpectedEndOn)
	layout.ReportedOn = (*xsdDate)(&layout.T.ReportedOn)
	return e.EncodeElement(layout, start)
}
func (t *ChangeSupplyProblemType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ChangeSupplyProblemType
	var overlay struct {
		*T
		ExpectedEndOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ExpectedEndOn,omitempty"`
		ReportedOn    *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ReportedOn,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.ExpectedEndOn = (*xsdDate)(&overlay.T.ExpectedEndOn)
	overlay.ReportedOn = (*xsdDate)(&overlay.T.ReportedOn)
	return d.DecodeElement(&overlay, &start)
}

type ChangeVirtualDefinitionRequestType struct {
	Vmp ChangeVmpType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common Vmp"`
}

type ChangeVirtualIngredientType struct {
	Type                  IngredientTypeType                `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	Strength              StrengthRangeType                 `xml:"urn:be:fgov:ehealth:samws:v2:core Strength,omitempty"`
	SubstanceCode         String10Type                      `xml:"urn:be:fgov:ehealth:samws:v2:core SubstanceCode"`
	RealVirtualIngredient []ChangeRealVirtualIngredientType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common RealVirtualIngredient,omitempty"`
	Action                ChangeNoChangeActionType          `xml:"action,attr"`
	Rank                  int                               `xml:"rank,attr"`
}

type ChangeVmpComponentType struct {
	PhaseNumber               int                           `xml:"urn:be:fgov:ehealth:samws:v2:core PhaseNumber,omitempty"`
	Name                      Text255Type                   `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	VirtualFormCode           String10Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core VirtualFormCode"`
	RouteOfAdministrationCode []String10Type                `xml:"urn:be:fgov:ehealth:samws:v2:core RouteOfAdministrationCodes"`
	VirtualIngredient         []ChangeVirtualIngredientType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common VirtualIngredient,omitempty"`
	Action                    ChangeNoChangeActionType      `xml:"action,attr"`
	Code                      int                           `xml:"code,attr"`
}

type ChangeVmpGroupRequestType struct {
	VmpGroup ChangeVmpGroupType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common VmpGroup"`
}

type ChangeVmpGroupType struct {
	Name                            Text255Type          `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	NoGenericPrescriptionReasonCode String10Type         `xml:"urn:be:fgov:ehealth:samws:v2:core NoGenericPrescriptionReasonCode,omitempty"`
	NoSwitchReasonCode              String10Type         `xml:"urn:be:fgov:ehealth:samws:v2:core NoSwitchReasonCode,omitempty"`
	PatientFrailtyIndicator         bool                 `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common PatientFrailtyIndicator,omitempty"`
	SingleAdministrationDose        QuantityType         `xml:"urn:be:fgov:ehealth:samws:v2:core SingleAdministrationDose,omitempty"`
	StandardDosage                  []StandardDosageType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common StandardDosage,omitempty"`
	Action                          ChangeActionType     `xml:"action,attr"`
	Code                            int                  `xml:"code,attr"`
}

type ChangeVmpType struct {
	Name                        Text255Type              `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Abbreviation                Text255Type              `xml:"urn:be:fgov:ehealth:samws:v2:core Abbreviation"`
	SingleAdministrationDose    QuantityType             `xml:"urn:be:fgov:ehealth:samws:v2:core SingleAdministrationDose,omitempty"`
	CommentedClassificationCode []String10Type           `xml:"urn:be:fgov:ehealth:samws:v2:core CommentedClassificationCode,omitempty"`
	VmpGroupCode                int                      `xml:"urn:be:fgov:ehealth:samws:v2:core VmpGroupCode"`
	VtmCode                     int                      `xml:"urn:be:fgov:ehealth:samws:v2:core VtmCode,omitempty"`
	WadaCode                    []String10Type           `xml:"urn:be:fgov:ehealth:samws:v2:core WadaCode,omitempty"`
	VmpComponent                []ChangeVmpComponentType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common VmpComponent,omitempty"`
	Action                      ChangeNoChangeActionType `xml:"action,attr"`
	Code                        int                      `xml:"code,attr"`
}

type ChangeVtmRequestType struct {
	Vtm ChangeVtmType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common Vtm"`
}

type ChangeVtmType struct {
	Name   Text255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Action ChangeActionType `xml:"action,attr"`
	Code   int              `xml:"code,attr"`
}

// Must be at least 1 items long
type CharacterType string

type CommentedClassificationDataType struct {
	Title        Text255Type `xml:"urn:be:fgov:ehealth:samws:v2:core Title,omitempty"`
	Content      TextType    `xml:"urn:be:fgov:ehealth:samws:v2:core Content,omitempty"`
	PosologyNote TextType    `xml:"urn:be:fgov:ehealth:samws:v2:core PosologyNote"`
	Url          Text255Type `xml:"urn:be:fgov:ehealth:samws:v2:core Url,omitempty"`
	From         time.Time   `xml:"from,attr"`
	To           time.Time   `xml:"to,attr,omitempty"`
}

func (t *CommentedClassificationDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CommentedClassificationDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *CommentedClassificationDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CommentedClassificationDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type CommentedClassificationFullDataType struct {
	Data                    []CommentedClassificationDataType     `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	CommentedClassification []CommentedClassificationFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export CommentedClassification,omitempty"`
	Code                    String10Type                          `xml:"code,attr"`
}

type CommentedClassificationKeyType struct {
	Code String10Type `xml:"code,attr"`
}

type CommentedClassificationType struct {
	Title        Text255Type  `xml:"urn:be:fgov:ehealth:samws:v2:core Title,omitempty"`
	Content      TextType     `xml:"urn:be:fgov:ehealth:samws:v2:core Content,omitempty"`
	PosologyNote TextType     `xml:"urn:be:fgov:ehealth:samws:v2:core PosologyNote"`
	Url          Text255Type  `xml:"urn:be:fgov:ehealth:samws:v2:core Url,omitempty"`
	Code         String10Type `xml:"code,attr"`
}

// May be one of M, S, I, O, U
type CommercialStatus string

type CommercializationDataType struct {
	From time.Time `xml:"from,attr"`
	To   time.Time `xml:"to,attr,omitempty"`
}

func (t *CommercializationDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CommercializationDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *CommercializationDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CommercializationDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type CommercializationFullDataType struct {
	Data []Data `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
}

type CommercializationType struct {
	EndOfCommercialization TextType `xml:"urn:be:fgov:ehealth:samws:v2:core EndOfCommercialization,omitempty"`
	Reason                 TextType `xml:"urn:be:fgov:ehealth:samws:v2:core Reason,omitempty"`
	AdditionalInformation  TextType `xml:"urn:be:fgov:ehealth:samws:v2:core AdditionalInformation,omitempty"`
	Impact                 TextType `xml:"urn:be:fgov:ehealth:samws:v2:core Impact,omitempty"`
}

// Must match the pattern \d\d\d\d\d
type CompanyActorNrType string

type CompanyDataType struct {
	AuthorisationNr String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core AuthorisationNr,omitempty"`
	VatNr           VatNrPerCountryType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit VatNr,omitempty"`
	EuropeanNr      string              `xml:"urn:be:fgov:ehealth:samws:v2:company:submit EuropeanNr,omitempty"`
	Denomination    String255Type       `xml:"urn:be:fgov:ehealth:samws:v2:core Denomination"`
	LegalForm       String30Type        `xml:"urn:be:fgov:ehealth:samws:v2:core LegalForm,omitempty"`
	Building        String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Building,omitempty"`
	StreetName      String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core StreetName,omitempty"`
	StreetNum       String10Type        `xml:"urn:be:fgov:ehealth:samws:v2:core StreetNum,omitempty"`
	Postbox         String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Postbox,omitempty"`
	Postcode        String10Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Postcode,omitempty"`
	City            String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core City,omitempty"`
	CountryCode     CountryCodeType     `xml:"urn:be:fgov:ehealth:samws:v2:company:submit CountryCode,omitempty"`
	Phone           String30Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Phone,omitempty"`
	Language        CompanyLanguageType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit Language"`
	Website         String255Type       `xml:"urn:be:fgov:ehealth:samws:v2:core Website,omitempty"`
	Email           String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Email,omitempty"`
	From            time.Time           `xml:"from,attr"`
	To              time.Time           `xml:"to,attr,omitempty"`
}

func (t *CompanyDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CompanyDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *CompanyDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CompanyDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type CompanyFullDataType struct {
	Data    []CompanyDataType  `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	ActorNr CompanyActorNrType `xml:"actorNr,attr"`
}

type CompanyKeyType struct {
	ActorNr CompanyActorNrType `xml:"actorNr,attr"`
}

// May be one of FR, NL, FR/NL, DE, EN
type CompanyLanguageType string

type CompanyType struct {
	AuthorisationNr String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core AuthorisationNr,omitempty"`
	VatNr           VatNrPerCountryType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit VatNr,omitempty"`
	EuropeanNr      string              `xml:"urn:be:fgov:ehealth:samws:v2:company:submit EuropeanNr,omitempty"`
	Denomination    String255Type       `xml:"urn:be:fgov:ehealth:samws:v2:core Denomination"`
	LegalForm       String30Type        `xml:"urn:be:fgov:ehealth:samws:v2:core LegalForm,omitempty"`
	Building        String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Building,omitempty"`
	StreetName      String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core StreetName,omitempty"`
	StreetNum       String10Type        `xml:"urn:be:fgov:ehealth:samws:v2:core StreetNum,omitempty"`
	Postbox         String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Postbox,omitempty"`
	Postcode        String10Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Postcode,omitempty"`
	City            String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core City,omitempty"`
	CountryCode     CountryCodeType     `xml:"urn:be:fgov:ehealth:samws:v2:company:submit CountryCode,omitempty"`
	Phone           String30Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Phone,omitempty"`
	Language        CompanyLanguageType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit Language"`
	Website         String255Type       `xml:"urn:be:fgov:ehealth:samws:v2:core Website,omitempty"`
	Email           String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Email,omitempty"`
	ActorNr         CompanyActorNrType  `xml:"actorNr,attr"`
}

type ComponentEquivalentType struct {
	Content QuantityType `xml:"urn:be:fgov:ehealth:samws:v2:core Content"`
}

type CompoundingFormulaDataType struct {
	Synonym   []SynonymType `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common Synonym"`
	Formulary []string      `xml:"urn:be:fgov:ehealth:samws:v2:export Formulary,omitempty"`
	From      time.Time     `xml:"from,attr"`
	To        time.Time     `xml:"to,attr,omitempty"`
}

func (t *CompoundingFormulaDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CompoundingFormulaDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *CompoundingFormulaDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CompoundingFormulaDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type CompoundingFormulaFullDataType struct {
	Data      []CompoundingFormulaDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	ProductId string                       `xml:"ProductId,attr"`
	Code      DmppCodeType                 `xml:"code,attr"`
	CodeType  DmppCodeTypeType             `xml:"codeType,attr,omitempty"`
}

func (t *CompoundingFormulaFullDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CompoundingFormulaFullDataType
	var overlay struct {
		*T
		CodeType *DmppCodeTypeType `xml:"codeType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CodeType = (*DmppCodeTypeType)(&overlay.T.CodeType)
	return d.DecodeElement(&overlay, &start)
}

type CompoundingFormulaKeyType struct {
	Code     DmppCodeType     `xml:"code,attr"`
	CodeType DmppCodeTypeType `xml:"codeType,attr,omitempty"`
}

func (t *CompoundingFormulaKeyType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CompoundingFormulaKeyType
	var overlay struct {
		*T
		CodeType *DmppCodeTypeType `xml:"codeType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CodeType = (*DmppCodeTypeType)(&overlay.T.CodeType)
	return d.DecodeElement(&overlay, &start)
}

type CompoundingFormulaType struct {
	Synonym   []SynonymType    `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common Synonym"`
	Formulary []string         `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common Formulary,omitempty"`
	Code      DmppCodeType     `xml:"code,attr"`
	CodeType  DmppCodeTypeType `xml:"codeType,attr,omitempty"`
}

func (t *CompoundingFormulaType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CompoundingFormulaType
	var overlay struct {
		*T
		CodeType *DmppCodeTypeType `xml:"codeType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CodeType = (*DmppCodeTypeType)(&overlay.T.CodeType)
	return d.DecodeElement(&overlay, &start)
}

type CompoundingIngredientDataType struct {
	Synonym []SynonymType `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common Synonym"`
	From    time.Time     `xml:"from,attr"`
	To      time.Time     `xml:"to,attr,omitempty"`
}

func (t *CompoundingIngredientDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CompoundingIngredientDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *CompoundingIngredientDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CompoundingIngredientDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type CompoundingIngredientFullDataType struct {
	Data      []CompoundingIngredientDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	ProductId string                          `xml:"ProductId,attr"`
	Code      DmppCodeType                    `xml:"code,attr"`
	CodeType  DmppCodeTypeType                `xml:"codeType,attr,omitempty"`
}

func (t *CompoundingIngredientFullDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CompoundingIngredientFullDataType
	var overlay struct {
		*T
		CodeType *DmppCodeTypeType `xml:"codeType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CodeType = (*DmppCodeTypeType)(&overlay.T.CodeType)
	return d.DecodeElement(&overlay, &start)
}

type CompoundingIngredientKeyType struct {
	Code     DmppCodeType     `xml:"code,attr"`
	CodeType DmppCodeTypeType `xml:"codeType,attr,omitempty"`
}

func (t *CompoundingIngredientKeyType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CompoundingIngredientKeyType
	var overlay struct {
		*T
		CodeType *DmppCodeTypeType `xml:"codeType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CodeType = (*DmppCodeTypeType)(&overlay.T.CodeType)
	return d.DecodeElement(&overlay, &start)
}

type CompoundingIngredientType struct {
	Synonym  []SynonymType    `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common Synonym"`
	Code     DmppCodeType     `xml:"code,attr"`
	CodeType DmppCodeTypeType `xml:"codeType,attr,omitempty"`
}

func (t *CompoundingIngredientType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CompoundingIngredientType
	var overlay struct {
		*T
		CodeType *DmppCodeTypeType `xml:"codeType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CodeType = (*DmppCodeTypeType)(&overlay.T.CodeType)
	return d.DecodeElement(&overlay, &start)
}

type ConsultAmpComponentType struct {
	Dividable             DividableType                            `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Dividable,omitempty"`
	Scored                ScoredType                               `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Scored,omitempty"`
	Crushable             CrushableType                            `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Crushable,omitempty"`
	ContainsAlcohol       ContainsAlcoholType                      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ContainsAlcohol,omitempty"`
	SugarFree             bool                                     `xml:"urn:be:fgov:ehealth:samws:v2:consultation SugarFree,omitempty"`
	ModifiedReleaseType   int                                      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ModifiedReleaseType,omitempty"`
	SpecificDrugDevice    int                                      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SpecificDrugDevice,omitempty"`
	Dimensions            String50Type                             `xml:"urn:be:fgov:ehealth:samws:v2:core Dimensions,omitempty"`
	Name                  ConsultTextType                          `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name,omitempty"`
	Note                  ConsultTextType                          `xml:"urn:be:fgov:ehealth:samws:v2:consultation Note,omitempty"`
	PharmaceuticalForm    []PharmaceuticalFormWithStandardsType    `xml:"urn:be:fgov:ehealth:samws:v2:consultation PharmaceuticalFormCode"`
	RouteOfAdministration []RouteOfAdministrationWithStandardsType `xml:"urn:be:fgov:ehealth:samws:v2:consultation RouteOfAdministration"`
	RealActualIngredient  []ConsultRealActualIngredientType        `xml:"urn:be:fgov:ehealth:samws:v2:consultation RealActualIngredient"`
	SequenceNr            int                                      `xml:"sequenceNr,attr"`
	VmpComponentCode      int                                      `xml:"vmpComponentCode,attr,omitempty"`
	StartDate             time.Time                                `xml:"StartDate,attr"`
	EndDate               time.Time                                `xml:"EndDate,attr,omitempty"`
}

func (t *ConsultAmpComponentType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultAmpComponentType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultAmpComponentType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultAmpComponentType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultAmpType struct {
	Status            AmpStatusType             `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Status"`
	Name              ConsultTextType           `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	BlackTriangle     bool                      `xml:"urn:be:fgov:ehealth:samws:v2:consultation BlackTriangle"`
	MedicineType      MedicineTypeType          `xml:"urn:be:fgov:ehealth:samws:v2:actual:common MedicineType"`
	OfficialName      String255Type             `xml:"urn:be:fgov:ehealth:samws:v2:core OfficialName,omitempty"`
	AbbreviatedName   ConsultTextType           `xml:"urn:be:fgov:ehealth:samws:v2:consultation AbbreviatedName,omitempty"`
	ProprietarySuffix ConsultTextType           `xml:"urn:be:fgov:ehealth:samws:v2:consultation ProprietarySuffix,omitempty"`
	PrescriptionName  ConsultTextType           `xml:"urn:be:fgov:ehealth:samws:v2:consultation PrescriptionName,omitempty"`
	CompanyActorNr    CompanyActorNrType        `xml:"urn:be:fgov:ehealth:samws:v2:core CompanyActorNr"`
	AmpComponent      []ConsultAmpComponentType `xml:"urn:be:fgov:ehealth:samws:v2:consultation AmpComponent"`
	Ampp              []ConsultAmppType         `xml:"urn:be:fgov:ehealth:samws:v2:consultation Ampp,omitempty"`
	Code              string                    `xml:"code,attr"`
	VmpCode           int                       `xml:"vmpCode,attr,omitempty"`
	StartDate         time.Time                 `xml:"StartDate,attr"`
	EndDate           time.Time                 `xml:"EndDate,attr,omitempty"`
}

func (t *ConsultAmpType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultAmpType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultAmpType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultAmpType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultAmppComponentEquivalentType struct {
	Content    QuantityType `xml:"urn:be:fgov:ehealth:samws:v2:core Content"`
	StartDate  time.Time    `xml:"StartDate,attr"`
	EndDate    time.Time    `xml:"EndDate,attr,omitempty"`
	SequenceNr int          `xml:"sequenceNr,attr"`
}

func (t *ConsultAmppComponentEquivalentType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultAmppComponentEquivalentType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultAmppComponentEquivalentType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultAmppComponentEquivalentType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultAmppComponentType struct {
	ContentType             ContentTypeType                      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ContentType"`
	ContentMultiplier       int                                  `xml:"urn:be:fgov:ehealth:samws:v2:consultation ContentMultiplier,omitempty"`
	PackSpecification       String255Type                        `xml:"urn:be:fgov:ehealth:samws:v2:core PackSpecification,omitempty"`
	DeviceType              DeviceTypeType                       `xml:"urn:be:fgov:ehealth:samws:v2:consultation DeviceType,omitempty"`
	PackagingClosure        []PackagingClosureType               `xml:"urn:be:fgov:ehealth:samws:v2:consultation PackagingClosure,omitempty"`
	PackagingMaterial       []PackagingMaterialType              `xml:"urn:be:fgov:ehealth:samws:v2:consultation PackagingMaterial,omitempty"`
	PackagingType           PackagingTypeType                    `xml:"urn:be:fgov:ehealth:samws:v2:consultation PackagingType,omitempty"`
	AmppComponentEquivalent []ConsultAmppComponentEquivalentType `xml:"urn:be:fgov:ehealth:samws:v2:consultation AmppComponentEquivalent"`
	StartDate               time.Time                            `xml:"StartDate,attr"`
	EndDate                 time.Time                            `xml:"EndDate,attr,omitempty"`
	SequenceNr              int                                  `xml:"sequenceNr,attr"`
}

func (t *ConsultAmppComponentType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultAmppComponentType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultAmppComponentType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultAmppComponentType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultAmppType struct {
	Orphan                      bool                              `xml:"urn:be:fgov:ehealth:samws:v2:consultation Orphan"`
	LeafletLink                 ConsultTextType                   `xml:"urn:be:fgov:ehealth:samws:v2:consultation LeafletLink,omitempty"`
	SpcLink                     ConsultTextType                   `xml:"urn:be:fgov:ehealth:samws:v2:consultation SpcLink,omitempty"`
	RmaPatientLink              ConsultTextType                   `xml:"urn:be:fgov:ehealth:samws:v2:consultation RmaPatientLink,omitempty"`
	RmaProfessionalLink         ConsultTextType                   `xml:"urn:be:fgov:ehealth:samws:v2:consultation RmaProfessionalLink,omitempty"`
	ParallelCircuit             int                               `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ParallelCircuit,omitempty"`
	ParallelDistributor         String255Type                     `xml:"urn:be:fgov:ehealth:samws:v2:core ParallelDistributor,omitempty"`
	PackMultiplier              int                               `xml:"urn:be:fgov:ehealth:samws:v2:consultation PackMultiplier,omitempty"`
	PackAmount                  PackAmountType                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common PackAmount,omitempty"`
	PackDisplayValue            String255Type                     `xml:"urn:be:fgov:ehealth:samws:v2:core PackDisplayValue,omitempty"`
	AuthorisationNr             String50Type                      `xml:"urn:be:fgov:ehealth:samws:v2:core AuthorisationNr"`
	SingleUse                   bool                              `xml:"urn:be:fgov:ehealth:samws:v2:consultation SingleUse,omitempty"`
	SpeciallyRegulated          int                               `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SpeciallyRegulated,omitempty"`
	AbbreviatedName             ConsultTextType                   `xml:"urn:be:fgov:ehealth:samws:v2:consultation AbbreviatedName,omitempty"`
	PrescriptionName            ConsultTextType                   `xml:"urn:be:fgov:ehealth:samws:v2:consultation PrescriptionName,omitempty"`
	Note                        ConsultTextType                   `xml:"urn:be:fgov:ehealth:samws:v2:consultation Note,omitempty"`
	PosologyNote                ConsultTextType                   `xml:"urn:be:fgov:ehealth:samws:v2:consultation PosologyNote,omitempty"`
	CrmLink                     ConsultTextType                   `xml:"urn:be:fgov:ehealth:samws:v2:consultation CrmLink,omitempty"`
	ExFactoryPrice              float64                           `xml:"urn:be:fgov:ehealth:samws:v2:core ExFactoryPrice,omitempty"`
	ReimbursementCode           int                               `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ReimbursementCode,omitempty"`
	Atc                         []AtcClassificationType           `xml:"urn:be:fgov:ehealth:samws:v2:consultation Atc,omitempty"`
	DeliveryModus               DeliveryModusType                 `xml:"urn:be:fgov:ehealth:samws:v2:consultation DeliveryModus"`
	DeliveryModusSpecification  DeliveryModusSpecificationType    `xml:"urn:be:fgov:ehealth:samws:v2:consultation DeliveryModusSpecification,omitempty"`
	NoGenericPrescriptionReason []NoGenericPrescriptionReasonType `xml:"urn:be:fgov:ehealth:samws:v2:consultation NoGenericPrescriptionReason,omitempty"`
	DefinedDailyDose            QuantityType                      `xml:"urn:be:fgov:ehealth:samws:v2:core DefinedDailyDose,omitempty"`
	DistributorActorNr          CompanyActorNrType                `xml:"urn:be:fgov:ehealth:samws:v2:core DistributorActorNr,omitempty"`
	AmppComponent               []ConsultAmppComponentType        `xml:"urn:be:fgov:ehealth:samws:v2:consultation AmppComponent"`
	Commercialization           ConsultCommercializationType      `xml:"urn:be:fgov:ehealth:samws:v2:consultation Commercialization,omitempty"`
	SupplyProblem               ConsultSupplyProblemType          `xml:"urn:be:fgov:ehealth:samws:v2:consultation SupplyProblem,omitempty"`
	DerogationImport            []ConsultDerogationImportType     `xml:"urn:be:fgov:ehealth:samws:v2:consultation DerogationImport,omitempty"`
	Dmpp                        []ConsultDmppType                 `xml:"urn:be:fgov:ehealth:samws:v2:consultation Dmpp,omitempty"`
	CtiExtended                 CtiExtendedType                   `xml:"ctiExtended,attr"`
	StartDate                   time.Time                         `xml:"StartDate,attr"`
	EndDate                     time.Time                         `xml:"EndDate,attr,omitempty"`
}

func (t *ConsultAmppType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultAmppType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultAmppType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultAmppType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultAttachmentType struct {
	Name         ConsultTextType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	TemplateUrl  String255Type    `xml:"urn:be:fgov:ehealth:samws:v2:core TemplateUrl"`
	Appendix     AppendixType     `xml:"urn:be:fgov:ehealth:samws:v2:consultation Appendix"`
	FormCategory FormCategoryType `xml:"urn:be:fgov:ehealth:samws:v2:consultation FormCategory"`
	Mandatory    bool             `xml:"urn:be:fgov:ehealth:samws:v2:consultation Mandatory,omitempty"`
	StartDate    time.Time        `xml:"StartDate,attr"`
	EndDate      time.Time        `xml:"EndDate,attr,omitempty"`
	SequenceNr   int              `xml:"sequenceNr,attr"`
}

func (t *ConsultAttachmentType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultAttachmentType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultAttachmentType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultAttachmentType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultCommentedClassificationTreeType struct {
	CommentedClassification []ConsultCommentedClassificationTreeType `xml:"urn:be:fgov:ehealth:samws:v2:consultation CommentedClassification,omitempty"`
	Title                   ConsultTextType                          `xml:"urn:be:fgov:ehealth:samws:v2:consultation Title,omitempty"`
	Content                 ConsultTextType                          `xml:"urn:be:fgov:ehealth:samws:v2:consultation Content,omitempty"`
	PosologyNote            ConsultTextType                          `xml:"urn:be:fgov:ehealth:samws:v2:consultation PosologyNote"`
	Url                     ConsultTextType                          `xml:"urn:be:fgov:ehealth:samws:v2:consultation Url,omitempty"`
	StartDate               time.Time                                `xml:"StartDate,attr"`
	EndDate                 time.Time                                `xml:"EndDate,attr,omitempty"`
	Code                    String10Type                             `xml:"code,attr"`
}

func (t *ConsultCommentedClassificationTreeType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultCommentedClassificationTreeType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultCommentedClassificationTreeType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultCommentedClassificationTreeType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultCommentedClassificationType struct {
	Title        ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Title,omitempty"`
	Content      ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Content,omitempty"`
	PosologyNote ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation PosologyNote"`
	Url          ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Url,omitempty"`
	StartDate    time.Time       `xml:"StartDate,attr"`
	EndDate      time.Time       `xml:"EndDate,attr,omitempty"`
	Code         String10Type    `xml:"code,attr"`
}

func (t *ConsultCommentedClassificationType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultCommentedClassificationType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultCommentedClassificationType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultCommentedClassificationType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultCommercializationType struct {
	StartDate time.Time `xml:"StartDate,attr"`
	EndDate   time.Time `xml:"EndDate,attr,omitempty"`
}

func (t *ConsultCommercializationType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultCommercializationType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultCommercializationType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultCommercializationType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultCompanyType struct {
	AuthorisationNr String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core AuthorisationNr,omitempty"`
	VatNr           VatNrPerCountryType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit VatNr,omitempty"`
	EuropeanNr      string              `xml:"urn:be:fgov:ehealth:samws:v2:company:submit EuropeanNr,omitempty"`
	Denomination    String255Type       `xml:"urn:be:fgov:ehealth:samws:v2:core Denomination"`
	LegalForm       String30Type        `xml:"urn:be:fgov:ehealth:samws:v2:core LegalForm,omitempty"`
	Building        String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Building,omitempty"`
	StreetName      String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core StreetName,omitempty"`
	StreetNum       String10Type        `xml:"urn:be:fgov:ehealth:samws:v2:core StreetNum,omitempty"`
	Postbox         String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Postbox,omitempty"`
	Postcode        String10Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Postcode,omitempty"`
	City            String50Type        `xml:"urn:be:fgov:ehealth:samws:v2:core City,omitempty"`
	CountryCode     CountryCodeType     `xml:"urn:be:fgov:ehealth:samws:v2:company:submit CountryCode,omitempty"`
	Phone           String30Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Phone,omitempty"`
	Language        CompanyLanguageType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit Language"`
	Website         String255Type       `xml:"urn:be:fgov:ehealth:samws:v2:core Website,omitempty"`
	StartDate       time.Time           `xml:"StartDate,attr"`
	EndDate         time.Time           `xml:"EndDate,attr,omitempty"`
	ActorNr         CompanyActorNrType  `xml:"actorNr,attr"`
}

func (t *ConsultCompanyType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultCompanyType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultCompanyType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultCompanyType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultCompoundingFormulaType struct {
	Synonym  []SynonymType    `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common Synonym"`
	Code     DmppCodeType     `xml:"code,attr"`
	CodeType DmppCodeTypeType `xml:"codeType,attr,omitempty"`
}

func (t *ConsultCompoundingFormulaType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultCompoundingFormulaType
	var overlay struct {
		*T
		CodeType *DmppCodeTypeType `xml:"codeType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CodeType = (*DmppCodeTypeType)(&overlay.T.CodeType)
	return d.DecodeElement(&overlay, &start)
}

type ConsultCompoundingIngredientType struct {
	Synonym  []SynonymType    `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common Synonym"`
	Code     DmppCodeType     `xml:"code,attr"`
	CodeType DmppCodeTypeType `xml:"codeType,attr,omitempty"`
}

func (t *ConsultCompoundingIngredientType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultCompoundingIngredientType
	var overlay struct {
		*T
		CodeType *DmppCodeTypeType `xml:"codeType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CodeType = (*DmppCodeTypeType)(&overlay.T.CodeType)
	return d.DecodeElement(&overlay, &start)
}

type ConsultCopaymentType struct {
	FeeAmount  float64   `xml:"urn:be:fgov:ehealth:samws:v2:core FeeAmount"`
	StartDate  time.Time `xml:"StartDate,attr"`
	EndDate    time.Time `xml:"EndDate,attr,omitempty"`
	RegimeType int       `xml:"regimeType,attr"`
}

func (t *ConsultCopaymentType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultCopaymentType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultCopaymentType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultCopaymentType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultDerogationImportType struct {
	Note       ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Note"`
	StartDate  time.Time       `xml:"StartDate,attr"`
	EndDate    time.Time       `xml:"EndDate,attr,omitempty"`
	SequenceNr int             `xml:"sequenceNr,attr"`
}

func (t *ConsultDerogationImportType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultDerogationImportType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultDerogationImportType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultDerogationImportType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultDmppType struct {
	Price               float64                 `xml:"urn:be:fgov:ehealth:samws:v2:core Price,omitempty"`
	Cheap               bool                    `xml:"urn:be:fgov:ehealth:samws:v2:consultation Cheap,omitempty"`
	Cheapest            bool                    `xml:"urn:be:fgov:ehealth:samws:v2:consultation Cheapest,omitempty"`
	Reimbursable        bool                    `xml:"urn:be:fgov:ehealth:samws:v2:consultation Reimbursable"`
	StartDate           time.Time               `xml:"StartDate,attr"`
	EndDate             time.Time               `xml:"EndDate,attr,omitempty"`
	DeliveryEnvironment DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                DmppCodeType            `xml:"code,attr"`
	CodeType            DmppCodeTypeType        `xml:"codeType,attr"`
}

func (t *ConsultDmppType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultDmppType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultDmppType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultDmppType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultFormalInterpretationType struct {
	Rule                   string                              `xml:"urn:be:fgov:ehealth:samws:v2:consultation Rule"`
	ReimbursementCondition []ConsultReimbursementConditionType `xml:"urn:be:fgov:ehealth:samws:v2:consultation ReimbursementCondition,omitempty"`
	ReimbursementTerm      []ConsultReimbursementTermType      `xml:"urn:be:fgov:ehealth:samws:v2:consultation ReimbursementTerm,omitempty"`
	StartDate              time.Time                           `xml:"StartDate,attr"`
	EndDate                time.Time                           `xml:"EndDate,attr,omitempty"`
	Key                    String15Type                        `xml:"key,attr"`
}

func (t *ConsultFormalInterpretationType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultFormalInterpretationType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultFormalInterpretationType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultFormalInterpretationType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultLegalBasisType struct {
	Title          ConsultTextType                      `xml:"urn:be:fgov:ehealth:samws:v2:consultation Title"`
	Type           LegalBasisTypeType                   `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type"`
	EffectiveOn    time.Time                            `xml:"urn:be:fgov:ehealth:samws:v2:consultation EffectiveOn,omitempty"`
	LegalReference []ConsultRecursiveLegalReferenceType `xml:"urn:be:fgov:ehealth:samws:v2:consultation LegalReference,omitempty"`
	StartDate      time.Time                            `xml:"StartDate,attr"`
	EndDate        time.Time                            `xml:"EndDate,attr,omitempty"`
	Key            ReimbursementLawKeyType              `xml:"key,attr"`
}

func (t *ConsultLegalBasisType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultLegalBasisType
	var layout struct {
		*T
		EffectiveOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation EffectiveOn,omitempty"`
		StartDate   *xsdDate `xml:"StartDate,attr"`
		EndDate     *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.EffectiveOn = (*xsdDate)(&layout.T.EffectiveOn)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultLegalBasisType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultLegalBasisType
	var overlay struct {
		*T
		EffectiveOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation EffectiveOn,omitempty"`
		StartDate   *xsdDate `xml:"StartDate,attr"`
		EndDate     *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.EffectiveOn = (*xsdDate)(&overlay.T.EffectiveOn)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultLegalReferenceTraceType struct {
	Key ReimbursementLawKeyType `xml:"key,attr"`
}

type ConsultLegalReferenceType struct {
	Title               ConsultTextType                  `xml:"urn:be:fgov:ehealth:samws:v2:consultation Title"`
	Type                LegalReferenceTypeType           `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type"`
	FirstPublishedOn    time.Time                        `xml:"urn:be:fgov:ehealth:samws:v2:consultation FirstPublishedOn,omitempty"`
	LastModifiedOn      time.Time                        `xml:"urn:be:fgov:ehealth:samws:v2:consultation LastModifiedOn,omitempty"`
	LegalReferenceTrace []ConsultLegalReferenceTraceType `xml:"urn:be:fgov:ehealth:samws:v2:consultation LegalReferenceTrace,omitempty"`
	StartDate           time.Time                        `xml:"StartDate,attr"`
	EndDate             time.Time                        `xml:"EndDate,attr,omitempty"`
	Key                 ReimbursementLawKeyType          `xml:"key,attr"`
}

func (t *ConsultLegalReferenceType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultLegalReferenceType
	var layout struct {
		*T
		FirstPublishedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation FirstPublishedOn,omitempty"`
		LastModifiedOn   *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation LastModifiedOn,omitempty"`
		StartDate        *xsdDate `xml:"StartDate,attr"`
		EndDate          *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.FirstPublishedOn = (*xsdDate)(&layout.T.FirstPublishedOn)
	layout.LastModifiedOn = (*xsdDate)(&layout.T.LastModifiedOn)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultLegalReferenceType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultLegalReferenceType
	var overlay struct {
		*T
		FirstPublishedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation FirstPublishedOn,omitempty"`
		LastModifiedOn   *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation LastModifiedOn,omitempty"`
		StartDate        *xsdDate `xml:"StartDate,attr"`
		EndDate          *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.FirstPublishedOn = (*xsdDate)(&overlay.T.FirstPublishedOn)
	overlay.LastModifiedOn = (*xsdDate)(&overlay.T.LastModifiedOn)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultLegalTextType struct {
	Content        TextType                `xml:"urn:be:fgov:ehealth:samws:v2:core Content"`
	Type           LegalTextTypeType       `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type"`
	SequenceNr     int                     `xml:"urn:be:fgov:ehealth:samws:v2:core SequenceNr"`
	LastModifiedOn time.Time               `xml:"urn:be:fgov:ehealth:samws:v2:consultation LastModifiedOn,omitempty"`
	StartDate      time.Time               `xml:"StartDate,attr"`
	EndDate        time.Time               `xml:"EndDate,attr,omitempty"`
	Key            ReimbursementLawKeyType `xml:"key,attr"`
}

func (t *ConsultLegalTextType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultLegalTextType
	var layout struct {
		*T
		LastModifiedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation LastModifiedOn,omitempty"`
		StartDate      *xsdDate `xml:"StartDate,attr"`
		EndDate        *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.LastModifiedOn = (*xsdDate)(&layout.T.LastModifiedOn)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultLegalTextType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultLegalTextType
	var overlay struct {
		*T
		LastModifiedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation LastModifiedOn,omitempty"`
		StartDate      *xsdDate `xml:"StartDate,attr"`
		EndDate        *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.LastModifiedOn = (*xsdDate)(&overlay.T.LastModifiedOn)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultNonMedicinalProductType struct {
	Name             ConsultTextType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	Category         Category         `xml:"urn:be:fgov:ehealth:samws:v2:consultation Category"`
	CommercialStatus CommercialStatus `xml:"urn:be:fgov:ehealth:samws:v2:consultation CommercialStatus"`
	Producer         ConsultTextType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation Producer"`
	Distributor      ConsultTextType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation Distributor,omitempty"`
	Code             DmppCodeType     `xml:"code,attr"`
	CodeType         DmppCodeTypeType `xml:"codeType,attr,omitempty"`
	StartDate        time.Time        `xml:"StartDate,attr"`
	EndDate          time.Time        `xml:"EndDate,attr,omitempty"`
}

func (t *ConsultNonMedicinalProductType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultNonMedicinalProductType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultNonMedicinalProductType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultNonMedicinalProductType
	var overlay struct {
		*T
		CodeType  *DmppCodeTypeType `xml:"codeType,attr,omitempty"`
		StartDate *xsdDate          `xml:"StartDate,attr"`
		EndDate   *xsdDate          `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CodeType = (*DmppCodeTypeType)(&overlay.T.CodeType)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultPricingUnitType struct {
	Quantity float64         `xml:"urn:be:fgov:ehealth:samws:v2:core Quantity"`
	Label    ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Label"`
}

type ConsultRealActualIngredientEquivalentType struct {
	Type                IngredientTypeType         `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	KnownEffect         bool                       `xml:"urn:be:fgov:ehealth:samws:v2:consultation KnownEffect,omitempty"`
	Strength            QuantityType               `xml:"urn:be:fgov:ehealth:samws:v2:core Strength"`
	StrengthDescription String50Type               `xml:"urn:be:fgov:ehealth:samws:v2:core StrengthDescription"`
	Substance           SubstanceWithStandardsType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Substance"`
	StartDate           time.Time                  `xml:"StartDate,attr"`
	EndDate             time.Time                  `xml:"EndDate,attr,omitempty"`
	SequenceNr          int                        `xml:"sequenceNr,attr"`
}

func (t *ConsultRealActualIngredientEquivalentType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultRealActualIngredientEquivalentType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultRealActualIngredientEquivalentType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultRealActualIngredientEquivalentType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultRealActualIngredientType struct {
	Type                           IngredientTypeType                          `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	KnownEffect                    bool                                        `xml:"urn:be:fgov:ehealth:samws:v2:consultation KnownEffect,omitempty"`
	Strength                       QuantityType                                `xml:"urn:be:fgov:ehealth:samws:v2:core Strength"`
	StrengthDescription            String50Type                                `xml:"urn:be:fgov:ehealth:samws:v2:core StrengthDescription"`
	AdditionalInformation          String255Type                               `xml:"urn:be:fgov:ehealth:samws:v2:core AdditionalInformation,omitempty"`
	Substance                      SubstanceWithStandardsType                  `xml:"urn:be:fgov:ehealth:samws:v2:consultation Substance"`
	RealActualIngredientEquivalent []ConsultRealActualIngredientEquivalentType `xml:"urn:be:fgov:ehealth:samws:v2:consultation RealActualIngredientEquivalent,omitempty"`
	StartDate                      time.Time                                   `xml:"StartDate,attr"`
	EndDate                        time.Time                                   `xml:"EndDate,attr,omitempty"`
	Rank                           int                                         `xml:"rank,attr"`
}

func (t *ConsultRealActualIngredientType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultRealActualIngredientType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultRealActualIngredientType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultRealActualIngredientType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultRealVirtualIngredientType struct {
	Type       IngredientTypeType         `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	Strength   StrengthRangeType          `xml:"urn:be:fgov:ehealth:samws:v2:core Strength,omitempty"`
	Substance  SubstanceWithStandardsType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Substance"`
	StartDate  time.Time                  `xml:"StartDate,attr"`
	EndDate    time.Time                  `xml:"EndDate,attr,omitempty"`
	SequenceNr int                        `xml:"sequenceNr,attr"`
}

func (t *ConsultRealVirtualIngredientType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultRealVirtualIngredientType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultRealVirtualIngredientType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultRealVirtualIngredientType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultRecursiveLegalReferenceType struct {
	LegalReference       []ConsultRecursiveLegalReferenceType `xml:"urn:be:fgov:ehealth:samws:v2:consultation LegalReference,omitempty"`
	FormalInterpretation []ConsultFormalInterpretationType    `xml:"urn:be:fgov:ehealth:samws:v2:consultation FormalInterpretation,omitempty"`
	LegalText            []ConsultRecursiveLegalTextType      `xml:"urn:be:fgov:ehealth:samws:v2:consultation LegalText,omitempty"`
	Title                ConsultTextType                      `xml:"urn:be:fgov:ehealth:samws:v2:consultation Title"`
	Type                 LegalReferenceTypeType               `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type"`
	FirstPublishedOn     time.Time                            `xml:"urn:be:fgov:ehealth:samws:v2:consultation FirstPublishedOn,omitempty"`
	LastModifiedOn       time.Time                            `xml:"urn:be:fgov:ehealth:samws:v2:consultation LastModifiedOn,omitempty"`
	LegalReferenceTrace  []ConsultLegalReferenceTraceType     `xml:"urn:be:fgov:ehealth:samws:v2:consultation LegalReferenceTrace,omitempty"`
	StartDate            time.Time                            `xml:"StartDate,attr"`
	EndDate              time.Time                            `xml:"EndDate,attr,omitempty"`
	Key                  ReimbursementLawKeyType              `xml:"key,attr"`
}

func (t *ConsultRecursiveLegalReferenceType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultRecursiveLegalReferenceType
	var layout struct {
		*T
		FirstPublishedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation FirstPublishedOn,omitempty"`
		LastModifiedOn   *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation LastModifiedOn,omitempty"`
		StartDate        *xsdDate `xml:"StartDate,attr"`
		EndDate          *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.FirstPublishedOn = (*xsdDate)(&layout.T.FirstPublishedOn)
	layout.LastModifiedOn = (*xsdDate)(&layout.T.LastModifiedOn)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultRecursiveLegalReferenceType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultRecursiveLegalReferenceType
	var overlay struct {
		*T
		FirstPublishedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation FirstPublishedOn,omitempty"`
		LastModifiedOn   *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation LastModifiedOn,omitempty"`
		StartDate        *xsdDate `xml:"StartDate,attr"`
		EndDate          *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.FirstPublishedOn = (*xsdDate)(&overlay.T.FirstPublishedOn)
	overlay.LastModifiedOn = (*xsdDate)(&overlay.T.LastModifiedOn)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultRecursiveLegalTextType struct {
	Content        ConsultTextType                 `xml:"urn:be:fgov:ehealth:samws:v2:consultation Content"`
	Type           LegalTextTypeType               `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type"`
	SequenceNr     int                             `xml:"urn:be:fgov:ehealth:samws:v2:consultation SequenceNr"`
	LastModifiedOn time.Time                       `xml:"urn:be:fgov:ehealth:samws:v2:consultation LastModifiedOn,omitempty"`
	LegalText      []ConsultRecursiveLegalTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation LegalText,omitempty"`
	StartDate      time.Time                       `xml:"StartDate,attr"`
	EndDate        time.Time                       `xml:"EndDate,attr,omitempty"`
	Key            ReimbursementLawKeyType         `xml:"key,attr"`
}

func (t *ConsultRecursiveLegalTextType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultRecursiveLegalTextType
	var layout struct {
		*T
		LastModifiedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation LastModifiedOn,omitempty"`
		StartDate      *xsdDate `xml:"StartDate,attr"`
		EndDate        *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.LastModifiedOn = (*xsdDate)(&layout.T.LastModifiedOn)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultRecursiveLegalTextType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultRecursiveLegalTextType
	var overlay struct {
		*T
		LastModifiedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation LastModifiedOn,omitempty"`
		StartDate      *xsdDate `xml:"StartDate,attr"`
		EndDate        *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.LastModifiedOn = (*xsdDate)(&overlay.T.LastModifiedOn)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultReimbursementConditionType struct {
	Expression            string                  `xml:"urn:be:fgov:ehealth:samws:v2:consultation Expression"`
	Attachment            []ConsultAttachmentType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Attachment,omitempty"`
	StartDate             time.Time               `xml:"StartDate,attr"`
	EndDate               time.Time               `xml:"EndDate,attr,omitempty"`
	LegalTextRelativePath LegalTextPathType       `xml:"legalTextRelativePath,attr"`
	Key                   String15Type            `xml:"key,attr"`
}

func (t *ConsultReimbursementConditionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultReimbursementConditionType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultReimbursementConditionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultReimbursementConditionType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultReimbursementContextType struct {
	Multiple               MultipleType               `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit Multiple,omitempty"`
	Temporary              bool                       `xml:"urn:be:fgov:ehealth:samws:v2:consultation Temporary"`
	Reference              bool                       `xml:"urn:be:fgov:ehealth:samws:v2:consultation Reference"`
	FlatRateSystem         bool                       `xml:"urn:be:fgov:ehealth:samws:v2:consultation FlatRateSystem"`
	ReimbursementBasePrice float64                    `xml:"urn:be:fgov:ehealth:samws:v2:core ReimbursementBasePrice"`
	ReferenceBasePrice     float64                    `xml:"urn:be:fgov:ehealth:samws:v2:core ReferenceBasePrice"`
	CopaymentSupplement    float64                    `xml:"urn:be:fgov:ehealth:samws:v2:core CopaymentSupplement,omitempty"`
	PricingUnit            ConsultPricingUnitType     `xml:"urn:be:fgov:ehealth:samws:v2:consultation PricingUnit"`
	PricingSlice           ConsultPricingUnitType     `xml:"urn:be:fgov:ehealth:samws:v2:consultation PricingSlice,omitempty"`
	ReimbursementCriterion ReimbursementCriterionType `xml:"urn:be:fgov:ehealth:samws:v2:consultation ReimbursementCriterion"`
	Copayment              []ConsultCopaymentType     `xml:"urn:be:fgov:ehealth:samws:v2:consultation Copayment,omitempty"`
	StartDate              time.Time                  `xml:"StartDate,attr"`
	EndDate                time.Time                  `xml:"EndDate,attr,omitempty"`
	DeliveryEnvironment    DeliveryEnvironmentType    `xml:"deliveryEnvironment,attr"`
	Code                   DmppCodeType               `xml:"code,attr"`
	CodeType               DmppCodeTypeType           `xml:"codeType,attr"`
	LegalReferencePath     LegalReferencePathType     `xml:"legalReferencePath,attr"`
}

func (t *ConsultReimbursementContextType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultReimbursementContextType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultReimbursementContextType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultReimbursementContextType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultReimbursementTermType struct {
	ValueUnit     ParameterValueType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit ValueUnit"`
	ParameterName String100Type      `xml:"urn:be:fgov:ehealth:samws:v2:core ParameterName"`
	StartDate     time.Time          `xml:"StartDate,attr"`
	EndDate       time.Time          `xml:"EndDate,attr,omitempty"`
	SequenceNr    int                `xml:"sequenceNr,attr"`
}

func (t *ConsultReimbursementTermType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultReimbursementTermType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultReimbursementTermType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultReimbursementTermType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultStandardFormAndPhFrmAndVtlFrmType struct {
	PharmaceuticalForm []PharmaceuticalFormKeyType `xml:"urn:be:fgov:ehealth:samws:v2:refdata PharmaceuticalFormCode,omitempty"`
	VirtualForm        []VirtualFormKeyType        `xml:"urn:be:fgov:ehealth:samws:v2:refdata VirtualForm,omitempty"`
	Name               ConsultTextType             `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name,omitempty"`
	Definition         ConsultTextType             `xml:"urn:be:fgov:ehealth:samws:v2:consultation Definition,omitempty"`
	Url                String255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core Url,omitempty"`
	Standard           StdFrmAllStandardsType      `xml:"standard,attr"`
	Code               String20Type                `xml:"code,attr"`
}

type ConsultStandardFormType struct {
	Name       ConsultTextType        `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name,omitempty"`
	Definition ConsultTextType        `xml:"urn:be:fgov:ehealth:samws:v2:consultation Definition,omitempty"`
	Url        String255Type          `xml:"urn:be:fgov:ehealth:samws:v2:core Url,omitempty"`
	Standard   StdFrmAllStandardsType `xml:"standard,attr"`
	Code       String20Type           `xml:"code,attr"`
}

type ConsultStandardRouteAndRouteOfAdministrationType struct {
	RouteOfAdministration []RouteOfAdministrationKeyType `xml:"urn:be:fgov:ehealth:samws:v2:refdata RouteOfAdministration,omitempty"`
	Name                  ConsultTextType                `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name,omitempty"`
	Definition            ConsultTextType                `xml:"urn:be:fgov:ehealth:samws:v2:consultation Definition,omitempty"`
	Url                   String255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core Url,omitempty"`
	Standard              StdRteAllStandardsType         `xml:"standard,attr"`
	Code                  String20Type                   `xml:"code,attr"`
}

type ConsultStandardRouteType struct {
	Name       ConsultTextType        `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name,omitempty"`
	Definition ConsultTextType        `xml:"urn:be:fgov:ehealth:samws:v2:consultation Definition,omitempty"`
	Url        String255Type          `xml:"urn:be:fgov:ehealth:samws:v2:core Url,omitempty"`
	Standard   StdRteAllStandardsType `xml:"standard,attr"`
	Code       String20Type           `xml:"code,attr"`
}

type ConsultStandardSubstanceAndSubstanceType struct {
	Substance  []SubstanceKeyType      `xml:"urn:be:fgov:ehealth:samws:v2:refdata Substance,omitempty"`
	Name       ConsultTextType         `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name,omitempty"`
	Definition ConsultTextType         `xml:"urn:be:fgov:ehealth:samws:v2:consultation Definition,omitempty"`
	Url        String255Type           `xml:"urn:be:fgov:ehealth:samws:v2:core Url,omitempty"`
	Standard   StdSbstAllStandardsType `xml:"standard,attr"`
	Code       String20Type            `xml:"code,attr"`
}

type ConsultStandardSubstanceType struct {
	Name       ConsultTextType         `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name,omitempty"`
	Definition ConsultTextType         `xml:"urn:be:fgov:ehealth:samws:v2:consultation Definition,omitempty"`
	Url        String255Type           `xml:"urn:be:fgov:ehealth:samws:v2:core Url,omitempty"`
	Standard   StdSbstAllStandardsType `xml:"standard,attr"`
	Code       String20Type            `xml:"code,attr"`
}

type ConsultSupplyProblemType struct {
	ExpectedEndOn  time.Time       `xml:"urn:be:fgov:ehealth:samws:v2:consultation ExpectedEndOn,omitempty"`
	ReportedBy     String50Type    `xml:"urn:be:fgov:ehealth:samws:v2:core ReportedBy,omitempty"`
	ReportedOn     time.Time       `xml:"urn:be:fgov:ehealth:samws:v2:consultation ReportedOn,omitempty"`
	ContactName    String50Type    `xml:"urn:be:fgov:ehealth:samws:v2:core ContactName,omitempty"`
	ContactMail    String50Type    `xml:"urn:be:fgov:ehealth:samws:v2:core ContactMail,omitempty"`
	ContactCompany String255Type   `xml:"urn:be:fgov:ehealth:samws:v2:core ContactCompany,omitempty"`
	Phone          String50Type    `xml:"urn:be:fgov:ehealth:samws:v2:core Phone,omitempty"`
	Reason         ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Reason,omitempty"`
	StartDate      time.Time       `xml:"StartDate,attr"`
	EndDate        time.Time       `xml:"EndDate,attr,omitempty"`
}

func (t *ConsultSupplyProblemType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultSupplyProblemType
	var layout struct {
		*T
		ExpectedEndOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation ExpectedEndOn,omitempty"`
		ReportedOn    *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation ReportedOn,omitempty"`
		StartDate     *xsdDate `xml:"StartDate,attr"`
		EndDate       *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.ExpectedEndOn = (*xsdDate)(&layout.T.ExpectedEndOn)
	layout.ReportedOn = (*xsdDate)(&layout.T.ReportedOn)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultSupplyProblemType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultSupplyProblemType
	var overlay struct {
		*T
		ExpectedEndOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation ExpectedEndOn,omitempty"`
		ReportedOn    *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:consultation ReportedOn,omitempty"`
		StartDate     *xsdDate `xml:"StartDate,attr"`
		EndDate       *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.ExpectedEndOn = (*xsdDate)(&overlay.T.ExpectedEndOn)
	overlay.ReportedOn = (*xsdDate)(&overlay.T.ReportedOn)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

// To conform to the eHealth requirements, multi-lingual text fields are returned with the xml:lang
// attribute instead of specific language tags.
type ConsultTextType struct {
	Text []Text `xml:"urn:be:fgov:ehealth:samws:v2:consultation Text"`
}

type ConsultVirtualIngredientType struct {
	Type                  IngredientTypeType                 `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	Strength              StrengthRangeType                  `xml:"urn:be:fgov:ehealth:samws:v2:core Strength,omitempty"`
	Substance             SubstanceWithStandardsType         `xml:"urn:be:fgov:ehealth:samws:v2:consultation Substance"`
	RealVirtualIngredient []ConsultRealVirtualIngredientType `xml:"urn:be:fgov:ehealth:samws:v2:consultation RealVirtualIngredient,omitempty"`
	StartDate             time.Time                          `xml:"StartDate,attr"`
	EndDate               time.Time                          `xml:"EndDate,attr,omitempty"`
	Rank                  int                                `xml:"rank,attr"`
}

func (t *ConsultVirtualIngredientType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultVirtualIngredientType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultVirtualIngredientType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultVirtualIngredientType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultVmpComponentType struct {
	PhaseNumber           int                                      `xml:"urn:be:fgov:ehealth:samws:v2:consultation PhaseNumber,omitempty"`
	Name                  ConsultTextType                          `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	VirtualForm           VirtualFormWithStandardsType             `xml:"urn:be:fgov:ehealth:samws:v2:consultation VirtualForm"`
	RouteOfAdministration []RouteOfAdministrationWithStandardsType `xml:"urn:be:fgov:ehealth:samws:v2:consultation RouteOfAdministration"`
	VirtualIngredient     []ConsultVirtualIngredientType           `xml:"urn:be:fgov:ehealth:samws:v2:consultation VirtualIngredient"`
	StartDate             time.Time                                `xml:"StartDate,attr"`
	EndDate               time.Time                                `xml:"EndDate,attr,omitempty"`
	Code                  int                                      `xml:"code,attr"`
}

func (t *ConsultVmpComponentType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultVmpComponentType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultVmpComponentType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultVmpComponentType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultVmpGroupType struct {
	Name                        ConsultTextType                 `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	NoGenericPrescriptionReason NoGenericPrescriptionReasonType `xml:"urn:be:fgov:ehealth:samws:v2:consultation NoGenericPrescriptionReason,omitempty"`
	NoSwitchReason              NoSwitchReasonType              `xml:"urn:be:fgov:ehealth:samws:v2:consultation NoSwitchReason,omitempty"`
	StartDate                   time.Time                       `xml:"StartDate,attr"`
	EndDate                     time.Time                       `xml:"EndDate,attr,omitempty"`
	Code                        int                             `xml:"code,attr"`
}

func (t *ConsultVmpGroupType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultVmpGroupType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultVmpGroupType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultVmpGroupType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultVmpType struct {
	Name                    ConsultTextType                      `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	Abbreviation            ConsultTextType                      `xml:"urn:be:fgov:ehealth:samws:v2:consultation Abbreviation"`
	Wada                    []WadaType                           `xml:"urn:be:fgov:ehealth:samws:v2:consultation Wada,omitempty"`
	CommentedClassification []ConsultCommentedClassificationType `xml:"urn:be:fgov:ehealth:samws:v2:consultation CommentedClassification,omitempty"`
	VmpGroup                ConsultVmpGroupType                  `xml:"urn:be:fgov:ehealth:samws:v2:consultation VmpGroup"`
	Vtm                     ConsultVtmType                       `xml:"urn:be:fgov:ehealth:samws:v2:consultation Vtm,omitempty"`
	VmpComponent            []ConsultVmpComponentType            `xml:"urn:be:fgov:ehealth:samws:v2:consultation VmpComponent"`
	StartDate               time.Time                            `xml:"StartDate,attr"`
	EndDate                 time.Time                            `xml:"EndDate,attr,omitempty"`
	Code                    int                                  `xml:"code,attr"`
}

func (t *ConsultVmpType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultVmpType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultVmpType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultVmpType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

type ConsultVtmType struct {
	Name      ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	StartDate time.Time       `xml:"StartDate,attr"`
	EndDate   time.Time       `xml:"EndDate,attr,omitempty"`
	Code      int             `xml:"code,attr"`
}

func (t *ConsultVtmType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConsultVtmType
	var layout struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.StartDate = (*xsdDate)(&layout.T.StartDate)
	layout.EndDate = (*xsdDate)(&layout.T.EndDate)
	return e.EncodeElement(layout, start)
}
func (t *ConsultVtmType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConsultVtmType
	var overlay struct {
		*T
		StartDate *xsdDate `xml:"StartDate,attr"`
		EndDate   *xsdDate `xml:"EndDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.StartDate = (*xsdDate)(&overlay.T.StartDate)
	overlay.EndDate = (*xsdDate)(&overlay.T.EndDate)
	return d.DecodeElement(&overlay, &start)
}

// May be one of Y, N, X
type ContainsAlcoholType string

// May be one of ACTIVE_COMPONENT, SOLVENT, DEVICE, EXCIPIENT
type ContentTypeType string

type CopaymentDataType struct {
	FeeAmount float64   `xml:"urn:be:fgov:ehealth:samws:v2:core FeeAmount"`
	From      time.Time `xml:"from,attr"`
	To        time.Time `xml:"to,attr,omitempty"`
}

func (t *CopaymentDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CopaymentDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *CopaymentDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CopaymentDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type CopaymentFullDataType struct {
	Data       []CopaymentDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	RegimeType int                 `xml:"regimeType,attr"`
}

type CopaymentKeyType struct {
	RegimeType int `xml:"regimeType,attr"`
}

type CopaymentType struct {
	FeeAmount  float64 `xml:"urn:be:fgov:ehealth:samws:v2:core FeeAmount"`
	RegimeType int     `xml:"regimeType,attr"`
}

// Must match the pattern [A-Z][A-Z]
type CountryCodeType string

// May be one of Y, N, X
type CrushableType string

// Must match the pattern \d{6}\-\d{2}
type CtiExtendedType string

type Data struct {
	EndOfCommercialization TextType  `xml:"urn:be:fgov:ehealth:samws:v2:core EndOfCommercialization,omitempty"`
	Reason                 TextType  `xml:"urn:be:fgov:ehealth:samws:v2:core Reason,omitempty"`
	AdditionalInformation  TextType  `xml:"urn:be:fgov:ehealth:samws:v2:core AdditionalInformation,omitempty"`
	Impact                 TextType  `xml:"urn:be:fgov:ehealth:samws:v2:core Impact,omitempty"`
	From                   time.Time `xml:"from,attr"`
	To                     time.Time `xml:"to,attr,omitempty"`
}

func (t *Data) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Data
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *Data) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Data
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type DataPeriodType struct {
	From time.Time `xml:"from,attr"`
	To   time.Time `xml:"to,attr,omitempty"`
}

func (t *DataPeriodType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DataPeriodType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *DataPeriodType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DataPeriodType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

// May be one of P, A, H, R
type DeliveryEnvironmentType string

type DeliveryModus struct {
	Description ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Description"`
	Code        String7Type     `xml:"code,attr,omitempty"`
}

type DeliveryModusKeyType struct {
	Code String7Type `xml:"code,attr"`
}

type DeliveryModusSpecification struct {
	Description ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Description"`
	Code        String7Type     `xml:"code,attr,omitempty"`
}

type DeliveryModusSpecificationKeyType struct {
	Code String7Type `xml:"code,attr"`
}

type DeliveryModusSpecificationType struct {
	Description TextType    `xml:"urn:be:fgov:ehealth:samws:v2:core Description"`
	Code        String7Type `xml:"code,attr"`
}

type DeliveryModusType struct {
	Description TextType    `xml:"urn:be:fgov:ehealth:samws:v2:core Description"`
	Code        String7Type `xml:"code,attr"`
}

type DerogationImportDataType struct {
	Note TextType  `xml:"urn:be:fgov:ehealth:samws:v2:core Note"`
	From time.Time `xml:"from,attr"`
	To   time.Time `xml:"to,attr,omitempty"`
}

func (t *DerogationImportDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DerogationImportDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *DerogationImportDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DerogationImportDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type DerogationImportFullDataType struct {
	Data       []DerogationImportDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	SequenceNr int                        `xml:"sequenceNr,attr"`
}

type DerogationImportKeyType struct {
	SequenceNr int `xml:"sequenceNr,attr"`
}

type DerogationImportType struct {
	Note       TextType `xml:"urn:be:fgov:ehealth:samws:v2:core Note"`
	SequenceNr int      `xml:"sequenceNr,attr"`
}

type DeviceType struct {
	Name           ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	EdqmCode       String20Type    `xml:"urn:be:fgov:ehealth:samws:v2:core EdqmCode,omitempty"`
	EdqmDefinition string          `xml:"urn:be:fgov:ehealth:samws:v2:consultation EdqmDefinition,omitempty"`
	Code           String8Type     `xml:"code,attr"`
}

type DeviceTypeKeyType struct {
	Code String8Type `xml:"code,attr"`
}

type DeviceTypeType struct {
	Name           Text255Type  `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	EdqmCode       String20Type `xml:"urn:be:fgov:ehealth:samws:v2:core EdqmCode,omitempty"`
	EdqmDefinition string       `xml:"urn:be:fgov:ehealth:samws:v2:refdata EdqmDefinition,omitempty"`
	Code           String8Type  `xml:"code,attr"`
}

// May be one of 2, 3, 4, N, X
type DividableType string

// Must match the pattern \d{7}
type DmppCodeType string

// May be one of CNK, PSEUDO
type DmppCodeTypeType string

type DmppDataType struct {
	Price        float64   `xml:"urn:be:fgov:ehealth:samws:v2:core Price,omitempty"`
	Cheap        bool      `xml:"urn:be:fgov:ehealth:samws:v2:export Cheap,omitempty"`
	Cheapest     bool      `xml:"urn:be:fgov:ehealth:samws:v2:export Cheapest,omitempty"`
	Reimbursable bool      `xml:"urn:be:fgov:ehealth:samws:v2:export Reimbursable"`
	From         time.Time `xml:"from,attr"`
	To           time.Time `xml:"to,attr,omitempty"`
}

func (t *DmppDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DmppDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *DmppDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DmppDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type DmppFullDataType struct {
	Data                []DmppDataType          `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	ProductId           string                  `xml:"ProductId,attr"`
	DeliveryEnvironment DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                DmppCodeType            `xml:"code,attr"`
	CodeType            DmppCodeTypeType        `xml:"codeType,attr"`
}

type DmppKeyType struct {
	DeliveryEnvironment DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                DmppCodeType            `xml:"code,attr"`
	CodeType            DmppCodeTypeType        `xml:"codeType,attr"`
}

type DmppType struct {
	Price               float64                 `xml:"urn:be:fgov:ehealth:samws:v2:core Price,omitempty"`
	Cheap               bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Cheap,omitempty"`
	Cheapest            bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Cheapest,omitempty"`
	DeliveryEnvironment DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                DmppCodeType            `xml:"code,attr"`
	CodeType            DmppCodeTypeType        `xml:"codeType,attr"`
}

type DomainType struct {
	Quantity      QuantityType      `xml:"urn:be:fgov:ehealth:samws:v2:core Quantity"`
	QuantityRange RangeType         `xml:"urn:be:fgov:ehealth:samws:v2:core QuantityRange"`
	Strength      StrengthType      `xml:"urn:be:fgov:ehealth:samws:v2:core Strength"`
	StrengthRange StrengthRangeType `xml:"urn:be:fgov:ehealth:samws:v2:core StrengthRange"`
	Code          String20Type      `xml:"urn:be:fgov:ehealth:samws:v2:core Code"`
}

type DosageParameterKeyType struct {
	Name String255Type `xml:"name,attr"`
}

type DosageParameterType struct {
	Definition   Text255Type   `xml:"urn:be:fgov:ehealth:samws:v2:core Definition"`
	StandardUnit String20Type  `xml:"urn:be:fgov:ehealth:samws:v2:core StandardUnit"`
	SnomedCT     string        `xml:"urn:be:fgov:ehealth:samws:v2:refdata SnomedCT"`
	Name         String255Type `xml:"name,attr"`
}

type DoseUnitsType struct {
	SubstanceCode String10Type      `xml:"urn:be:fgov:ehealth:samws:v2:core SubstanceCode"`
	Strength      StrengthRangeType `xml:"urn:be:fgov:ehealth:samws:v2:core Strength"`
	Rank          float64           `xml:"rank,attr,omitempty"`
}

type ExclusionDataType struct {
	CreatedTimestamp   time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
	CreatedUserId      String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	ModificationStatus CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	From               time.Time     `xml:"from,attr"`
	To                 time.Time     `xml:"to,attr,omitempty"`
}

func (t *ExclusionDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ExclusionDataType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		From             *xsdDate     `xml:"from,attr"`
		To               *xsdDate     `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *ExclusionDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ExclusionDataType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		From             *xsdDate     `xml:"from,attr"`
		To               *xsdDate     `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type ExclusionFullDataType struct {
	Data          []ExclusionDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	ExclusionType CharacterType       `xml:"ExclusionType,attr"`
	IdentifierNum String10Type        `xml:"IdentifierNum,attr"`
}

type ExclusionKeyType struct {
	ExclusionType CharacterType `xml:"ExclusionType,attr"`
	IdentifierNum String10Type  `xml:"IdentifierNum,attr"`
}

type ExclusionType struct {
	CreatedTimestamp   time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	CreatedUserId      String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	ModificationStatus CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	ExclusionType      CharacterType `xml:"ExclusionType,attr"`
	IdentifierNum      String10Type  `xml:"IdentifierNum,attr"`
}

func (t *ExclusionType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ExclusionType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	return e.EncodeElement(layout, start)
}
func (t *ExclusionType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ExclusionType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	return d.DecodeElement(&overlay, &start)
}

type ExportActualMedicinesType struct {
	Amp     []AmpFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Amp,omitempty"`
	Version string            `xml:"version,attr,omitempty"`
	SamId   string            `xml:"SamId,attr"`
}

type ExportChapterIVType struct {
	Paragraph         []ParagraphFullDataType         `xml:"urn:be:fgov:ehealth:samws:v2:export Paragraph,omitempty"`
	QualificationList []QualificationListFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export QualificationList,omitempty"`
	NameExplanation   []NameExplanationFullDataType   `xml:"urn:be:fgov:ehealth:samws:v2:export NameExplanation,omitempty"`
	Version           string                          `xml:"version,attr,omitempty"`
	SamId             string                          `xml:"SamId,attr"`
}

type ExportCompaniesType struct {
	Company []CompanyFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Company,omitempty"`
	Version string                `xml:"version,attr,omitempty"`
	SamId   string                `xml:"SamId,attr"`
}

type ExportCompoundingType struct {
	CompoundingIngredient []CompoundingIngredientFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export CompoundingIngredient,omitempty"`
	CompoundingFormula    []CompoundingFormulaFullDataType    `xml:"urn:be:fgov:ehealth:samws:v2:export CompoundingFormula,omitempty"`
	Version               string                              `xml:"version,attr,omitempty"`
	SamId                 string                              `xml:"SamId,attr"`
}

type ExportNonMedicinalType struct {
	NonMedicinalProduct []NonMedicinalProductFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export NonMedicinalProduct,omitempty"`
	Version             string                            `xml:"version,attr,omitempty"`
	SamId               string                            `xml:"SamId,attr"`
}

type ExportReferencesType struct {
	AtcClassification             []AtcClassificationType             `xml:"urn:be:fgov:ehealth:samws:v2:refdata AtcClassification,omitempty"`
	DeliveryModus                 []DeliveryModusType                 `xml:"urn:be:fgov:ehealth:samws:v2:refdata DeliveryModus,omitempty"`
	DeliveryModusSpecification    []DeliveryModusSpecificationType    `xml:"urn:be:fgov:ehealth:samws:v2:refdata DeliveryModusSpecification,omitempty"`
	DeviceType                    []DeviceTypeType                    `xml:"urn:be:fgov:ehealth:samws:v2:refdata DeviceType,omitempty"`
	PackagingClosure              []PackagingClosureType              `xml:"urn:be:fgov:ehealth:samws:v2:refdata PackagingClosure,omitempty"`
	PackagingMaterial             []PackagingMaterialType             `xml:"urn:be:fgov:ehealth:samws:v2:refdata PackagingMaterial,omitempty"`
	PackagingType                 []PackagingTypeType                 `xml:"urn:be:fgov:ehealth:samws:v2:refdata PackagingType,omitempty"`
	PharmaceuticalForm            []PharmaceuticalFormType            `xml:"urn:be:fgov:ehealth:samws:v2:refdata PharmaceuticalFormCode,omitempty"`
	RouteOfAdministration         []RouteOfAdministrationType         `xml:"urn:be:fgov:ehealth:samws:v2:refdata RouteOfAdministration,omitempty"`
	Substance                     []SubstanceType                     `xml:"urn:be:fgov:ehealth:samws:v2:refdata Substance,omitempty"`
	NoSwitchReason                []NoSwitchReasonType                `xml:"urn:be:fgov:ehealth:samws:v2:refdata NoSwitchReason,omitempty"`
	VirtualForm                   []VirtualFormType                   `xml:"urn:be:fgov:ehealth:samws:v2:refdata VirtualForm,omitempty"`
	Wada                          []WadaType                          `xml:"urn:be:fgov:ehealth:samws:v2:refdata Wada,omitempty"`
	NoGenericPrescriptionReason   []NoGenericPrescriptionReasonType   `xml:"urn:be:fgov:ehealth:samws:v2:refdata NoGenericPrescriptionReason,omitempty"`
	Indication                    []IndicationType                    `xml:"urn:be:fgov:ehealth:samws:v2:refdata Indication,omitempty"`
	DosageParameter               []DosageParameterType               `xml:"urn:be:fgov:ehealth:samws:v2:refdata DosageParameter,omitempty"`
	StandardForm                  []StandardFormCommonType            `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardForm,omitempty"`
	StandardRoute                 []StandardRouteCommonType           `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardRoute,omitempty"`
	StandardSubstance             []StandardSubstanceCommonType       `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardSubstance,omitempty"`
	StandardUnit                  []StandardUnitFamhpType             `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardUnit,omitempty"`
	Appendix                      []AppendixType                      `xml:"urn:be:fgov:ehealth:samws:v2:refdata Appendix,omitempty"`
	FormCategory                  []FormCategoryType                  `xml:"urn:be:fgov:ehealth:samws:v2:refdata FormCategory,omitempty"`
	Parameter                     []ParameterType                     `xml:"urn:be:fgov:ehealth:samws:v2:refdata Parameter,omitempty"`
	ReimbursementCriterion        []ReimbursementCriterionType        `xml:"urn:be:fgov:ehealth:samws:v2:refdata ReimbursementCriterion,omitempty"`
	ProfessionalCode              []ProfessionalCodeType              `xml:"urn:be:fgov:ehealth:samws:v2:refdata ProfessionalCode,omitempty"`
	AppendixType                  []AppendixTypeType                  `xml:"urn:be:fgov:ehealth:samws:v2:refdata AppendixType,omitempty"`
	FormType                      []FormTypeType                      `xml:"urn:be:fgov:ehealth:samws:v2:refdata FormType,omitempty"`
	NameType                      []NameTypeType                      `xml:"urn:be:fgov:ehealth:samws:v2:refdata NameType,omitempty"`
	LegalReferencePathToParagraph []LegalReferencePathToParagraphType `xml:"urn:be:fgov:ehealth:samws:v2:refdata LegalReferencePathToParagraph,omitempty"`
	Version                       string                              `xml:"version,attr,omitempty"`
	SamId                         string                              `xml:"SamId,attr"`
}

type ExportReimbursementLawsType struct {
	LegalBasis []LegalBasisFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export LegalBasis,omitempty"`
	Version    string                   `xml:"version,attr,omitempty"`
	SamId      string                   `xml:"SamId,attr"`
}

type ExportReimbursementsType struct {
	ReimbursementContext []ReimbursementContextFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export ReimbursementContext,omitempty"`
	Version              string                             `xml:"version,attr,omitempty"`
	SamId                string                             `xml:"SamId,attr"`
}

type ExportStandardFormAndPhFrmAndVtlFrmType struct {
	PharmaceuticalForm []PharmaceuticalFormKeyType `xml:"urn:be:fgov:ehealth:samws:v2:refdata PharmaceuticalFormCode,omitempty"`
	VirtualForm        []VirtualFormKeyType        `xml:"urn:be:fgov:ehealth:samws:v2:refdata VirtualForm,omitempty"`
	Name               Text255Type                 `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition         TextType                    `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL                String255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	Standard           StdFrmAllStandardsType      `xml:"standard,attr"`
	Code               String20Type                `xml:"code,attr"`
}

type ExportStandardFormType struct {
	Name       Text255Type            `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition TextType               `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL        String255Type          `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	Standard   StdFrmAllStandardsType `xml:"standard,attr"`
	Code       String20Type           `xml:"code,attr"`
}

type ExportStandardRouteAndRouteOfAdministrationType struct {
	RouteOfAdministration []RouteOfAdministrationKeyType `xml:"urn:be:fgov:ehealth:samws:v2:refdata RouteOfAdministration,omitempty"`
	Name                  Text255Type                    `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition            TextType                       `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL                   String255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	Standard              StdRteAllStandardsType         `xml:"standard,attr"`
	Code                  String20Type                   `xml:"code,attr"`
}

type ExportStandardRouteType struct {
	Name       Text255Type            `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition TextType               `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL        String255Type          `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	Standard   StdRteAllStandardsType `xml:"standard,attr"`
	Code       String20Type           `xml:"code,attr"`
}

type ExportStandardSubstanceAndSubstanceType struct {
	Substance  []SubstanceKeyType      `xml:"urn:be:fgov:ehealth:samws:v2:refdata Substance,omitempty"`
	Name       Text255Type             `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition TextType                `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL        String255Type           `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	Standard   StdSbstAllStandardsType `xml:"standard,attr"`
	Code       String20Type            `xml:"code,attr"`
}

type ExportStandardSubstanceType struct {
	Name       Text255Type             `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition TextType                `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL        String255Type           `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	Standard   StdSbstAllStandardsType `xml:"standard,attr"`
	Code       String20Type            `xml:"code,attr"`
}

type ExportVirtualMedicinesType struct {
	Vtm                     []VtmFullDataType                     `xml:"urn:be:fgov:ehealth:samws:v2:export Vtm,omitempty"`
	VmpGroup                []VmpGroupFullDataType                `xml:"urn:be:fgov:ehealth:samws:v2:export VmpGroup,omitempty"`
	CommentedClassification []CommentedClassificationFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export CommentedClassification,omitempty"`
	Vmp                     []VmpFullDataType                     `xml:"urn:be:fgov:ehealth:samws:v2:export Vmp,omitempty"`
	Version                 string                                `xml:"version,attr,omitempty"`
	SamId                   string                                `xml:"SamId,attr"`
}

type FindAmpRequestType struct {
	FindByProduct                  FindByActualProductType            `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByProduct,omitempty"`
	FindByPackage                  FindByPackageType                  `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByPackage,omitempty"`
	FindByDmpp                     DmppKeyType                        `xml:"urn:be:fgov:ehealth:samws:v2:actual:common FindByDmpp,omitempty"`
	FindByIngredient               []FindByIngredientType             `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByIngredient,omitempty"`
	FindByVirtualProduct           FindByVirtualProductType           `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByVirtualProduct,omitempty"`
	FindByGenericPrescriptionGroup FindByGenericPrescriptionGroupType `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByGenericPrescriptionGroup,omitempty"`
	FindByCompany                  FindByCompanyType                  `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByCompany,omitempty"`
	HasComponentWith               []HasActualComponentWithType       `xml:"urn:be:fgov:ehealth:samws:v2:consultation HasComponentWith,omitempty"`
	Lang                           Lang                               `xml:"lang,attr"`
	SearchDate                     time.Time                          `xml:"searchDate,attr,omitempty"`
}

func (t *FindAmpRequestType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindAmpRequestType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindAmpRequestType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindAmpRequestType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindAmpResponseType struct {
	Amp        []ConsultAmpType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Amp"`
	Anomaly    []AnomalyType    `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
	SearchDate time.Time        `xml:"searchDate,attr"`
}

func (t *FindAmpResponseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindAmpResponseType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindAmpResponseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindAmpResponseType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindByActualProductType struct {
	AmpCode     AmpCodeType      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common AmpCode"`
	AnyNamePart SearchStringType `xml:"urn:be:fgov:ehealth:samws:v2:core AnyNamePart"`
}

type FindByCommentedClassificationType struct {
	CommentedClassificationCode String10Type     `xml:"urn:be:fgov:ehealth:samws:v2:core CommentedClassificationCode"`
	AnyNamePart                 SearchStringType `xml:"urn:be:fgov:ehealth:samws:v2:core AnyNamePart"`
}

type FindByCompanyType struct {
	CompanyActorNr CompanyActorNrType  `xml:"urn:be:fgov:ehealth:samws:v2:core CompanyActorNr"`
	AnyNamePart    SearchStringType    `xml:"urn:be:fgov:ehealth:samws:v2:core AnyNamePart"`
	VatNr          VatNrPerCountryType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit VatNr"`
}

type FindByGenericPrescriptionGroupType struct {
	GenericPrescriptionGroupCode int              `xml:"urn:be:fgov:ehealth:samws:v2:consultation GenericPrescriptionGroupCode"`
	AnyNamePart                  SearchStringType `xml:"urn:be:fgov:ehealth:samws:v2:core AnyNamePart"`
}

type FindByIngredientType struct {
	SubstanceCode StandardSubstanceCodeCriterionType `xml:"urn:be:fgov:ehealth:samws:v2:consultation SubstanceCode"`
	SubstanceName StandardSubstanceNameCriterionType `xml:"urn:be:fgov:ehealth:samws:v2:consultation SubstanceName"`
	Strength      QuantityType                       `xml:"urn:be:fgov:ehealth:samws:v2:core Strength,omitempty"`
}

type FindByPackageType struct {
	AuthorisationNr     String50Type              `xml:"urn:be:fgov:ehealth:samws:v2:core AuthorisationNr"`
	CtiExtendedCode     CtiExtendedType           `xml:"urn:be:fgov:ehealth:samws:v2:core CtiExtendedCode"`
	AtcCode             String7Type               `xml:"urn:be:fgov:ehealth:samws:v2:core AtcCode"`
	AnyNamePart         SearchStringType          `xml:"urn:be:fgov:ehealth:samws:v2:core AnyNamePart"`
	Commercialised      bool                      `xml:"urn:be:fgov:ehealth:samws:v2:consultation Commercialised,omitempty"`
	InSupplyProblem     bool                      `xml:"urn:be:fgov:ehealth:samws:v2:consultation InSupplyProblem,omitempty"`
	ComponentEquivalent []ComponentEquivalentType `xml:"urn:be:fgov:ehealth:samws:v2:consultation ComponentEquivalent,omitempty"`
}

type FindByTherapeuticMoietyType struct {
	TherapeuticMoietyCode int              `xml:"urn:be:fgov:ehealth:samws:v2:consultation TherapeuticMoietyCode"`
	TherapeuticMoietyName SearchStringType `xml:"urn:be:fgov:ehealth:samws:v2:core TherapeuticMoietyName"`
}

type FindByVirtualProductType struct {
	VmpCode     int              `xml:"urn:be:fgov:ehealth:samws:v2:consultation VmpCode"`
	AnyNamePart SearchStringType `xml:"urn:be:fgov:ehealth:samws:v2:core AnyNamePart"`
}

type FindCommentedClassificationRequestType struct {
	FindByCommentedClassification FindByCommentedClassificationType `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByCommentedClassification"`
	FindByProduct                 FindByVirtualProductType          `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByProduct"`
	Lang                          Lang                              `xml:"lang,attr"`
	SearchDate                    time.Time                         `xml:"searchDate,attr,omitempty"`
}

func (t *FindCommentedClassificationRequestType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindCommentedClassificationRequestType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindCommentedClassificationRequestType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindCommentedClassificationRequestType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindCommentedClassificationResponseType struct {
	CommentedClassification []ConsultCommentedClassificationTreeType `xml:"urn:be:fgov:ehealth:samws:v2:consultation CommentedClassification"`
	Anomaly                 []AnomalyType                            `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
	SearchDate              time.Time                                `xml:"searchDate,attr"`
}

func (t *FindCommentedClassificationResponseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindCommentedClassificationResponseType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindCommentedClassificationResponseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindCommentedClassificationResponseType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindCompanyRequestType struct {
	CompanyActorNr CompanyActorNrType  `xml:"urn:be:fgov:ehealth:samws:v2:core CompanyActorNr"`
	AnyNamePart    SearchStringType    `xml:"urn:be:fgov:ehealth:samws:v2:core AnyNamePart"`
	VatNr          VatNrPerCountryType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit VatNr"`
	Lang           Lang                `xml:"lang,attr"`
	SearchDate     time.Time           `xml:"searchDate,attr,omitempty"`
}

func (t *FindCompanyRequestType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindCompanyRequestType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindCompanyRequestType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindCompanyRequestType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindCompanyResponseType struct {
	Company    []ConsultCompanyType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Company"`
	Anomaly    []AnomalyType        `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
	SearchDate time.Time            `xml:"searchDate,attr"`
}

func (t *FindCompanyResponseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindCompanyResponseType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindCompanyResponseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindCompanyResponseType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindCompoundingFormulaRequestType struct {
	FindByCNK          DmppCodeType `xml:"urn:be:fgov:ehealth:samws:v2:core FindByCNK"`
	FindByOfficialName string       `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByOfficialName"`
	FindByAnyName      string       `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByAnyName"`
	Lang               Lang         `xml:"lang,attr"`
	SearchDate         time.Time    `xml:"searchDate,attr,omitempty"`
}

func (t *FindCompoundingFormulaRequestType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindCompoundingFormulaRequestType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindCompoundingFormulaRequestType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindCompoundingFormulaRequestType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindCompoundingFormulaResponseType struct {
	CompoundingFormula []ConsultCompoundingFormulaType `xml:"urn:be:fgov:ehealth:samws:v2:consultation CompoundingFormula"`
	Anomaly            []AnomalyType                   `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
	SearchDate         time.Time                       `xml:"searchDate,attr"`
}

func (t *FindCompoundingFormulaResponseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindCompoundingFormulaResponseType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindCompoundingFormulaResponseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindCompoundingFormulaResponseType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindCompoundingIngredientRequestType struct {
	FindByCNK          DmppCodeType `xml:"urn:be:fgov:ehealth:samws:v2:core FindByCNK"`
	FindByOfficialName string       `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByOfficialName"`
	FindByAnyName      string       `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByAnyName"`
	Lang               Lang         `xml:"lang,attr"`
	SearchDate         time.Time    `xml:"searchDate,attr,omitempty"`
}

func (t *FindCompoundingIngredientRequestType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindCompoundingIngredientRequestType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindCompoundingIngredientRequestType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindCompoundingIngredientRequestType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindCompoundingIngredientResponseType struct {
	CompoundingIngredient []ConsultCompoundingIngredientType `xml:"urn:be:fgov:ehealth:samws:v2:consultation CompoundingIngredient"`
	Anomaly               []AnomalyType                      `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
	SearchDate            time.Time                          `xml:"searchDate,attr"`
}

func (t *FindCompoundingIngredientResponseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindCompoundingIngredientResponseType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindCompoundingIngredientResponseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindCompoundingIngredientResponseType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindLegalBasesType struct {
}

type FindLegislationTextRequestType struct {
	FindLegalBases           FindLegalBasesType     `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindLegalBases"`
	FindByLegalReferencePath LegalReferencePathType `xml:"urn:be:fgov:ehealth:samws:v2:core FindByLegalReferencePath"`
	FindByDmpp               DmppKeyType            `xml:"urn:be:fgov:ehealth:samws:v2:actual:common FindByDmpp"`
	Lang                     Lang                   `xml:"lang,attr"`
	SearchDate               time.Time              `xml:"searchDate,attr,omitempty"`
}

func (t *FindLegislationTextRequestType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindLegislationTextRequestType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindLegislationTextRequestType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindLegislationTextRequestType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindLegislationTextResponseType struct {
	LegalBasis []ConsultLegalBasisType `xml:"urn:be:fgov:ehealth:samws:v2:consultation LegalBasis"`
	Anomaly    []AnomalyType           `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
	SearchDate time.Time               `xml:"searchDate,attr"`
}

func (t *FindLegislationTextResponseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindLegislationTextResponseType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindLegislationTextResponseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindLegislationTextResponseType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindNonMedicinalProductRequestType struct {
	FindByCNK  DmppCodeType `xml:"urn:be:fgov:ehealth:samws:v2:core FindByCNK"`
	FindByName string       `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByName"`
	Lang       Lang         `xml:"lang,attr"`
	SearchDate time.Time    `xml:"searchDate,attr,omitempty"`
}

func (t *FindNonMedicinalProductRequestType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindNonMedicinalProductRequestType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindNonMedicinalProductRequestType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindNonMedicinalProductRequestType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindNonMedicinalProductResponseType struct {
	NonMedicinalProduct []ConsultNonMedicinalProductType `xml:"urn:be:fgov:ehealth:samws:v2:consultation NonMedicinalProduct"`
	Anomaly             []AnomalyType                    `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
	SearchDate          time.Time                        `xml:"searchDate,attr"`
}

func (t *FindNonMedicinalProductResponseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindNonMedicinalProductResponseType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindNonMedicinalProductResponseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindNonMedicinalProductResponseType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindRecursiveLegalReferenceType struct {
	Key            string                           `xml:"urn:be:fgov:ehealth:samws:v2:consultation Key"`
	Title          string                           `xml:"urn:be:fgov:ehealth:samws:v2:consultation Title"`
	Type           LegalReferenceTypeType           `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type,omitempty"`
	LegalReference *FindRecursiveLegalReferenceType `xml:"urn:be:fgov:ehealth:samws:v2:consultation LegalReference,omitempty"`
}

type FindReferencesRequestType struct {
	ReferenceEntity ReferenceEntityType `xml:"urn:be:fgov:ehealth:samws:v2:consultation ReferenceEntity"`
}

type FindReferencesResponseType struct {
	AtcClassification           []AtcClassification                                `xml:"urn:be:fgov:ehealth:samws:v2:consultation AtcClassification,omitempty"`
	DeliveryModus               []DeliveryModus                                    `xml:"urn:be:fgov:ehealth:samws:v2:consultation DeliveryModus,omitempty"`
	DeliveryModusSpecification  []DeliveryModusSpecification                       `xml:"urn:be:fgov:ehealth:samws:v2:consultation DeliveryModusSpecification,omitempty"`
	DeviceType                  []DeviceType                                       `xml:"urn:be:fgov:ehealth:samws:v2:consultation DeviceType,omitempty"`
	PackagingClosure            []PackagingClosure                                 `xml:"urn:be:fgov:ehealth:samws:v2:consultation PackagingClosure,omitempty"`
	PackagingMaterial           []PackagingMaterial                                `xml:"urn:be:fgov:ehealth:samws:v2:consultation PackagingMaterial,omitempty"`
	PackagingType               []PackagingType                                    `xml:"urn:be:fgov:ehealth:samws:v2:consultation PackagingType,omitempty"`
	PharmaceuticalForm          []PharmaceuticalForm                               `xml:"urn:be:fgov:ehealth:samws:v2:consultation PharmaceuticalFormCode,omitempty"`
	RouteOfAdministration       []RouteOfAdministration                            `xml:"urn:be:fgov:ehealth:samws:v2:consultation RouteOfAdministration,omitempty"`
	Substance                   []Substance                                        `xml:"urn:be:fgov:ehealth:samws:v2:consultation Substance,omitempty"`
	NoSwitchReason              []NoSwitchReason                                   `xml:"urn:be:fgov:ehealth:samws:v2:consultation NoSwitchReason,omitempty"`
	VirtualForm                 []VirtualForm                                      `xml:"urn:be:fgov:ehealth:samws:v2:consultation VirtualForm,omitempty"`
	Wada                        []Wada                                             `xml:"urn:be:fgov:ehealth:samws:v2:consultation Wada,omitempty"`
	NoGenericPrescriptionReason []NoGenericPrescriptionReason                      `xml:"urn:be:fgov:ehealth:samws:v2:consultation NoGenericPrescriptionReason,omitempty"`
	Appendix                    []Appendix                                         `xml:"urn:be:fgov:ehealth:samws:v2:consultation Appendix,omitempty"`
	FormCategory                []FormCategory                                     `xml:"urn:be:fgov:ehealth:samws:v2:consultation FormCategory,omitempty"`
	Parameter                   []Parameter                                        `xml:"urn:be:fgov:ehealth:samws:v2:consultation Parameter,omitempty"`
	ReimbursementCriterion      []ReimbursementCriterion                           `xml:"urn:be:fgov:ehealth:samws:v2:consultation ReimbursementCriterion,omitempty"`
	StandardForm                []ConsultStandardFormAndPhFrmAndVtlFrmType         `xml:"urn:be:fgov:ehealth:samws:v2:consultation StandardForm,omitempty"`
	StandardRoute               []ConsultStandardRouteAndRouteOfAdministrationType `xml:"urn:be:fgov:ehealth:samws:v2:consultation StandardRoute,omitempty"`
	StandardSubstance           []ConsultStandardSubstanceAndSubstanceType         `xml:"urn:be:fgov:ehealth:samws:v2:consultation StandardSubstance,omitempty"`
	StandardUnit                []StandardUnitFamhpType                            `xml:"urn:be:fgov:ehealth:samws:v2:consultation StandardUnit,omitempty"`
	Anomaly                     []AnomalyType                                      `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
}

type FindReimbursementRequestType struct {
	FindByPackage                  FindByPackageType                  `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByPackage"`
	FindByDmpp                     DmppKeyType                        `xml:"urn:be:fgov:ehealth:samws:v2:actual:common FindByDmpp"`
	FindByLegalReferencePath       LegalReferencePathType             `xml:"urn:be:fgov:ehealth:samws:v2:core FindByLegalReferencePath"`
	FindByGenericPrescriptionGroup FindByGenericPrescriptionGroupType `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByGenericPrescriptionGroup"`
	Lang                           Lang                               `xml:"lang,attr"`
	SearchDate                     time.Time                          `xml:"searchDate,attr,omitempty"`
}

func (t *FindReimbursementRequestType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindReimbursementRequestType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindReimbursementRequestType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindReimbursementRequestType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindReimbursementResponseType struct {
	ReimbursementContexts []ConsultReimbursementContextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation ReimbursementContexts"`
	Anomaly               []AnomalyType                     `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
	SearchDate            time.Time                         `xml:"searchDate,attr"`
}

func (t *FindReimbursementResponseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindReimbursementResponseType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindReimbursementResponseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindReimbursementResponseType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindVmpGroupRequestType struct {
	FindByGenericPrescriptionGroup FindByGenericPrescriptionGroupType `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByGenericPrescriptionGroup"`
	FindByProduct                  FindByVirtualProductType           `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByProduct"`
	Lang                           Lang                               `xml:"lang,attr"`
	SearchDate                     time.Time                          `xml:"searchDate,attr,omitempty"`
}

func (t *FindVmpGroupRequestType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindVmpGroupRequestType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindVmpGroupRequestType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindVmpGroupRequestType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindVmpGroupResponseType struct {
	VmpGroup   []ConsultVmpGroupType `xml:"urn:be:fgov:ehealth:samws:v2:consultation VmpGroup"`
	Anomaly    []AnomalyType         `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
	SearchDate time.Time             `xml:"searchDate,attr"`
}

func (t *FindVmpGroupResponseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindVmpGroupResponseType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindVmpGroupResponseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindVmpGroupResponseType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindVmpRequestType struct {
	FindByGenericPrescriptionGroup FindByGenericPrescriptionGroupType `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByGenericPrescriptionGroup,omitempty"`
	FindByTherapeuticMoiety        FindByTherapeuticMoietyType        `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByTherapeuticMoiety,omitempty"`
	FindByProduct                  FindByVirtualProductType           `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByProduct,omitempty"`
	FindByIngredient               []FindByIngredientType             `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByIngredient,omitempty"`
	HasComponentWith               []HasVirtualComponentWithType      `xml:"urn:be:fgov:ehealth:samws:v2:consultation HasComponentWith,omitempty"`
	HasWadaClassification          HasWadaClassificationType          `xml:"urn:be:fgov:ehealth:samws:v2:consultation HasWadaClassification,omitempty"`
	Lang                           Lang                               `xml:"lang,attr"`
	SearchDate                     time.Time                          `xml:"searchDate,attr,omitempty"`
}

func (t *FindVmpRequestType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindVmpRequestType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindVmpRequestType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindVmpRequestType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindVmpResponseType struct {
	Vmp        []ConsultVmpType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Vmp"`
	Anomaly    []AnomalyType    `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
	SearchDate time.Time        `xml:"searchDate,attr"`
}

func (t *FindVmpResponseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindVmpResponseType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindVmpResponseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindVmpResponseType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindVtmRequestType struct {
	FindByTherapeuticMoiety FindByTherapeuticMoietyType `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByTherapeuticMoiety"`
	FindByProduct           FindByVirtualProductType    `xml:"urn:be:fgov:ehealth:samws:v2:consultation FindByProduct"`
	Lang                    Lang                        `xml:"lang,attr"`
	SearchDate              time.Time                   `xml:"searchDate,attr,omitempty"`
}

func (t *FindVtmRequestType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindVtmRequestType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindVtmRequestType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindVtmRequestType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FindVtmResponseType struct {
	Vtm        []ConsultVtmType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Vtm"`
	Anomaly    []AnomalyType    `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
	SearchDate time.Time        `xml:"searchDate,attr"`
}

func (t *FindVtmResponseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FindVtmResponseType
	var layout struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	layout.T = (*T)(t)
	layout.SearchDate = (*xsdDate)(&layout.T.SearchDate)
	return e.EncodeElement(layout, start)
}
func (t *FindVtmResponseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FindVtmResponseType
	var overlay struct {
		*T
		SearchDate *xsdDate `xml:"searchDate,attr"`
	}
	overlay.T = (*T)(t)
	overlay.SearchDate = (*xsdDate)(&overlay.T.SearchDate)
	return d.DecodeElement(&overlay, &start)
}

type FormCategory struct {
	Description ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Description"`
	Code        String10Type    `xml:"code,attr"`
}

type FormCategoryKeyType struct {
	Code String10Type `xml:"code,attr"`
}

type FormCategoryType struct {
	Description TextType     `xml:"urn:be:fgov:ehealth:samws:v2:core Description"`
	Code        String10Type `xml:"code,attr"`
}

type FormTypeType struct {
	NameId     float64 `xml:"urn:be:fgov:ehealth:samws:v2:core NameId"`
	FormTypeId int     `xml:"FormTypeId,attr"`
}

type FormalInterpretationDataType struct {
	Rule string    `xml:"urn:be:fgov:ehealth:samws:v2:export Rule"`
	From time.Time `xml:"from,attr"`
	To   time.Time `xml:"to,attr,omitempty"`
}

func (t *FormalInterpretationDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FormalInterpretationDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *FormalInterpretationDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FormalInterpretationDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type FormalInterpretationFullDataType struct {
	Data                   []FormalInterpretationDataType       `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	ReimbursementCondition []ReimbursementConditionFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export ReimbursementCondition,omitempty"`
	ReimbursementTerm      []ReimbursementTermFullDataType      `xml:"urn:be:fgov:ehealth:samws:v2:export ReimbursementTerm,omitempty"`
	Key                    String15Type                         `xml:"key,attr"`
}

type FormalInterpretationKeyType struct {
	Key String15Type `xml:"key,attr"`
}

type FormalInterpretationType struct {
	Rule string       `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Rule"`
	Key  String15Type `xml:"key,attr"`
}

type GenericExportType struct {
	RootObject []RootObjectFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export RootObject,omitempty"`
	Version    string                   `xml:"version,attr,omitempty"`
	SamId      string                   `xml:"SamId,attr"`
}

type GetAmpRequestType struct {
	AmpKey AmpKeyType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common AmpKey"`
}

type GetAmpResponseType struct {
	Amp     AmpFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Amp"`
	Anomaly []AnomalyType   `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
}

type GetCommentedClassificationRequestType struct {
	CommentedClassificationKey CommentedClassificationKeyType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common CommentedClassificationKey"`
}

type GetCommentedClassificationResponseType struct {
	CommentedClassification CommentedClassificationFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export CommentedClassification"`
	Anomaly                 []AnomalyType                       `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
}

type GetCompanyRequestType struct {
	CompanyKey CompanyKeyType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit CompanyKey"`
}

type GetCompanyResponseType struct {
	Company CompanyFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Company"`
	Anomaly []AnomalyType       `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
}

type GetCompoundingFormulaRequestType struct {
	CompoundingFormulaKey CompoundingFormulaKeyType `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common CompoundingFormulaKey"`
}

type GetCompoundingFormulaResponseType struct {
	CompoundingFormula CompoundingFormulaFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export CompoundingFormula"`
	Anomaly            []AnomalyType                  `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
}

type GetCompoundingIngredientRequestType struct {
	CompoundingIngredientKey CompoundingIngredientKeyType `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common CompoundingIngredientKey"`
}

type GetCompoundingIngredientResponseType struct {
	CompoundingIngredient CompoundingIngredientFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export CompoundingIngredient"`
	Anomaly               []AnomalyType                     `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
}

type GetListOfActualMedicinalProductPackagesResponseType struct {
	Ampp       []AmppType `xml:"urn:be:fgov:ehealth:samws:v2:consultation:list Ampp,omitempty"`
	StartIndex int        `xml:"StartIndex,attr,omitempty"`
	Limit      int        `xml:"Limit,attr,omitempty"`
	Total      int        `xml:"Total,attr,omitempty"`
}

type GetListOfActualMedicinalProductsResponseType struct {
	Amp        []AmpType `xml:"urn:be:fgov:ehealth:samws:v2:consultation:list Amp,omitempty"`
	StartIndex int       `xml:"StartIndex,attr,omitempty"`
	Limit      int       `xml:"Limit,attr,omitempty"`
	Total      int       `xml:"Total,attr,omitempty"`
}

type GetListOfVirtualMedicinalProductsResponseType struct {
	Vmp        []VmpType `xml:"urn:be:fgov:ehealth:samws:v2:consultation:list Vmp,omitempty"`
	StartIndex int       `xml:"StartIndex,attr,omitempty"`
	Limit      int       `xml:"Limit,attr,omitempty"`
	Total      int       `xml:"Total,attr,omitempty"`
}

type GetListOfVmpGroupsResponseType struct {
	VmpGroup   []VmpGroupType `xml:"urn:be:fgov:ehealth:samws:v2:consultation:list VmpGroup,omitempty"`
	StartIndex int            `xml:"StartIndex,attr,omitempty"`
	Limit      int            `xml:"Limit,attr,omitempty"`
	Total      int            `xml:"Total,attr,omitempty"`
}

type GetNonMedicinalProductRequestType struct {
	NonMedicinalProductKey NonMedicinalProductKeyType `xml:"urn:be:fgov:ehealth:samws:v2:nonmedicinal:common NonMedicinalProductKey"`
}

type GetNonMedicinalProductResponseType struct {
	NonMedicinalProduct NonMedicinalProductFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export NonMedicinalProduct"`
	Anomaly             []AnomalyType                   `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
}

type GetReimbursementLawRequestType struct {
	LegalReferencePath LegalReferencePathType `xml:"urn:be:fgov:ehealth:samws:v2:core LegalReferencePath"`
}

type GetReimbursementLawResponseType struct {
	LegalBasis LegalBasisFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export LegalBasis"`
	Anomaly    []AnomalyType          `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
}

type GetReimbursementRequestType struct {
	ReimbursementContextKey ReimbursementContextKeyType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit ReimbursementContextKey"`
}

type GetReimbursementResponseType struct {
	ReimbursementContext ReimbursementContextFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export ReimbursementContext"`
	Anomaly              []AnomalyType                    `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
}

type GetVmpGroupRequestType struct {
	VmpGroupKey VmpGroupKeyType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common VmpGroupKey"`
}

type GetVmpGroupResponseType struct {
	VmpGroup VmpGroupFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export VmpGroup"`
	Anomaly  []AnomalyType        `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
}

type GetVmpRequestType struct {
	VmpKey VmpKeyType `xml:"urn:be:fgov:ehealth:samws:v2:core VmpKey"`
}

type GetVmpResponseType struct {
	Vmp     VmpFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Vmp"`
	Anomaly []AnomalyType   `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
}

type GetVtmRequestType struct {
	VtmKey VtmKeyType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common VtmKey"`
}

type GetVtmResponseType struct {
	Vtm     VtmFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Vtm"`
	Anomaly []AnomalyType   `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly"`
}

type HasActualComponentWithType struct {
	PharmaceuticalFormCode    StandardFormCodeCriterionType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation PharmaceuticalFormCode"`
	PharmaceuticalFormName    StandardFormNameCriterionType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation PharmaceuticalFormName"`
	RouteOfAdministrationCode StandardRouteCodeCriterionType `xml:"urn:be:fgov:ehealth:samws:v2:consultation RouteOfAdministrationCodes"`
	RouteOfAdministrationName StandardRouteNameCriterionType `xml:"urn:be:fgov:ehealth:samws:v2:consultation RouteOfAdministrationName"`
}

type HasVirtualComponentWithType struct {
	VirtualFormCode           StandardFormCodeCriterionType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation VirtualFormCode"`
	VirtualFormName           StandardFormNameCriterionType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation VirtualFormName"`
	RouteOfAdministrationCode StandardRouteCodeCriterionType `xml:"urn:be:fgov:ehealth:samws:v2:consultation RouteOfAdministrationCodes"`
	RouteOfAdministrationName StandardRouteNameCriterionType `xml:"urn:be:fgov:ehealth:samws:v2:consultation RouteOfAdministrationName"`
}

type HasWadaClassificationType struct {
	WadaCode String10Type     `xml:"urn:be:fgov:ehealth:samws:v2:core WadaCode"`
	WadaName SearchStringType `xml:"urn:be:fgov:ehealth:samws:v2:core WadaName"`
}

type IndicationKeyType struct {
	Code String255Type `xml:"code,attr"`
}

type IndicationType struct {
	Description Text255Type   `xml:"urn:be:fgov:ehealth:samws:v2:core Description"`
	SnomedCT    string        `xml:"urn:be:fgov:ehealth:samws:v2:refdata SnomedCT"`
	Code        String255Type `xml:"code,attr"`
}

// May be one of ACTIVE_SUBSTANCE, EXCIPIENT
type IngredientTypeType string

type Lang string

type LegalBasisDataType struct {
	Title       Text255Type        `xml:"urn:be:fgov:ehealth:samws:v2:core Title"`
	Type        LegalBasisTypeType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type"`
	EffectiveOn time.Time          `xml:"urn:be:fgov:ehealth:samws:v2:export EffectiveOn,omitempty"`
	From        time.Time          `xml:"from,attr"`
	To          time.Time          `xml:"to,attr,omitempty"`
}

func (t *LegalBasisDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T LegalBasisDataType
	var layout struct {
		*T
		EffectiveOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:export EffectiveOn,omitempty"`
		From        *xsdDate `xml:"from,attr"`
		To          *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.EffectiveOn = (*xsdDate)(&layout.T.EffectiveOn)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *LegalBasisDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LegalBasisDataType
	var overlay struct {
		*T
		EffectiveOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:export EffectiveOn,omitempty"`
		From        *xsdDate `xml:"from,attr"`
		To          *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.EffectiveOn = (*xsdDate)(&overlay.T.EffectiveOn)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type LegalBasisFullDataType struct {
	Data           []LegalBasisDataType                  `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	LegalReference []RecursiveLegalReferenceFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export LegalReference,omitempty"`
	Key            ReimbursementLawKeyType               `xml:"key,attr"`
}

type LegalBasisKeyType struct {
	Key ReimbursementLawKeyType `xml:"key,attr"`
}

type LegalBasisType struct {
	Title       Text255Type             `xml:"urn:be:fgov:ehealth:samws:v2:core Title"`
	Type        LegalBasisTypeType      `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type"`
	EffectiveOn time.Time               `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit EffectiveOn,omitempty"`
	Key         ReimbursementLawKeyType `xml:"key,attr"`
}

func (t *LegalBasisType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T LegalBasisType
	var layout struct {
		*T
		EffectiveOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit EffectiveOn,omitempty"`
	}
	layout.T = (*T)(t)
	layout.EffectiveOn = (*xsdDate)(&layout.T.EffectiveOn)
	return e.EncodeElement(layout, start)
}
func (t *LegalBasisType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LegalBasisType
	var overlay struct {
		*T
		EffectiveOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit EffectiveOn,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.EffectiveOn = (*xsdDate)(&overlay.T.EffectiveOn)
	return d.DecodeElement(&overlay, &start)
}

// May be one of ROYAL_DECREE, COORDINATED_LAW
type LegalBasisTypeType string

type LegalReferenceDataType struct {
	Title            TextType               `xml:"urn:be:fgov:ehealth:samws:v2:core Title"`
	Type             LegalReferenceTypeType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type"`
	FirstPublishedOn time.Time              `xml:"urn:be:fgov:ehealth:samws:v2:export FirstPublishedOn,omitempty"`
	LastModifiedOn   time.Time              `xml:"urn:be:fgov:ehealth:samws:v2:export LastModifiedOn,omitempty"`
	From             time.Time              `xml:"from,attr"`
	To               time.Time              `xml:"to,attr,omitempty"`
}

func (t *LegalReferenceDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T LegalReferenceDataType
	var layout struct {
		*T
		FirstPublishedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:export FirstPublishedOn,omitempty"`
		LastModifiedOn   *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:export LastModifiedOn,omitempty"`
		From             *xsdDate `xml:"from,attr"`
		To               *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.FirstPublishedOn = (*xsdDate)(&layout.T.FirstPublishedOn)
	layout.LastModifiedOn = (*xsdDate)(&layout.T.LastModifiedOn)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *LegalReferenceDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LegalReferenceDataType
	var overlay struct {
		*T
		FirstPublishedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:export FirstPublishedOn,omitempty"`
		LastModifiedOn   *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:export LastModifiedOn,omitempty"`
		From             *xsdDate `xml:"from,attr"`
		To               *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.FirstPublishedOn = (*xsdDate)(&overlay.T.FirstPublishedOn)
	overlay.LastModifiedOn = (*xsdDate)(&overlay.T.LastModifiedOn)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type LegalReferenceFullDataType struct {
	Data                []LegalReferenceDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	LegalReferenceTrace []LegalReferenceKeyType  `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LegalReferenceTrace,omitempty"`
	Key                 ReimbursementLawKeyType  `xml:"key,attr"`
}

type LegalReferenceKeyType struct {
	Key ReimbursementLawKeyType `xml:"key,attr"`
}

// Reference entity that maps a Legal Reference Path to a Paragraph. One way mapping: a Paragraph can represent multiple Legal Reference Paths (e.g. Legal Bases RD20011201 and RD20180201 result in the same Paragraph object)
type LegalReferencePathToParagraphType struct {
	ChapterName        String10Type           `xml:"urn:be:fgov:ehealth:samws:v2:core ChapterName"`
	ParagraphName      String10Type           `xml:"urn:be:fgov:ehealth:samws:v2:core ParagraphName"`
	LegalReferencePath LegalReferencePathType `xml:"LegalReferencePath,attr"`
}

// Must match the pattern [A-Za-z0-9_]{1,15}(\-[A-Za-z0-9_]{1,15}){0,4}
type LegalReferencePathType string

type LegalReferenceType struct {
	Title               TextType                `xml:"urn:be:fgov:ehealth:samws:v2:core Title"`
	Type                LegalReferenceTypeType  `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type"`
	FirstPublishedOn    time.Time               `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit FirstPublishedOn,omitempty"`
	LastModifiedOn      time.Time               `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LastModifiedOn,omitempty"`
	LegalReferenceTrace []LegalReferenceKeyType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LegalReferenceTrace,omitempty"`
	Key                 ReimbursementLawKeyType `xml:"key,attr"`
}

func (t *LegalReferenceType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T LegalReferenceType
	var layout struct {
		*T
		FirstPublishedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit FirstPublishedOn,omitempty"`
		LastModifiedOn   *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LastModifiedOn,omitempty"`
	}
	layout.T = (*T)(t)
	layout.FirstPublishedOn = (*xsdDate)(&layout.T.FirstPublishedOn)
	layout.LastModifiedOn = (*xsdDate)(&layout.T.LastModifiedOn)
	return e.EncodeElement(layout, start)
}
func (t *LegalReferenceType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LegalReferenceType
	var overlay struct {
		*T
		FirstPublishedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit FirstPublishedOn,omitempty"`
		LastModifiedOn   *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LastModifiedOn,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.FirstPublishedOn = (*xsdDate)(&overlay.T.FirstPublishedOn)
	overlay.LastModifiedOn = (*xsdDate)(&overlay.T.LastModifiedOn)
	return d.DecodeElement(&overlay, &start)
}

// May be one of ARTICLE, CHAPTER, PARAGRAPH, SECTION
type LegalReferenceTypeType string

type LegalTextDataType struct {
	Content        TextType          `xml:"urn:be:fgov:ehealth:samws:v2:core Content"`
	Type           LegalTextTypeType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type"`
	SequenceNr     int               `xml:"urn:be:fgov:ehealth:samws:v2:core SequenceNr"`
	LastModifiedOn time.Time         `xml:"urn:be:fgov:ehealth:samws:v2:export LastModifiedOn,omitempty"`
	From           time.Time         `xml:"from,attr"`
	To             time.Time         `xml:"to,attr,omitempty"`
}

func (t *LegalTextDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T LegalTextDataType
	var layout struct {
		*T
		LastModifiedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:export LastModifiedOn,omitempty"`
		From           *xsdDate `xml:"from,attr"`
		To             *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.LastModifiedOn = (*xsdDate)(&layout.T.LastModifiedOn)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *LegalTextDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LegalTextDataType
	var overlay struct {
		*T
		LastModifiedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:export LastModifiedOn,omitempty"`
		From           *xsdDate `xml:"from,attr"`
		To             *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.LastModifiedOn = (*xsdDate)(&overlay.T.LastModifiedOn)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type LegalTextFullDataType struct {
	Data []LegalTextDataType     `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	Key  ReimbursementLawKeyType `xml:"key,attr"`
}

type LegalTextKeyType struct {
	Key ReimbursementLawKeyType `xml:"key,attr"`
}

// Must match the pattern [A-Za-z0-9_]{1,15}(\-[A-Za-z0-9_]{1,15}){0,10}
type LegalTextPathType string

type LegalTextType struct {
	Content        TextType                `xml:"urn:be:fgov:ehealth:samws:v2:core Content"`
	Type           LegalTextTypeType       `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type"`
	SequenceNr     int                     `xml:"urn:be:fgov:ehealth:samws:v2:core SequenceNr"`
	LastModifiedOn time.Time               `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LastModifiedOn,omitempty"`
	Key            ReimbursementLawKeyType `xml:"key,attr"`
}

func (t *LegalTextType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T LegalTextType
	var layout struct {
		*T
		LastModifiedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LastModifiedOn,omitempty"`
	}
	layout.T = (*T)(t)
	layout.LastModifiedOn = (*xsdDate)(&layout.T.LastModifiedOn)
	return e.EncodeElement(layout, start)
}
func (t *LegalTextType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LegalTextType
	var overlay struct {
		*T
		LastModifiedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LastModifiedOn,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.LastModifiedOn = (*xsdDate)(&overlay.T.LastModifiedOn)
	return d.DecodeElement(&overlay, &start)
}

// May be one of ALINEA, POINT
type LegalTextTypeType string

type ListConsultationRequestType struct {
	Delta      time.Time `xml:"Delta,attr,omitempty"`
	StartIndex int       `xml:"StartIndex,attr,omitempty"`
	Limit      int       `xml:"Limit,attr,omitempty"`
}

func (t *ListConsultationRequestType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ListConsultationRequestType
	var layout struct {
		*T
		Delta *xsdDateTime `xml:"Delta,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Delta = (*xsdDateTime)(&layout.T.Delta)
	return e.EncodeElement(layout, start)
}
func (t *ListConsultationRequestType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ListConsultationRequestType
	var overlay struct {
		*T
		Delta      *xsdDateTime `xml:"Delta,attr,omitempty"`
		StartIndex *int         `xml:"StartIndex,attr,omitempty"`
		Limit      *int         `xml:"Limit,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Delta = (*xsdDateTime)(&overlay.T.Delta)
	overlay.StartIndex = (*int)(&overlay.T.StartIndex)
	overlay.Limit = (*int)(&overlay.T.Limit)
	return d.DecodeElement(&overlay, &start)
}

type ListConsultationResponseType struct {
	StartIndex int `xml:"StartIndex,attr,omitempty"`
	Limit      int `xml:"Limit,attr,omitempty"`
	Total      int `xml:"Total,attr,omitempty"`
}

// May be one of ALLOPATHIC, HOMEOPATHIC
type MedicineTypeType string

type MoveDrugPackageFamhpRequestType struct {
	CtiExtended CtiExtendedType `xml:"urn:be:fgov:ehealth:samws:v2:core CtiExtended"`
	AmpCode     AmpCodeType     `xml:"urn:be:fgov:ehealth:samws:v2:core AmpCode"`
}

// May be one of M, V
type MultipleType string

type NameExplanationDataType struct {
	CreatedTimestamp   time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
	CreatedUserId      String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	SourceTableId      int           `xml:"urn:be:fgov:ehealth:samws:v2:core SourceTableId"`
	ModificationStatus CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	From               time.Time     `xml:"from,attr"`
	To                 time.Time     `xml:"to,attr,omitempty"`
}

func (t *NameExplanationDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NameExplanationDataType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		From             *xsdDate     `xml:"from,attr"`
		To               *xsdDate     `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *NameExplanationDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NameExplanationDataType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		From             *xsdDate     `xml:"from,attr"`
		To               *xsdDate     `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type NameExplanationFullDataType struct {
	Data            []NameExplanationDataType     `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	NameTranslation []NameTranslationFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export NameTranslation,omitempty"`
	NameId          float64                       `xml:"NameId,attr"`
}

type NameExplanationKeyType struct {
	NameId float64 `xml:"NameId,attr"`
}

type NameExplanationType struct {
	CreatedTimestamp   time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	CreatedUserId      String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	SourceTableId      int           `xml:"urn:be:fgov:ehealth:samws:v2:core SourceTableId"`
	ModificationStatus CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	NameId             float64       `xml:"NameId,attr"`
}

func (t *NameExplanationType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NameExplanationType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	return e.EncodeElement(layout, start)
}
func (t *NameExplanationType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NameExplanationType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	return d.DecodeElement(&overlay, &start)
}

type NameTranslationDataType struct {
	CreatedTimestamp   time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
	CreatedUserId      String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	ShortText          String300Type `xml:"urn:be:fgov:ehealth:samws:v2:core ShortText,omitempty"`
	LongText           string        `xml:"urn:be:fgov:ehealth:samws:v2:export LongText,omitempty"`
	LongBinaryText     []byte        `xml:"urn:be:fgov:ehealth:samws:v2:export LongBinaryText,omitempty"`
	AddressUrl         String255Type `xml:"urn:be:fgov:ehealth:samws:v2:core AddressUrl,omitempty"`
	ModificationStatus CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	From               time.Time     `xml:"from,attr"`
	To                 time.Time     `xml:"to,attr,omitempty"`
}

func (t *NameTranslationDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NameTranslationDataType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime     `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		LongBinaryText   *xsdBase64Binary `xml:"urn:be:fgov:ehealth:samws:v2:export LongBinaryText,omitempty"`
		From             *xsdDate         `xml:"from,attr"`
		To               *xsdDate         `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	layout.LongBinaryText = (*xsdBase64Binary)(&layout.T.LongBinaryText)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *NameTranslationDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NameTranslationDataType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime     `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		LongBinaryText   *xsdBase64Binary `xml:"urn:be:fgov:ehealth:samws:v2:export LongBinaryText,omitempty"`
		From             *xsdDate         `xml:"from,attr"`
		To               *xsdDate         `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	overlay.LongBinaryText = (*xsdBase64Binary)(&overlay.T.LongBinaryText)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type NameTranslationFullDataType struct {
	Data       []NameTranslationDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	NameTypeCV String6Type               `xml:"NameTypeCV,attr"`
	LanguageCV String2Type               `xml:"LanguageCV,attr"`
}

type NameTranslationKeyType struct {
	NameTypeCV String6Type `xml:"NameTypeCV,attr"`
	LanguageCV String2Type `xml:"LanguageCV,attr"`
}

type NameTranslationType struct {
	CreatedTimestamp   time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	CreatedUserId      String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	ShortText          String300Type `xml:"urn:be:fgov:ehealth:samws:v2:core ShortText,omitempty"`
	LongText           string        `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit LongText,omitempty"`
	LongBinaryText     []byte        `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit LongBinaryText,omitempty"`
	AddressUrl         String255Type `xml:"urn:be:fgov:ehealth:samws:v2:core AddressUrl,omitempty"`
	ModificationStatus CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	NameTypeCV         String6Type   `xml:"NameTypeCV,attr"`
	LanguageCV         String2Type   `xml:"LanguageCV,attr"`
}

func (t *NameTranslationType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NameTranslationType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
		LongBinaryText   *xsdBase64Binary `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit LongBinaryText,omitempty"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	layout.LongBinaryText = (*xsdBase64Binary)(&layout.T.LongBinaryText)
	return e.EncodeElement(layout, start)
}
func (t *NameTranslationType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NameTranslationType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
		LongBinaryText   *xsdBase64Binary `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit LongBinaryText,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	overlay.LongBinaryText = (*xsdBase64Binary)(&overlay.T.LongBinaryText)
	return d.DecodeElement(&overlay, &start)
}

type NameTypeType struct {
	NameId      float64      `xml:"urn:be:fgov:ehealth:samws:v2:core NameId"`
	NameType    String50Type `xml:"urn:be:fgov:ehealth:samws:v2:core NameType,omitempty"`
	NameTypeSeq int          `xml:"urn:be:fgov:ehealth:samws:v2:core NameTypeSeq,omitempty"`
	NameTypeCV  String6Type  `xml:"NameTypeCV,attr"`
}

type NoGenericPrescriptionReason struct {
	Description ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Description"`
	Code        String10Type    `xml:"code,attr"`
}

type NoGenericPrescriptionReasonKeyType struct {
	Code String10Type `xml:"code,attr"`
}

type NoGenericPrescriptionReasonType struct {
	Description TextType     `xml:"urn:be:fgov:ehealth:samws:v2:core Description"`
	Code        String10Type `xml:"code,attr"`
}

type NoSwitchReason struct {
	Description ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Description"`
	Code        String10Type    `xml:"code,attr"`
}

type NoSwitchReasonKeyType struct {
	Code String10Type `xml:"code,attr"`
}

type NoSwitchReasonType struct {
	Description TextType     `xml:"urn:be:fgov:ehealth:samws:v2:core Description"`
	Code        String10Type `xml:"code,attr"`
}

type NonMedicinalProductDataType struct {
	Name             Text255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Category         Category         `xml:"urn:be:fgov:ehealth:samws:v2:nonmedicinal:common Category"`
	CommercialStatus CommercialStatus `xml:"urn:be:fgov:ehealth:samws:v2:nonmedicinal:common CommercialStatus"`
	Producer         TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core Producer"`
	Distributor      TextType         `xml:"urn:be:fgov:ehealth:samws:v2:core Distributor,omitempty"`
	From             time.Time        `xml:"from,attr"`
	To               time.Time        `xml:"to,attr,omitempty"`
}

func (t *NonMedicinalProductDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NonMedicinalProductDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *NonMedicinalProductDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NonMedicinalProductDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type NonMedicinalProductFullDataType struct {
	Data      []NonMedicinalProductDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	ProductId string                        `xml:"ProductId,attr"`
	Code      string                        `xml:"code,attr"`
}

type NonMedicinalProductKeyType struct {
	Code string `xml:"code,attr"`
}

// Must match the pattern \S.*\S|\S
type NonWhiteSpaceStringType string

type PackAmountType struct {
	Value float64      `xml:",chardata"`
	Unit  String20Type `xml:"unit,attr,omitempty"`
}

type PackagingClosure struct {
	Name           ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	EdqmCode       String20Type    `xml:"urn:be:fgov:ehealth:samws:v2:core EdqmCode,omitempty"`
	EdqmDefinition string          `xml:"urn:be:fgov:ehealth:samws:v2:consultation EdqmDefinition,omitempty"`
	Code           String8Type     `xml:"code,attr"`
}

type PackagingClosureKeyType struct {
	Code String8Type `xml:"code,attr"`
}

type PackagingClosureType struct {
	Name           Text255Type  `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	EdqmCode       String20Type `xml:"urn:be:fgov:ehealth:samws:v2:core EdqmCode,omitempty"`
	EdqmDefinition string       `xml:"urn:be:fgov:ehealth:samws:v2:refdata EdqmDefinition,omitempty"`
	Code           String8Type  `xml:"code,attr"`
}

type PackagingMaterial struct {
	Name ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	Code String8Type     `xml:"code,attr"`
}

type PackagingMaterialKeyType struct {
	Code String8Type `xml:"code,attr"`
}

type PackagingMaterialType struct {
	Name Text255Type `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Code String8Type `xml:"code,attr"`
}

type PackagingType struct {
	Name           ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	EdqmCode       String20Type    `xml:"urn:be:fgov:ehealth:samws:v2:core EdqmCode,omitempty"`
	EdqmDefinition string          `xml:"urn:be:fgov:ehealth:samws:v2:consultation EdqmDefinition,omitempty"`
	Code           String8Type     `xml:"code,attr"`
}

type PackagingTypeKeyType struct {
	Code String8Type `xml:"code,attr"`
}

type PackagingTypeType struct {
	Name           Text255Type  `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	EdqmCode       String20Type `xml:"urn:be:fgov:ehealth:samws:v2:core EdqmCode,omitempty"`
	EdqmDefinition string       `xml:"urn:be:fgov:ehealth:samws:v2:refdata EdqmDefinition,omitempty"`
	Code           String8Type  `xml:"code,attr"`
}

type ParagraphDataType struct {
	CreatedTimestamp    time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
	CreatedUserId       String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	KeyStringNl         String500Type `xml:"urn:be:fgov:ehealth:samws:v2:core KeyStringNl,omitempty"`
	KeyStringFr         String500Type `xml:"urn:be:fgov:ehealth:samws:v2:core KeyStringFr,omitempty"`
	AgreementType       CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core AgreementType,omitempty"`
	ProcessType         int           `xml:"urn:be:fgov:ehealth:samws:v2:core ProcessType,omitempty"`
	LegalReference      String100Type `xml:"urn:be:fgov:ehealth:samws:v2:core LegalReference,omitempty"`
	PublicationDate     time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:export PublicationDate,omitempty"`
	ModificationDate    time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:export ModificationDate,omitempty"`
	ProcessTypeOverrule String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core ProcessTypeOverrule,omitempty"`
	ParagraphVersion    int           `xml:"urn:be:fgov:ehealth:samws:v2:core ParagraphVersion"`
	AgreementTypePro    CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core AgreementTypePro,omitempty"`
	ModificationStatus  CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	From                time.Time     `xml:"from,attr"`
	To                  time.Time     `xml:"to,attr,omitempty"`
}

func (t *ParagraphDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ParagraphDataType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		PublicationDate  *xsdDate     `xml:"urn:be:fgov:ehealth:samws:v2:export PublicationDate,omitempty"`
		ModificationDate *xsdDate     `xml:"urn:be:fgov:ehealth:samws:v2:export ModificationDate,omitempty"`
		From             *xsdDate     `xml:"from,attr"`
		To               *xsdDate     `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	layout.PublicationDate = (*xsdDate)(&layout.T.PublicationDate)
	layout.ModificationDate = (*xsdDate)(&layout.T.ModificationDate)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *ParagraphDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ParagraphDataType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		PublicationDate  *xsdDate     `xml:"urn:be:fgov:ehealth:samws:v2:export PublicationDate,omitempty"`
		ModificationDate *xsdDate     `xml:"urn:be:fgov:ehealth:samws:v2:export ModificationDate,omitempty"`
		From             *xsdDate     `xml:"from,attr"`
		To               *xsdDate     `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	overlay.PublicationDate = (*xsdDate)(&overlay.T.PublicationDate)
	overlay.ModificationDate = (*xsdDate)(&overlay.T.ModificationDate)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type ParagraphFullDataType struct {
	Data           []ParagraphDataType          `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	ParagraphTrace []ParagraphTraceFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export ParagraphTrace,omitempty"`
	Exclusion      []ExclusionFullDataType      `xml:"urn:be:fgov:ehealth:samws:v2:export Exclusion,omitempty"`
	Verse          []VerseFullDataType          `xml:"urn:be:fgov:ehealth:samws:v2:export Verse,omitempty"`
	ChapterName    String10Type                 `xml:"ChapterName,attr"`
	ParagraphName  String10Type                 `xml:"ParagraphName,attr"`
}

type ParagraphKeyType struct {
	ChapterName   String10Type `xml:"ChapterName,attr"`
	ParagraphName String10Type `xml:"ParagraphName,attr"`
}

type ParagraphTraceDataType struct {
	CreatedTimestamp   time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
	CreatedUserId      String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	ModificationStatus CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	From               time.Time     `xml:"from,attr"`
	To                 time.Time     `xml:"to,attr,omitempty"`
}

func (t *ParagraphTraceDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ParagraphTraceDataType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		From             *xsdDate     `xml:"from,attr"`
		To               *xsdDate     `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *ParagraphTraceDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ParagraphTraceDataType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		From             *xsdDate     `xml:"from,attr"`
		To               *xsdDate     `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type ParagraphTraceFullDataType struct {
	Data                []ParagraphTraceDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	ParentChapterName   string                   `xml:"ParentChapterName,attr"`
	ParentParagraphName string                   `xml:"ParentParagraphName,attr"`
}

type ParagraphTraceKeyType struct {
	ParentChapterName   string `xml:"ParentChapterName,attr"`
	ParentParagraphName string `xml:"ParentParagraphName,attr"`
}

type ParagraphTraceType struct {
	CreatedTimestamp    time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	CreatedUserId       String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	ModificationStatus  CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	ParentChapterName   string        `xml:"ParentChapterName,attr"`
	ParentParagraphName string        `xml:"ParentParagraphName,attr"`
}

func (t *ParagraphTraceType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ParagraphTraceType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	return e.EncodeElement(layout, start)
}
func (t *ParagraphTraceType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ParagraphTraceType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	return d.DecodeElement(&overlay, &start)
}

type ParagraphType struct {
	CreatedTimestamp    time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	CreatedUserId       String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	KeyStringNl         String500Type `xml:"urn:be:fgov:ehealth:samws:v2:core KeyStringNl,omitempty"`
	KeyStringFr         String500Type `xml:"urn:be:fgov:ehealth:samws:v2:core KeyStringFr,omitempty"`
	AgreementType       CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core AgreementType,omitempty"`
	ProcessType         int           `xml:"urn:be:fgov:ehealth:samws:v2:core ProcessType,omitempty"`
	LegalReference      String100Type `xml:"urn:be:fgov:ehealth:samws:v2:core LegalReference,omitempty"`
	PublicationDate     time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit PublicationDate,omitempty"`
	ModificationDate    time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit ModificationDate,omitempty"`
	ProcessTypeOverrule String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core ProcessTypeOverrule,omitempty"`
	ParagraphVersion    int           `xml:"urn:be:fgov:ehealth:samws:v2:core ParagraphVersion"`
	AgreementTypePro    CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core AgreementTypePro,omitempty"`
	ModificationStatus  CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	ChapterName         String10Type  `xml:"ChapterName,attr"`
	ParagraphName       String10Type  `xml:"ParagraphName,attr"`
}

func (t *ParagraphType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ParagraphType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
		PublicationDate  *xsdDate     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit PublicationDate,omitempty"`
		ModificationDate *xsdDate     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit ModificationDate,omitempty"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	layout.PublicationDate = (*xsdDate)(&layout.T.PublicationDate)
	layout.ModificationDate = (*xsdDate)(&layout.T.ModificationDate)
	return e.EncodeElement(layout, start)
}
func (t *ParagraphType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ParagraphType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
		PublicationDate  *xsdDate     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit PublicationDate,omitempty"`
		ModificationDate *xsdDate     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit ModificationDate,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	overlay.PublicationDate = (*xsdDate)(&overlay.T.PublicationDate)
	overlay.ModificationDate = (*xsdDate)(&overlay.T.ModificationDate)
	return d.DecodeElement(&overlay, &start)
}

type Parameter struct {
	UnitType UnitTypeType  `xml:"urn:be:fgov:ehealth:samws:v2:refdata UnitType"`
	Domain   []DomainType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation Domain,omitempty"`
	Name     String100Type `xml:"name,attr"`
}

type ParameterKeyType struct {
	Name String100Type `xml:"name,attr"`
}

type ParameterType struct {
	UnitType UnitTypeType  `xml:"urn:be:fgov:ehealth:samws:v2:refdata UnitType"`
	Domain   []DomainType  `xml:"urn:be:fgov:ehealth:samws:v2:refdata Domain,omitempty"`
	Name     String100Type `xml:"name,attr"`
}

type ParameterValueType struct {
	Quantity      QuantityType      `xml:"urn:be:fgov:ehealth:samws:v2:core Quantity"`
	QuantityRange RangeType         `xml:"urn:be:fgov:ehealth:samws:v2:core QuantityRange"`
	Strength      StrengthType      `xml:"urn:be:fgov:ehealth:samws:v2:core Strength"`
	StrengthRange StrengthRangeType `xml:"urn:be:fgov:ehealth:samws:v2:core StrengthRange"`
	Code          String20Type      `xml:"urn:be:fgov:ehealth:samws:v2:core Code"`
	Boolean       bool              `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Boolean"`
}

type ParameterizedQuantityType struct {
	Quantity            QuantityType  `xml:"urn:be:fgov:ehealth:samws:v2:core Quantity"`
	Multiplier          float64       `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common Multiplier,omitempty"`
	DosageParameterName String255Type `xml:"urn:be:fgov:ehealth:samws:v2:core DosageParameterName,omitempty"`
}

type PharmaceuticalForm struct {
	Name ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	Code String10Type    `xml:"code,attr"`
}

type PharmaceuticalFormKeyType struct {
	Code String10Type `xml:"code,attr"`
}

type PharmaceuticalFormType struct {
	Name ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	Code String10Type    `xml:"code,attr"`
}

type PharmaceuticalFormWithStandardsType struct {
	StandardForm []ExportStandardFormType `xml:"urn:be:fgov:ehealth:samws:v2:export StandardForm,omitempty"`
	Name         Text255Type              `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Code         String10Type             `xml:"code,attr"`
}

type PositiveShortType int

type PricingRangeType struct {
	Min  float64      `xml:"urn:be:fgov:ehealth:samws:v2:core Min"`
	Max  float64      `xml:"urn:be:fgov:ehealth:samws:v2:core Max"`
	Unit String20Type `xml:"unit,attr"`
}

type PricingUnitType struct {
	Quantity float64     `xml:"urn:be:fgov:ehealth:samws:v2:core Quantity"`
	Label    Text255Type `xml:"urn:be:fgov:ehealth:samws:v2:core Label"`
}

type ProfessionalAuthorisationDataType struct {
	CreatedTimestamp      time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
	CreatedUserId         String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	ProfessionalCV        String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core ProfessionalCV,omitempty"`
	PurchasingAdvisorName String50Type  `xml:"urn:be:fgov:ehealth:samws:v2:core PurchasingAdvisorName,omitempty"`
	ModificationStatus    CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	From                  time.Time     `xml:"from,attr"`
	To                    time.Time     `xml:"to,attr,omitempty"`
}

func (t *ProfessionalAuthorisationDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ProfessionalAuthorisationDataType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		From             *xsdDate     `xml:"from,attr"`
		To               *xsdDate     `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *ProfessionalAuthorisationDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ProfessionalAuthorisationDataType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		From             *xsdDate     `xml:"from,attr"`
		To               *xsdDate     `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type ProfessionalAuthorisationFullDataType struct {
	Data                        []ProfessionalAuthorisationDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	ProfessionalAuthorisationId float64                             `xml:"ProfessionalAuthorisationId,attr"`
}

type ProfessionalAuthorisationKeyType struct {
	ProfessionalAuthorisationId float64 `xml:"ProfessionalAuthorisationId,attr"`
}

type ProfessionalAuthorisationType struct {
	CreatedTimestamp            time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	CreatedUserId               String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	ProfessionalCV              String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core ProfessionalCV,omitempty"`
	PurchasingAdvisorName       String50Type  `xml:"urn:be:fgov:ehealth:samws:v2:core PurchasingAdvisorName,omitempty"`
	ModificationStatus          CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	ProfessionalAuthorisationId float64       `xml:"ProfessionalAuthorisationId,attr"`
}

func (t *ProfessionalAuthorisationType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ProfessionalAuthorisationType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	return e.EncodeElement(layout, start)
}
func (t *ProfessionalAuthorisationType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ProfessionalAuthorisationType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	return d.DecodeElement(&overlay, &start)
}

type ProfessionalCodeType struct {
	NameId           float64      `xml:"urn:be:fgov:ehealth:samws:v2:core NameId"`
	ProfessionalName String50Type `xml:"urn:be:fgov:ehealth:samws:v2:core ProfessionalName,omitempty"`
	ProfessionalCV   String10Type `xml:"ProfessionalCV,attr"`
}

type QualificationListDataType struct {
	CreatedTimestamp   time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
	CreatedUserId      String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	NameId             float64       `xml:"urn:be:fgov:ehealth:samws:v2:core NameId"`
	ExclusiveInd       CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ExclusiveInd,omitempty"`
	ModificationStatus CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	From               time.Time     `xml:"from,attr"`
	To                 time.Time     `xml:"to,attr,omitempty"`
}

func (t *QualificationListDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T QualificationListDataType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		From             *xsdDate     `xml:"from,attr"`
		To               *xsdDate     `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *QualificationListDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T QualificationListDataType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		From             *xsdDate     `xml:"from,attr"`
		To               *xsdDate     `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type QualificationListFullDataType struct {
	Data                      []QualificationListDataType             `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	ProfessionalAuthorisation []ProfessionalAuthorisationFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export ProfessionalAuthorisation,omitempty"`
	QualificationList         String10Type                            `xml:"QualificationList,attr"`
}

type QualificationListKeyType struct {
	QualificationList String10Type `xml:"QualificationList,attr"`
}

type QualificationListType struct {
	CreatedTimestamp   time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	CreatedUserId      String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	NameId             float64       `xml:"urn:be:fgov:ehealth:samws:v2:core NameId"`
	ExclusiveInd       CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ExclusiveInd,omitempty"`
	ModificationStatus CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	QualificationList  String10Type  `xml:"QualificationList,attr"`
}

func (t *QualificationListType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T QualificationListType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	return e.EncodeElement(layout, start)
}
func (t *QualificationListType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T QualificationListType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	return d.DecodeElement(&overlay, &start)
}

type QuantityType struct {
	Value float64      `xml:",chardata"`
	Unit  String20Type `xml:"unit,attr"`
}

type RangeType struct {
	Min  float64      `xml:"urn:be:fgov:ehealth:samws:v2:core Min"`
	Max  float64      `xml:"urn:be:fgov:ehealth:samws:v2:core Max"`
	Unit String20Type `xml:"unit,attr"`
}

type RealActualIngredientDataType struct {
	Type                  IngredientTypeType         `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	KnownEffect           bool                       `xml:"urn:be:fgov:ehealth:samws:v2:export KnownEffect,omitempty"`
	Strength              QuantityType               `xml:"urn:be:fgov:ehealth:samws:v2:core Strength"`
	StrengthDescription   String50Type               `xml:"urn:be:fgov:ehealth:samws:v2:core StrengthDescription"`
	AdditionalInformation String255Type              `xml:"urn:be:fgov:ehealth:samws:v2:core AdditionalInformation,omitempty"`
	Substance             SubstanceWithStandardsType `xml:"urn:be:fgov:ehealth:samws:v2:export Substance"`
	From                  time.Time                  `xml:"from,attr"`
	To                    time.Time                  `xml:"to,attr,omitempty"`
}

func (t *RealActualIngredientDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RealActualIngredientDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *RealActualIngredientDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RealActualIngredientDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type RealActualIngredientEquivalentDataType struct {
	Type                IngredientTypeType         `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	KnownEffect         bool                       `xml:"urn:be:fgov:ehealth:samws:v2:export KnownEffect,omitempty"`
	Strength            QuantityType               `xml:"urn:be:fgov:ehealth:samws:v2:core Strength"`
	StrengthDescription String50Type               `xml:"urn:be:fgov:ehealth:samws:v2:core StrengthDescription"`
	Substance           SubstanceWithStandardsType `xml:"urn:be:fgov:ehealth:samws:v2:export Substance"`
	From                time.Time                  `xml:"from,attr"`
	To                  time.Time                  `xml:"to,attr,omitempty"`
}

func (t *RealActualIngredientEquivalentDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RealActualIngredientEquivalentDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *RealActualIngredientEquivalentDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RealActualIngredientEquivalentDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type RealActualIngredientEquivalentFullDataType struct {
	Data       []RealActualIngredientEquivalentDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	SequenceNr int                                      `xml:"sequenceNr,attr"`
}

type RealActualIngredientEquivalentKeyType struct {
	SequenceNr int `xml:"sequenceNr,attr"`
}

type RealActualIngredientEquivalentType struct {
	Type                IngredientTypeType `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	KnownEffect         bool               `xml:"urn:be:fgov:ehealth:samws:v2:actual:common KnownEffect,omitempty"`
	Strength            QuantityType       `xml:"urn:be:fgov:ehealth:samws:v2:core Strength"`
	StrengthDescription String50Type       `xml:"urn:be:fgov:ehealth:samws:v2:core StrengthDescription"`
	SubstanceCode       String10Type       `xml:"urn:be:fgov:ehealth:samws:v2:core SubstanceCode"`
	SequenceNr          int                `xml:"sequenceNr,attr"`
}

type RealActualIngredientFullDataType struct {
	Data                           []RealActualIngredientDataType               `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	RealActualIngredientEquivalent []RealActualIngredientEquivalentFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export RealActualIngredientEquivalent,omitempty"`
	Rank                           int                                          `xml:"rank,attr"`
}

type RealActualIngredientKeyType struct {
	Rank int `xml:"rank,attr"`
}

type RealActualIngredientType struct {
	Type                  IngredientTypeType `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	KnownEffect           bool               `xml:"urn:be:fgov:ehealth:samws:v2:actual:common KnownEffect,omitempty"`
	Strength              QuantityType       `xml:"urn:be:fgov:ehealth:samws:v2:core Strength"`
	StrengthDescription   String50Type       `xml:"urn:be:fgov:ehealth:samws:v2:core StrengthDescription"`
	AdditionalInformation String255Type      `xml:"urn:be:fgov:ehealth:samws:v2:core AdditionalInformation,omitempty"`
	SubstanceCode         String10Type       `xml:"urn:be:fgov:ehealth:samws:v2:core SubstanceCode"`
	Rank                  int                `xml:"rank,attr"`
}

type RealVirtualIngredientDataType struct {
	Type      IngredientTypeType         `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	Strength  StrengthRangeType          `xml:"urn:be:fgov:ehealth:samws:v2:core Strength,omitempty"`
	Substance SubstanceWithStandardsType `xml:"urn:be:fgov:ehealth:samws:v2:export Substance"`
	From      time.Time                  `xml:"from,attr"`
	To        time.Time                  `xml:"to,attr,omitempty"`
}

func (t *RealVirtualIngredientDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RealVirtualIngredientDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *RealVirtualIngredientDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RealVirtualIngredientDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type RealVirtualIngredientFullDataType struct {
	Data       []RealVirtualIngredientDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	SequenceNr int                             `xml:"sequenceNr,attr"`
}

type RealVirtualIngredientKeyType struct {
	SequenceNr int `xml:"sequenceNr,attr"`
}

type RealVirtualIngredientType struct {
	Type          IngredientTypeType `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	Strength      StrengthRangeType  `xml:"urn:be:fgov:ehealth:samws:v2:core Strength,omitempty"`
	SubstanceCode String10Type       `xml:"urn:be:fgov:ehealth:samws:v2:core SubstanceCode"`
	SequenceNr    int                `xml:"sequenceNr,attr"`
}

type RecursiveLegalReferenceFullDataType struct {
	LegalReference       []RecursiveLegalReferenceFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export LegalReference,omitempty"`
	FormalInterpretation []FormalInterpretationFullDataType    `xml:"urn:be:fgov:ehealth:samws:v2:export FormalInterpretation,omitempty"`
	LegalText            []RecursiveLegalTextFullDataType      `xml:"urn:be:fgov:ehealth:samws:v2:export LegalText,omitempty"`
	Data                 []LegalReferenceDataType              `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	LegalReferenceTrace  []LegalReferenceKeyType               `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LegalReferenceTrace,omitempty"`
	Key                  ReimbursementLawKeyType               `xml:"key,attr"`
}

type RecursiveLegalTextFullDataType struct {
	LegalText []RecursiveLegalTextFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export LegalText,omitempty"`
	Data      []LegalTextDataType              `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	Key       ReimbursementLawKeyType          `xml:"key,attr"`
}

// May be one of AtcClassification, DeliveryModus, DeliveryModusSpecification, DeviceType, PackagingClosure, PackagingMaterial, PackagingType, PharmaceuticalFormCode, RouteOfAdministration, Substance, NoSwitchReason, VirtualForm, Wada, NoGenericPrescriptionReason, Appendix, FormCategory, Parameter, ReimbursementCriterion, StandardForm, StandardRoute, StandardSubstance, StandardUnit
type ReferenceEntityType string

type ReimbursementConditionDataType struct {
	Expression string    `xml:"urn:be:fgov:ehealth:samws:v2:export Expression"`
	From       time.Time `xml:"from,attr"`
	To         time.Time `xml:"to,attr,omitempty"`
}

func (t *ReimbursementConditionDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ReimbursementConditionDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *ReimbursementConditionDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ReimbursementConditionDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type ReimbursementConditionFullDataType struct {
	Data                  []ReimbursementConditionDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	Attachment            []AttachmentFullDataType         `xml:"urn:be:fgov:ehealth:samws:v2:export Attachment,omitempty"`
	LegalTextRelativePath LegalTextPathType                `xml:"legalTextRelativePath,attr"`
	Key                   String15Type                     `xml:"key,attr"`
}

type ReimbursementConditionKeyType struct {
	LegalTextRelativePath LegalTextPathType `xml:"legalTextRelativePath,attr"`
	Key                   String15Type      `xml:"key,attr"`
}

type ReimbursementConditionType struct {
	Expression            string            `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Expression"`
	LegalTextRelativePath LegalTextPathType `xml:"legalTextRelativePath,attr"`
	Key                   String15Type      `xml:"key,attr"`
}

type ReimbursementContextDataType struct {
	Multiple               MultipleType               `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit Multiple,omitempty"`
	Temporary              bool                       `xml:"urn:be:fgov:ehealth:samws:v2:export Temporary"`
	Reference              bool                       `xml:"urn:be:fgov:ehealth:samws:v2:export Reference"`
	FlatRateSystem         bool                       `xml:"urn:be:fgov:ehealth:samws:v2:export FlatRateSystem"`
	ReimbursementBasePrice float64                    `xml:"urn:be:fgov:ehealth:samws:v2:core ReimbursementBasePrice"`
	ReferenceBasePrice     float64                    `xml:"urn:be:fgov:ehealth:samws:v2:core ReferenceBasePrice"`
	CopaymentSupplement    float64                    `xml:"urn:be:fgov:ehealth:samws:v2:core CopaymentSupplement,omitempty"`
	PricingUnit            PricingUnitType            `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit PricingUnit"`
	PricingSlice           PricingUnitType            `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit PricingSlice,omitempty"`
	CollegeForOrphanDrugs  bool                       `xml:"urn:be:fgov:ehealth:samws:v2:export CollegeForOrphanDrugs,omitempty"`
	ChargedAt85Percent     bool                       `xml:"urn:be:fgov:ehealth:samws:v2:export ChargedAt85Percent,omitempty"`
	ReimbursementCriterion ReimbursementCriterionType `xml:"urn:be:fgov:ehealth:samws:v2:refdata ReimbursementCriterion"`
	From                   time.Time                  `xml:"from,attr"`
	To                     time.Time                  `xml:"to,attr,omitempty"`
}

func (t *ReimbursementContextDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ReimbursementContextDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *ReimbursementContextDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ReimbursementContextDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type ReimbursementContextFullDataType struct {
	Data                []ReimbursementContextDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	Copayment           []CopaymentFullDataType        `xml:"urn:be:fgov:ehealth:samws:v2:export Copayment,omitempty"`
	DeliveryEnvironment DeliveryEnvironmentType        `xml:"deliveryEnvironment,attr"`
	Code                DmppCodeType                   `xml:"code,attr"`
	CodeType            DmppCodeTypeType               `xml:"codeType,attr"`
	LegalReferencePath  LegalReferencePathType         `xml:"legalReferencePath,attr"`
}

type ReimbursementContextKeyType struct {
	DeliveryEnvironment DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                DmppCodeType            `xml:"code,attr"`
	CodeType            DmppCodeTypeType        `xml:"codeType,attr"`
	LegalReferencePath  LegalReferencePathType  `xml:"legalReferencePath,attr"`
}

type ReimbursementContextType struct {
	Multiple                       MultipleType            `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit Multiple,omitempty"`
	Temporary                      bool                    `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit Temporary"`
	Reference                      bool                    `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit Reference"`
	FlatRateSystem                 bool                    `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit FlatRateSystem"`
	ReimbursementBasePrice         float64                 `xml:"urn:be:fgov:ehealth:samws:v2:core ReimbursementBasePrice"`
	ReferenceBasePrice             float64                 `xml:"urn:be:fgov:ehealth:samws:v2:core ReferenceBasePrice"`
	CopaymentSupplement            float64                 `xml:"urn:be:fgov:ehealth:samws:v2:core CopaymentSupplement,omitempty"`
	PricingUnit                    PricingUnitType         `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit PricingUnit"`
	PricingSlice                   PricingUnitType         `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit PricingSlice,omitempty"`
	CollegeForOrphanDrugs          bool                    `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit CollegeForOrphanDrugs,omitempty"`
	ChargedAt85Percent             bool                    `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit ChargedAt85Percent,omitempty"`
	ReimbursementCriterionCategory String10Type            `xml:"urn:be:fgov:ehealth:samws:v2:core ReimbursementCriterionCategory"`
	ReimbursementCriterionCode     String20Type            `xml:"urn:be:fgov:ehealth:samws:v2:core ReimbursementCriterionCode"`
	DeliveryEnvironment            DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                           DmppCodeType            `xml:"code,attr"`
	CodeType                       DmppCodeTypeType        `xml:"codeType,attr"`
	LegalReferencePath             LegalReferencePathType  `xml:"legalReferencePath,attr"`
}

type ReimbursementCriterion struct {
	Description ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Description,omitempty"`
	Category    String2Type     `xml:"category,attr"`
	Code        String10Type    `xml:"code,attr"`
}

type ReimbursementCriterionKeyType struct {
	Category String10Type `xml:"category,attr"`
	Code     String10Type `xml:"code,attr"`
}

type ReimbursementCriterionType struct {
	Description TextType     `xml:"urn:be:fgov:ehealth:samws:v2:core Description,omitempty"`
	Category    String10Type `xml:"category,attr"`
	Code        String10Type `xml:"code,attr"`
}

// Must match the pattern [A-Za-z0-9]([A-Za-z0-9_]{0,13}[A-Za-z0-9])?
type ReimbursementLawKeyType string

type ReimbursementTermDataType struct {
	ValueUnit ParameterValueType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit ValueUnit"`
	Parameter ParameterType      `xml:"urn:be:fgov:ehealth:samws:v2:refdata Parameter"`
	From      time.Time          `xml:"from,attr"`
	To        time.Time          `xml:"to,attr,omitempty"`
}

func (t *ReimbursementTermDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ReimbursementTermDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *ReimbursementTermDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ReimbursementTermDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type ReimbursementTermFullDataType struct {
	Data       []ReimbursementTermDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	SequenceNr int                         `xml:"sequenceNr,attr"`
}

type ReimbursementTermKeyType struct {
	SequenceNr int `xml:"sequenceNr,attr"`
}

type ReimbursementTermType struct {
	ValueUnit     ParameterValueType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit ValueUnit"`
	ParameterName String100Type      `xml:"urn:be:fgov:ehealth:samws:v2:core ParameterName"`
	SequenceNr    int                `xml:"sequenceNr,attr"`
}

// May be one of REMOVE
type RemoveActionType string

type RemoveAmpType struct {
	Action RemoveActionType `xml:"action,attr"`
	From   ValidityDateType `xml:"from,attr"`
	To     ValidityDateType `xml:"to,attr,omitempty"`
	Code   AmpCodeType      `xml:"code,attr"`
}

type RemoveAmppType struct {
	Action      RemoveActionType `xml:"action,attr"`
	From        ValidityDateType `xml:"from,attr"`
	To          ValidityDateType `xml:"to,attr,omitempty"`
	CtiExtended CtiExtendedType  `xml:"ctiExtended,attr"`
}

type RemoveCommentedClassificationRequestType struct {
	CommentedClassification RemoveCommentedClassificationType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common CommentedClassification"`
}

type RemoveCommentedClassificationType struct {
	CommentedClassification []RemoveCommentedClassificationType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common CommentedClassification,omitempty"`
	Action                  RemoveNoChangeActionsType           `xml:"action,attr"`
	Code                    String10Type                        `xml:"code,attr"`
}

type RemoveCommercializationType struct {
	Action RemoveActionType `xml:"action,attr"`
	From   ValidityDateType `xml:"from,attr"`
	To     ValidityDateType `xml:"to,attr,omitempty"`
}

type RemoveCompanyRequestType struct {
	Company RemoveCompanyType `xml:"urn:be:fgov:ehealth:samws:v2:company:submit Company"`
}

type RemoveCompanyType struct {
	Action  RemoveActionType   `xml:"action,attr"`
	From    ValidityDateType   `xml:"from,attr"`
	To      ValidityDateType   `xml:"to,attr,omitempty"`
	ActorNr CompanyActorNrType `xml:"actorNr,attr"`
}

type RemoveCompoundingFormulaRequestType struct {
	CompoundingFormula []RemoveCompoundingFormulaType `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common CompoundingFormula"`
}

type RemoveCompoundingFormulaType struct {
	Action   RemoveActionType `xml:"action,attr"`
	From     ValidityDateType `xml:"from,attr"`
	To       ValidityDateType `xml:"to,attr,omitempty"`
	Code     DmppCodeType     `xml:"code,attr"`
	CodeType DmppCodeTypeType `xml:"codeType,attr,omitempty"`
}

func (t *RemoveCompoundingFormulaType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RemoveCompoundingFormulaType
	var overlay struct {
		*T
		CodeType *DmppCodeTypeType `xml:"codeType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CodeType = (*DmppCodeTypeType)(&overlay.T.CodeType)
	return d.DecodeElement(&overlay, &start)
}

type RemoveCompoundingIngredientRequestType struct {
	CompoundingIngredient []RemoveCompoundingIngredientType `xml:"urn:be:fgov:ehealth:samws:v2:compounding:common CompoundingIngredient"`
}

type RemoveCompoundingIngredientType struct {
	Action   RemoveActionType `xml:"action,attr"`
	From     ValidityDateType `xml:"from,attr"`
	To       ValidityDateType `xml:"to,attr,omitempty"`
	Code     DmppCodeType     `xml:"code,attr"`
	CodeType DmppCodeTypeType `xml:"codeType,attr,omitempty"`
}

func (t *RemoveCompoundingIngredientType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RemoveCompoundingIngredientType
	var overlay struct {
		*T
		CodeType *DmppCodeTypeType `xml:"codeType,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CodeType = (*DmppCodeTypeType)(&overlay.T.CodeType)
	return d.DecodeElement(&overlay, &start)
}

type RemoveDerogationImportType struct {
	Action     RemoveActionType `xml:"action,attr"`
	From       ValidityDateType `xml:"from,attr"`
	To         ValidityDateType `xml:"to,attr,omitempty"`
	SequenceNr int              `xml:"sequenceNr,attr"`
}

type RemoveDmppFamhpRequestType struct {
	Dmpp RemoveDmppType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Dmpp"`
}

type RemoveDmppNihdiRequestType struct {
	Dmpp []RemoveDmppType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Dmpp"`
}

type RemoveDmppType struct {
	Action              RemoveActionType        `xml:"action,attr"`
	From                ValidityDateType        `xml:"from,attr"`
	To                  ValidityDateType        `xml:"to,attr,omitempty"`
	CtiExtended         CtiExtendedType         `xml:"ctiExtended,attr"`
	DeliveryEnvironment DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                DmppCodeType            `xml:"code,attr"`
	CodeType            DmppCodeTypeType        `xml:"codeType,attr"`
}

type RemoveDrugPackageBcpiRequestType struct {
	Ampp []RemoveAmppType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
}

type RemoveDrugPackageFamhpRequestType struct {
	Ampp RemoveAmppType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
}

type RemoveDrugPackageNihdiBisRequestType struct {
	Ampp []RemoveAmppType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
}

type RemoveDrugPackageNihdiRequestType struct {
	Ampp []RemoveAmppType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
}

type RemoveDrugProductBcpiRequestType struct {
	Amp RemoveAmpType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Amp"`
}

type RemoveDrugProductRequestType struct {
	Amp RemoveAmpType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Amp"`
}

type RemoveDrugStatusRequestType struct {
	Ampp RemoveDrugStatusType `xml:"urn:be:fgov:ehealth:samws:v2:actual:status Ampp"`
}

type RemoveDrugStatusType struct {
	Commercialization RemoveCommercializationType  `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Commercialization,omitempty"`
	SupplyProblem     RemoveSupplyProblemType      `xml:"urn:be:fgov:ehealth:samws:v2:actual:common SupplyProblem,omitempty"`
	DerogationImport  []RemoveDerogationImportType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common DerogationImport,omitempty"`
	CtiExtended       CtiExtendedType              `xml:"ctiExtended,attr"`
}

// May be one of REMOVE, NO_CHANGE
type RemoveNoChangeActionsType string

type RemoveNonMedicinalProductRequestType struct {
	NonMedicinalProduct []RemoveNonMedicinalProductType `xml:"urn:be:fgov:ehealth:samws:v2:nonmedicinal:common NonMedicinalProduct"`
}

type RemoveNonMedicinalProductType struct {
	Action RemoveActionType `xml:"action,attr"`
	From   ValidityDateType `xml:"from,attr"`
	To     ValidityDateType `xml:"to,attr,omitempty"`
	Code   string           `xml:"code,attr"`
}

type RemovePricingInformationRequestType struct {
	Ampp []RemoveAmppType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Ampp"`
}

type RemovePublicNonReimbursablePriceRequestType struct {
	Dmpp []RemoveDmppType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Dmpp"`
}

type RemoveSupplyProblemType struct {
	Action RemoveActionType `xml:"action,attr"`
	From   ValidityDateType `xml:"from,attr"`
	To     ValidityDateType `xml:"to,attr,omitempty"`
}

type RemoveVirtualDefinitionRequestType struct {
	Vmp RemoveVmpType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common Vmp"`
}

type RemoveVmpGroupRequestType struct {
	VmpGroup RemoveVmpGroupType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common VmpGroup"`
}

type RemoveVmpGroupType struct {
	Action RemoveActionType `xml:"action,attr"`
	Code   int              `xml:"code,attr"`
}

type RemoveVmpType struct {
	Action RemoveActionType `xml:"action,attr"`
	Code   int              `xml:"code,attr"`
}

type RemoveVtmRequestType struct {
	Vtm RemoveVtmType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common Vtm"`
}

type RemoveVtmType struct {
	Action RemoveActionType `xml:"action,attr"`
	Code   int              `xml:"code,attr"`
}

type RootObjectDataType struct {
	DataField string    `xml:"urn:be:fgov:ehealth:samws:v2:export DataField"`
	From      time.Time `xml:"from,attr"`
	To        time.Time `xml:"to,attr,omitempty"`
}

func (t *RootObjectDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RootObjectDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *RootObjectDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RootObjectDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type RootObjectFullDataType struct {
	Data            []RootObjectDataType    `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	SomeChildObject *RootObjectFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export SomeChildObject,omitempty"`
}

type RouteOfAdministration struct {
	Name ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	Code String20Type    `xml:"code,attr"`
}

type RouteOfAdministrationKeyType struct {
	Code String20Type `xml:"code,attr"`
}

type RouteOfAdministrationType struct {
	Name ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	Code String20Type    `xml:"code,attr"`
}

type RouteOfAdministrationWithStandardsType struct {
	StandardRoute []ExportStandardRouteType `xml:"urn:be:fgov:ehealth:samws:v2:export StandardRoute,omitempty"`
	Name          Text255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Code          String20Type              `xml:"code,attr"`
}

// May be one of 2, 3, 4, N, X
type ScoredType string

// Must match the pattern [\S-[%_]][^%_]*[\S-[%_]]|[\S-[%_]]
type SearchStringType string

type SetActualToVirtualLinkRequestType struct {
	Amp AmpLinkToVirtualType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Amp"`
}

type SetBcpiReferencesRequestType struct {
	NoSwitchReason              []NoSwitchReasonType              `xml:"urn:be:fgov:ehealth:samws:v2:refdata NoSwitchReason,omitempty"`
	VirtualForm                 []VirtualFormType                 `xml:"urn:be:fgov:ehealth:samws:v2:refdata VirtualForm,omitempty"`
	Wada                        []WadaType                        `xml:"urn:be:fgov:ehealth:samws:v2:refdata Wada,omitempty"`
	NoGenericPrescriptionReason []NoGenericPrescriptionReasonType `xml:"urn:be:fgov:ehealth:samws:v2:refdata NoGenericPrescriptionReason,omitempty"`
	Indication                  []IndicationType                  `xml:"urn:be:fgov:ehealth:samws:v2:refdata Indication,omitempty"`
	DosageParameter             []DosageParameterType             `xml:"urn:be:fgov:ehealth:samws:v2:refdata DosageParameter,omitempty"`
	StandardForm                []StandardFormBcpiType            `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardForm,omitempty"`
	StandardRoute               []StandardRouteBcpiType           `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardRoute,omitempty"`
	StandardSubstance           []StandardSubstanceBcpiType       `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardSubstance,omitempty"`
}

type SetFamhpReferencesRequestType struct {
	AtcClassification          []AtcClassificationType          `xml:"urn:be:fgov:ehealth:samws:v2:refdata AtcClassification,omitempty"`
	DeliveryModus              []DeliveryModusType              `xml:"urn:be:fgov:ehealth:samws:v2:refdata DeliveryModus,omitempty"`
	DeliveryModusSpecification []DeliveryModusSpecificationType `xml:"urn:be:fgov:ehealth:samws:v2:refdata DeliveryModusSpecification,omitempty"`
	DeviceType                 []DeviceTypeType                 `xml:"urn:be:fgov:ehealth:samws:v2:refdata DeviceType,omitempty"`
	PackagingClosure           []PackagingClosureType           `xml:"urn:be:fgov:ehealth:samws:v2:refdata PackagingClosure,omitempty"`
	PackagingMaterial          []PackagingMaterialType          `xml:"urn:be:fgov:ehealth:samws:v2:refdata PackagingMaterial,omitempty"`
	PackagingType              []PackagingTypeType              `xml:"urn:be:fgov:ehealth:samws:v2:refdata PackagingType,omitempty"`
	PharmaceuticalForm         []PharmaceuticalFormType         `xml:"urn:be:fgov:ehealth:samws:v2:refdata PharmaceuticalFormCode,omitempty"`
	RouteOfAdministration      []RouteOfAdministrationType      `xml:"urn:be:fgov:ehealth:samws:v2:refdata RouteOfAdministration,omitempty"`
	Substance                  []SubstanceType                  `xml:"urn:be:fgov:ehealth:samws:v2:refdata Substance,omitempty"`
	StandardForm               []StandardFormFamhpType          `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardForm,omitempty"`
	StandardRoute              []StandardRouteFamhpType         `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardRoute,omitempty"`
	StandardSubstance          []StandardSubstanceFamhpType     `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardSubstance,omitempty"`
	StandardUnit               []StandardUnitFamhpType          `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardUnit,omitempty"`
}

type SetNihdiReferencesRequestType struct {
	Appendix               []AppendixType               `xml:"urn:be:fgov:ehealth:samws:v2:refdata Appendix,omitempty"`
	FormCategory           []FormCategoryType           `xml:"urn:be:fgov:ehealth:samws:v2:refdata FormCategory,omitempty"`
	Parameter              []ParameterType              `xml:"urn:be:fgov:ehealth:samws:v2:refdata Parameter,omitempty"`
	ReimbursementCriterion []ReimbursementCriterionType `xml:"urn:be:fgov:ehealth:samws:v2:refdata ReimbursementCriterion,omitempty"`
}

// May be one of default, preserve
type Space string

type StandardDosageType struct {
	IndicationCode                 []String255Type              `xml:"urn:be:fgov:ehealth:samws:v2:core IndicationCode"`
	StandardDosageParamBounds      []BoundedParameterType       `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common StandardDosageParamBounds"`
	TargetGroup                    TargetGroup                  `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common TargetGroup"`
	KidneyFailureClass             int                          `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common KidneyFailureClass,omitempty"`
	LiverFailureClass              int                          `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common LiverFailureClass,omitempty"`
	RouteOfAdministrationCode      []String10Type               `xml:"urn:be:fgov:ehealth:samws:v2:core RouteOfAdministrationCodes"`
	RouteSpecification             Text255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core RouteSpecification,omitempty"`
	TreatmentDurationType          TreatmentDurationType        `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common TreatmentDurationType"`
	TemporaryDurationDetails       TemporaryDurationDetailsType `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common TemporaryDurationDetails,omitempty"`
	DosageUnit                     ParameterizedQuantityType    `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common DosageUnit,omitempty"`
	AdministrationFrequency        AdministrationFrequencyType  `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common AdministrationFrequency,omitempty"`
	MaximumAdministrationFrequency AdministrationFrequencyType  `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common MaximumAdministrationFrequency,omitempty"`
	MaximumDailyQuantity           ParameterizedQuantityType    `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common MaximumDailyQuantity,omitempty"`
	TextualDosage                  TextType                     `xml:"urn:be:fgov:ehealth:samws:v2:core TextualDosage,omitempty"`
	SupplementaryInfo              TextType                     `xml:"urn:be:fgov:ehealth:samws:v2:core SupplementaryInfo,omitempty"`
	Code                           float64                      `xml:"code,attr"`
}

type StandardFormBcpiType struct {
	Name        Text255Type             `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition  TextType                `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL         String255Type           `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	VirtualForm []VirtualFormKeyType    `xml:"urn:be:fgov:ehealth:samws:v2:refdata VirtualForm"`
	Standard    StdFrmBcpiStandardsType `xml:"standard,attr"`
	Code        String20Type            `xml:"code,attr"`
}

type StandardFormCodeCriterionType struct {
	String20Type String20Type           `xml:",chardata"`
	Standard     StdFrmAllStandardsType `xml:"standard,attr,omitempty"`
}

type StandardFormCommonType struct {
	Name               Text255Type                 `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition         TextType                    `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL                String255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	PharmaceuticalForm []PharmaceuticalFormKeyType `xml:"urn:be:fgov:ehealth:samws:v2:refdata PharmaceuticalFormCode,omitempty"`
	VirtualForm        []VirtualFormKeyType        `xml:"urn:be:fgov:ehealth:samws:v2:refdata VirtualForm,omitempty"`
	Standard           StdFrmAllStandardsType      `xml:"standard,attr"`
	Code               String20Type                `xml:"code,attr"`
}

type StandardFormFamhpType struct {
	Name               Text255Type                 `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition         TextType                    `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL                String255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	PharmaceuticalForm []PharmaceuticalFormKeyType `xml:"urn:be:fgov:ehealth:samws:v2:refdata PharmaceuticalFormCode"`
	Standard           StdFrmFamhpStandardsType    `xml:"standard,attr"`
	Code               String20Type                `xml:"code,attr"`
}

type StandardFormKeyBcpiType struct {
	Standard StdFrmBcpiStandardsType `xml:"standard,attr"`
	Code     String20Type            `xml:"code,attr"`
}

type StandardFormKeyCommonType struct {
	Standard StdFrmAllStandardsType `xml:"standard,attr"`
	Code     String20Type           `xml:"code,attr"`
}

type StandardFormKeyFamhpType struct {
	Standard StdFrmFamhpStandardsType `xml:"standard,attr"`
	Code     String20Type             `xml:"code,attr"`
}

type StandardFormKeyType struct {
	Standard StdFrmAllStandardsType `xml:"standard,attr"`
	Code     String20Type           `xml:"code,attr"`
}

type StandardFormNameCriterionType struct {
	SearchStringType SearchStringType       `xml:",chardata"`
	Standard         StdFrmAllStandardsType `xml:"standard,attr,omitempty"`
}

type StandardResponseType struct {
	Anomaly []AnomalyType `xml:"urn:be:fgov:ehealth:samws:v2:core Anomaly,omitempty"`
}

type StandardRouteBcpiType struct {
	Name                  Text255Type                    `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition            TextType                       `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL                   String255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	RouteOfAdministration []RouteOfAdministrationKeyType `xml:"urn:be:fgov:ehealth:samws:v2:refdata RouteOfAdministration"`
	Standard              StdRteBcpiStandardsType        `xml:"standard,attr"`
	Code                  String20Type                   `xml:"code,attr"`
}

type StandardRouteCodeCriterionType struct {
	String20Type String20Type           `xml:",chardata"`
	Standard     StdRteAllStandardsType `xml:"standard,attr,omitempty"`
}

type StandardRouteCommonType struct {
	Name                  Text255Type                    `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition            TextType                       `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL                   String255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	RouteOfAdministration []RouteOfAdministrationKeyType `xml:"urn:be:fgov:ehealth:samws:v2:refdata RouteOfAdministration"`
	Standard              StdRteAllStandardsType         `xml:"standard,attr"`
	Code                  String20Type                   `xml:"code,attr"`
}

type StandardRouteFamhpType struct {
	Name                  Text255Type                    `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition            TextType                       `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL                   String255Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	RouteOfAdministration []RouteOfAdministrationKeyType `xml:"urn:be:fgov:ehealth:samws:v2:refdata RouteOfAdministration"`
	Standard              StdRteFamhpStandardsType       `xml:"standard,attr"`
	Code                  String20Type                   `xml:"code,attr"`
}

type StandardRouteKeyBcpiType struct {
	Standard StdRteBcpiStandardsType `xml:"standard,attr"`
	Code     String20Type            `xml:"code,attr"`
}

type StandardRouteKeyCommonType struct {
	Standard StdRteAllStandardsType `xml:"standard,attr"`
	Code     String20Type           `xml:"code,attr"`
}

type StandardRouteKeyFamhpType struct {
	Standard StdRteFamhpStandardsType `xml:"standard,attr"`
	Code     String20Type             `xml:"code,attr"`
}

type StandardRouteKeyType struct {
	Standard StdRteAllStandardsType `xml:"standard,attr"`
	Code     String20Type           `xml:"code,attr"`
}

type StandardRouteNameCriterionType struct {
	SearchStringType SearchStringType       `xml:",chardata"`
	Standard         StdRteAllStandardsType `xml:"standard,attr,omitempty"`
}

type StandardSubstanceBcpiType struct {
	Name       Text255Type              `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition TextType                 `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL        String255Type            `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	Substance  []SubstanceKeyType       `xml:"urn:be:fgov:ehealth:samws:v2:refdata Substance"`
	Standard   StdSbstBcpiStandardsType `xml:"standard,attr"`
	Code       String20Type             `xml:"code,attr"`
}

type StandardSubstanceCodeCriterionType struct {
	String20Type String20Type            `xml:",chardata"`
	Standard     StdSbstAllStandardsType `xml:"standard,attr,omitempty"`
}

type StandardSubstanceCommonType struct {
	Name       Text255Type             `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition TextType                `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL        String255Type           `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	Substance  []SubstanceKeyType      `xml:"urn:be:fgov:ehealth:samws:v2:refdata Substance"`
	Standard   StdSbstAllStandardsType `xml:"standard,attr"`
	Code       String20Type            `xml:"code,attr"`
}

type StandardSubstanceFamhpType struct {
	Name       Text255Type               `xml:"urn:be:fgov:ehealth:samws:v2:core Name,omitempty"`
	Definition TextType                  `xml:"urn:be:fgov:ehealth:samws:v2:core Definition,omitempty"`
	URL        String255Type             `xml:"urn:be:fgov:ehealth:samws:v2:core URL,omitempty"`
	Substance  []SubstanceKeyType        `xml:"urn:be:fgov:ehealth:samws:v2:refdata Substance"`
	Standard   StdSbstFamhpStandardsType `xml:"standard,attr"`
	Code       String20Type              `xml:"code,attr"`
}

type StandardSubstanceKeyBcpiType struct {
	Standard StdSbstBcpiStandardsType `xml:"standard,attr"`
	Code     String20Type             `xml:"code,attr"`
}

type StandardSubstanceKeyCommonType struct {
	Standard StdSbstAllStandardsType `xml:"standard,attr"`
	Code     String20Type            `xml:"code,attr"`
}

type StandardSubstanceKeyFamhpType struct {
	Standard StdSbstFamhpStandardsType `xml:"standard,attr"`
	Code     String20Type              `xml:"code,attr"`
}

type StandardSubstanceKeyType struct {
	Standard StdSbstAllStandardsType `xml:"standard,attr"`
	Code     String20Type            `xml:"code,attr"`
}

type StandardSubstanceNameCriterionType struct {
	SearchStringType SearchStringType        `xml:",chardata"`
	Standard         StdSbstAllStandardsType `xml:"standard,attr,omitempty"`
}

type StandardUnitFamhpType struct {
	Description ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Description,omitempty"`
	Name        String20Type    `xml:"name,attr"`
}

type StandardUnitKeyFamhpType struct {
	Name String20Type `xml:"name,attr"`
}

// May be one of DM+D, EDQM, SNOMED_CT
type StdFrmAllStandardsType string

// May be one of DM+D, SNOMED_CT
type StdFrmBcpiStandardsType string

// May be one of EDQM
type StdFrmFamhpStandardsType string

// May be one of DM+D, EDQM, SNOMED_CT
type StdRteAllStandardsType string

// May be one of DM+D, SNOMED_CT
type StdRteBcpiStandardsType string

// May be one of EDQM
type StdRteFamhpStandardsType string

// May be one of CAS, DM+D, EDQM, SNOMED_CT
type StdSbstAllStandardsType string

// May be one of CAS, DM+D, SNOMED_CT
type StdSbstBcpiStandardsType string

// May be one of EDQM
type StdSbstFamhpStandardsType string

type StrengthRangeType struct {
	NumeratorRange RangeType    `xml:"urn:be:fgov:ehealth:samws:v2:core NumeratorRange"`
	Denominator    QuantityType `xml:"urn:be:fgov:ehealth:samws:v2:core Denominator"`
}

type StrengthType struct {
	Numerator   QuantityType `xml:"urn:be:fgov:ehealth:samws:v2:core Numerator"`
	Denominator QuantityType `xml:"urn:be:fgov:ehealth:samws:v2:core Denominator"`
}

// Must be at least 1 items long
type String100Type string

// Must be at least 1 items long
type String10Type string

// Must be at least 1 items long
type String15Type string

// Must be at least 1 items long
type String20Type string

// Must be at least 1 items long
type String255Type string

// Must be at least 1 items long
type String2Type string

// Must be at least 1 items long
type String300Type string

// Must be at least 1 items long
type String30Type string

// Must be at least 1 items long
type String500Type string

// Must be at least 1 items long
type String50Type string

// Must be at least 1 items long
type String5Type string

// Must be at least 1 items long
type String6Type string

// Must be at least 1 items long
type String7Type string

// Must be at least 1 items long
type String8Type string

type SubmitAttachmentType struct {
	Name             Text255Type         `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	TemplateUrl      String255Type       `xml:"urn:be:fgov:ehealth:samws:v2:core TemplateUrl"`
	Mandatory        bool                `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Mandatory"`
	AppendixCode     String10Type        `xml:"urn:be:fgov:ehealth:samws:v2:core AppendixCode"`
	FormCategoryCode String10Type        `xml:"urn:be:fgov:ehealth:samws:v2:core FormCategoryCode"`
	Action           AddChangeRemoveType `xml:"action,attr"`
	From             ValidityDateType    `xml:"from,attr"`
	To               ValidityDateType    `xml:"to,attr,omitempty"`
	SequenceNr       int                 `xml:"sequenceNr,attr"`
}

type SubmitCopaymentType struct {
	FeeAmount  float64             `xml:"urn:be:fgov:ehealth:samws:v2:core FeeAmount"`
	Action     AddChangeRemoveType `xml:"action,attr"`
	From       ValidityDateType    `xml:"from,attr"`
	To         ValidityDateType    `xml:"to,attr,omitempty"`
	RegimeType int                 `xml:"regimeType,attr"`
}

type SubmitFormalInterpretationType struct {
	ReimbursementCondition []SubmitReimbursementConditionType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit ReimbursementCondition,omitempty"`
	ReimbursementTerm      []SubmitReimbursementTermType      `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit ReimbursementTerm,omitempty"`
	Rule                   string                             `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Rule"`
	Action                 AllActionsType                     `xml:"action,attr"`
	From                   ValidityDateType                   `xml:"from,attr,omitempty"`
	To                     ValidityDateType                   `xml:"to,attr,omitempty"`
	Key                    String15Type                       `xml:"key,attr"`
}

type SubmitLegalBasisType struct {
	RecursiveLegalReference []SubmitRecursiveLegalReferenceType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit RecursiveLegalReference,omitempty"`
	Title                   Text255Type                         `xml:"urn:be:fgov:ehealth:samws:v2:core Title"`
	Type                    LegalBasisTypeType                  `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type"`
	EffectiveOn             time.Time                           `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit EffectiveOn,omitempty"`
	Action                  AllActionsType                      `xml:"action,attr"`
	From                    ValidityDateType                    `xml:"from,attr,omitempty"`
	To                      ValidityDateType                    `xml:"to,attr,omitempty"`
	Key                     ReimbursementLawKeyType             `xml:"key,attr"`
}

func (t *SubmitLegalBasisType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SubmitLegalBasisType
	var layout struct {
		*T
		EffectiveOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit EffectiveOn,omitempty"`
	}
	layout.T = (*T)(t)
	layout.EffectiveOn = (*xsdDate)(&layout.T.EffectiveOn)
	return e.EncodeElement(layout, start)
}
func (t *SubmitLegalBasisType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SubmitLegalBasisType
	var overlay struct {
		*T
		EffectiveOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit EffectiveOn,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.EffectiveOn = (*xsdDate)(&overlay.T.EffectiveOn)
	return d.DecodeElement(&overlay, &start)
}

type SubmitRecursiveLegalReferenceType struct {
	RecursiveLegalReference []SubmitRecursiveLegalReferenceType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit RecursiveLegalReference,omitempty"`
	FormalInterpretation    []SubmitFormalInterpretationType    `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit FormalInterpretation,omitempty"`
	RecursiveLegalText      []SubmitRecursiveLegalTextType      `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit RecursiveLegalText,omitempty"`
	Title                   TextType                            `xml:"urn:be:fgov:ehealth:samws:v2:core Title"`
	Type                    LegalReferenceTypeType              `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type"`
	FirstPublishedOn        time.Time                           `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit FirstPublishedOn,omitempty"`
	LastModifiedOn          time.Time                           `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LastModifiedOn,omitempty"`
	LegalReferenceTrace     []LegalReferenceKeyType             `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LegalReferenceTrace,omitempty"`
	Action                  AllActionsType                      `xml:"action,attr"`
	From                    ValidityDateType                    `xml:"from,attr,omitempty"`
	To                      ValidityDateType                    `xml:"to,attr,omitempty"`
	Key                     ReimbursementLawKeyType             `xml:"key,attr"`
}

func (t *SubmitRecursiveLegalReferenceType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SubmitRecursiveLegalReferenceType
	var layout struct {
		*T
		FirstPublishedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit FirstPublishedOn,omitempty"`
		LastModifiedOn   *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LastModifiedOn,omitempty"`
	}
	layout.T = (*T)(t)
	layout.FirstPublishedOn = (*xsdDate)(&layout.T.FirstPublishedOn)
	layout.LastModifiedOn = (*xsdDate)(&layout.T.LastModifiedOn)
	return e.EncodeElement(layout, start)
}
func (t *SubmitRecursiveLegalReferenceType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SubmitRecursiveLegalReferenceType
	var overlay struct {
		*T
		FirstPublishedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit FirstPublishedOn,omitempty"`
		LastModifiedOn   *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LastModifiedOn,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.FirstPublishedOn = (*xsdDate)(&overlay.T.FirstPublishedOn)
	overlay.LastModifiedOn = (*xsdDate)(&overlay.T.LastModifiedOn)
	return d.DecodeElement(&overlay, &start)
}

type SubmitRecursiveLegalTextType struct {
	RecursiveLegalText []SubmitRecursiveLegalTextType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit RecursiveLegalText,omitempty"`
	Content            TextType                       `xml:"urn:be:fgov:ehealth:samws:v2:core Content"`
	Type               LegalTextTypeType              `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Type"`
	SequenceNr         int                            `xml:"urn:be:fgov:ehealth:samws:v2:core SequenceNr"`
	LastModifiedOn     time.Time                      `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LastModifiedOn,omitempty"`
	Action             AllActionsType                 `xml:"action,attr"`
	From               ValidityDateType               `xml:"from,attr,omitempty"`
	To                 ValidityDateType               `xml:"to,attr,omitempty"`
	Key                ReimbursementLawKeyType        `xml:"key,attr"`
}

func (t *SubmitRecursiveLegalTextType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SubmitRecursiveLegalTextType
	var layout struct {
		*T
		LastModifiedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LastModifiedOn,omitempty"`
	}
	layout.T = (*T)(t)
	layout.LastModifiedOn = (*xsdDate)(&layout.T.LastModifiedOn)
	return e.EncodeElement(layout, start)
}
func (t *SubmitRecursiveLegalTextType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SubmitRecursiveLegalTextType
	var overlay struct {
		*T
		LastModifiedOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LastModifiedOn,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.LastModifiedOn = (*xsdDate)(&overlay.T.LastModifiedOn)
	return d.DecodeElement(&overlay, &start)
}

type SubmitReimbursementConditionType struct {
	Attachment            []SubmitAttachmentType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Attachment,omitempty"`
	Expression            string                 `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit Expression"`
	Action                AllActionsType         `xml:"action,attr"`
	From                  ValidityDateType       `xml:"from,attr,omitempty"`
	To                    ValidityDateType       `xml:"to,attr,omitempty"`
	LegalTextRelativePath LegalTextPathType      `xml:"legalTextRelativePath,attr"`
	Key                   String15Type           `xml:"key,attr"`
}

type SubmitReimbursementContextType struct {
	Copayment                      []SubmitCopaymentType   `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit Copayment,omitempty"`
	Multiple                       MultipleType            `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit Multiple,omitempty"`
	Temporary                      bool                    `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit Temporary"`
	Reference                      bool                    `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit Reference"`
	FlatRateSystem                 bool                    `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit FlatRateSystem"`
	ReimbursementBasePrice         float64                 `xml:"urn:be:fgov:ehealth:samws:v2:core ReimbursementBasePrice"`
	ReferenceBasePrice             float64                 `xml:"urn:be:fgov:ehealth:samws:v2:core ReferenceBasePrice"`
	CopaymentSupplement            float64                 `xml:"urn:be:fgov:ehealth:samws:v2:core CopaymentSupplement,omitempty"`
	PricingUnit                    PricingUnitType         `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit PricingUnit"`
	PricingSlice                   PricingUnitType         `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit PricingSlice,omitempty"`
	CollegeForOrphanDrugs          bool                    `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit CollegeForOrphanDrugs,omitempty"`
	ChargedAt85Percent             bool                    `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit ChargedAt85Percent,omitempty"`
	ReimbursementCriterionCategory String10Type            `xml:"urn:be:fgov:ehealth:samws:v2:core ReimbursementCriterionCategory"`
	ReimbursementCriterionCode     String20Type            `xml:"urn:be:fgov:ehealth:samws:v2:core ReimbursementCriterionCode"`
	Action                         AllActionsType          `xml:"action,attr"`
	From                           ValidityDateType        `xml:"from,attr,omitempty"`
	To                             ValidityDateType        `xml:"to,attr,omitempty"`
	DeliveryEnvironment            DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                           DmppCodeType            `xml:"code,attr"`
	CodeType                       DmppCodeTypeType        `xml:"codeType,attr"`
	LegalReferencePath             LegalReferencePathType  `xml:"legalReferencePath,attr"`
}

type SubmitReimbursementLawRequestType struct {
	LegalBasis SubmitLegalBasisType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit LegalBasis"`
}

type SubmitReimbursementRequestType struct {
	ReimbursementContext SubmitReimbursementContextType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursement:submit ReimbursementContext"`
}

type SubmitReimbursementTermType struct {
	ValueUnit     ParameterValueType `xml:"urn:be:fgov:ehealth:samws:v2:reimbursementlaw:submit ValueUnit"`
	ParameterName String100Type      `xml:"urn:be:fgov:ehealth:samws:v2:core ParameterName"`
	Action        AllActionsType     `xml:"action,attr"`
	From          ValidityDateType   `xml:"from,attr,omitempty"`
	To            ValidityDateType   `xml:"to,attr,omitempty"`
	SequenceNr    int                `xml:"sequenceNr,attr"`
}

type Substance struct {
	ChemicalForm String10Type    `xml:"urn:be:fgov:ehealth:samws:v2:core ChemicalForm,omitempty"`
	Name         ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	Note         ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Note,omitempty"`
	Code         String10Type    `xml:"code,attr"`
}

type SubstanceKeyType struct {
	Code String10Type `xml:"code,attr"`
}

type SubstanceType struct {
	ChemicalForm String10Type    `xml:"urn:be:fgov:ehealth:samws:v2:core ChemicalForm,omitempty"`
	Name         ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	Note         ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Note,omitempty"`
	Code         String10Type    `xml:"code,attr"`
}

type SubstanceWithStandardsType struct {
	StandardSubstance []ExportStandardSubstanceType `xml:"urn:be:fgov:ehealth:samws:v2:export StandardSubstance,omitempty"`
	ChemicalForm      String10Type                  `xml:"urn:be:fgov:ehealth:samws:v2:core ChemicalForm,omitempty"`
	Name              Text255Type                   `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Note              TextType                      `xml:"urn:be:fgov:ehealth:samws:v2:core Note,omitempty"`
	Code              String10Type                  `xml:"code,attr"`
}

type SupplyProblemDataType struct {
	ExpectedEndOn         time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:export ExpectedEndOn,omitempty"`
	ReportedBy            String50Type  `xml:"urn:be:fgov:ehealth:samws:v2:core ReportedBy,omitempty"`
	ReportedOn            time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:export ReportedOn,omitempty"`
	ContactName           String50Type  `xml:"urn:be:fgov:ehealth:samws:v2:core ContactName,omitempty"`
	ContactMail           String50Type  `xml:"urn:be:fgov:ehealth:samws:v2:core ContactMail,omitempty"`
	ContactCompany        String255Type `xml:"urn:be:fgov:ehealth:samws:v2:core ContactCompany,omitempty"`
	Phone                 String50Type  `xml:"urn:be:fgov:ehealth:samws:v2:core Phone,omitempty"`
	Reason                TextType      `xml:"urn:be:fgov:ehealth:samws:v2:core Reason,omitempty"`
	AdditionalInformation TextType      `xml:"urn:be:fgov:ehealth:samws:v2:core AdditionalInformation,omitempty"`
	Impact                Text255Type   `xml:"urn:be:fgov:ehealth:samws:v2:core Impact,omitempty"`
	From                  time.Time     `xml:"from,attr"`
	To                    time.Time     `xml:"to,attr,omitempty"`
}

func (t *SupplyProblemDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SupplyProblemDataType
	var layout struct {
		*T
		ExpectedEndOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:export ExpectedEndOn,omitempty"`
		ReportedOn    *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:export ReportedOn,omitempty"`
		From          *xsdDate `xml:"from,attr"`
		To            *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.ExpectedEndOn = (*xsdDate)(&layout.T.ExpectedEndOn)
	layout.ReportedOn = (*xsdDate)(&layout.T.ReportedOn)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *SupplyProblemDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SupplyProblemDataType
	var overlay struct {
		*T
		ExpectedEndOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:export ExpectedEndOn,omitempty"`
		ReportedOn    *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:export ReportedOn,omitempty"`
		From          *xsdDate `xml:"from,attr"`
		To            *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.ExpectedEndOn = (*xsdDate)(&overlay.T.ExpectedEndOn)
	overlay.ReportedOn = (*xsdDate)(&overlay.T.ReportedOn)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type SupplyProblemFullDataType struct {
	Data []SupplyProblemDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
}

type SupplyProblemType struct {
	ExpectedEndOn         time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ExpectedEndOn,omitempty"`
	ReportedBy            String50Type  `xml:"urn:be:fgov:ehealth:samws:v2:core ReportedBy,omitempty"`
	ReportedOn            time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ReportedOn,omitempty"`
	ContactName           String50Type  `xml:"urn:be:fgov:ehealth:samws:v2:core ContactName,omitempty"`
	ContactMail           String50Type  `xml:"urn:be:fgov:ehealth:samws:v2:core ContactMail,omitempty"`
	ContactCompany        String255Type `xml:"urn:be:fgov:ehealth:samws:v2:core ContactCompany,omitempty"`
	Phone                 String50Type  `xml:"urn:be:fgov:ehealth:samws:v2:core Phone,omitempty"`
	Reason                TextType      `xml:"urn:be:fgov:ehealth:samws:v2:core Reason,omitempty"`
	AdditionalInformation TextType      `xml:"urn:be:fgov:ehealth:samws:v2:core AdditionalInformation,omitempty"`
	Impact                Text255Type   `xml:"urn:be:fgov:ehealth:samws:v2:core Impact,omitempty"`
}

func (t *SupplyProblemType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SupplyProblemType
	var layout struct {
		*T
		ExpectedEndOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ExpectedEndOn,omitempty"`
		ReportedOn    *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ReportedOn,omitempty"`
	}
	layout.T = (*T)(t)
	layout.ExpectedEndOn = (*xsdDate)(&layout.T.ExpectedEndOn)
	layout.ReportedOn = (*xsdDate)(&layout.T.ReportedOn)
	return e.EncodeElement(layout, start)
}
func (t *SupplyProblemType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SupplyProblemType
	var overlay struct {
		*T
		ExpectedEndOn *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ExpectedEndOn,omitempty"`
		ReportedOn    *xsdDate `xml:"urn:be:fgov:ehealth:samws:v2:actual:common ReportedOn,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.ExpectedEndOn = (*xsdDate)(&overlay.T.ExpectedEndOn)
	overlay.ReportedOn = (*xsdDate)(&overlay.T.ReportedOn)
	return d.DecodeElement(&overlay, &start)
}

type SynonymType struct {
	Value string `xml:",chardata"`
	Lang  Lang   `xml:"lang,attr,omitempty"`
	Rank  int    `xml:"rank,attr,omitempty"`
}

// May be one of NEONATE, PAEDIATRICS, ADOLESCENT, ADULT
type TargetGroup string

type TemporaryDurationDetailsType struct {
	Duration     QuantityType `xml:"urn:be:fgov:ehealth:samws:v2:core Duration"`
	UserProvided string       `xml:"urn:be:fgov:ehealth:samws:v2:virtual:common UserProvided"`
	Note         TextType     `xml:"urn:be:fgov:ehealth:samws:v2:core Note"`
}

type Text struct {
	Value string `xml:",chardata"`
	Lang  Lang   `xml:"lang,attr"`
}

type Text255Type struct {
	Fr String255Type `xml:"urn:be:fgov:ehealth:samws:v2:core Fr"`
	Nl String255Type `xml:"urn:be:fgov:ehealth:samws:v2:core Nl"`
	De String255Type `xml:"urn:be:fgov:ehealth:samws:v2:core De,omitempty"`
	En String255Type `xml:"urn:be:fgov:ehealth:samws:v2:core En,omitempty"`
}

type TextType struct {
	Fr string `xml:"urn:be:fgov:ehealth:samws:v2:core Fr"`
	Nl string `xml:"urn:be:fgov:ehealth:samws:v2:core Nl"`
	De string `xml:"urn:be:fgov:ehealth:samws:v2:core De,omitempty"`
	En string `xml:"urn:be:fgov:ehealth:samws:v2:core En,omitempty"`
}

// May be one of ONE_OFF, TEMPORARY, CHRONIC, IF_NECESSARY
type TreatmentDurationType string

// May be one of QUANTITY, STRENGTH, CODE, BOOLEAN, AMP_CODE, CTI_EXTENDED, ATC_CODE, LEGAL_REFERENCE_PATH, LEGAL_TEXT_PATH, REIMBURSEMENT_CRITERION_KEY, VMP_CODE, SUBSTANCE_CODE
type UnitTypeType string

type UnsetActualToVirtualLinkRequestType struct {
	Amp AmpKeyType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Amp"`
}

type UnsetBcpiReferencesRequestType struct {
	NoSwitchReason              []NoSwitchReasonKeyType              `xml:"urn:be:fgov:ehealth:samws:v2:refdata NoSwitchReason,omitempty"`
	VirtualForm                 []VirtualFormKeyType                 `xml:"urn:be:fgov:ehealth:samws:v2:refdata VirtualForm,omitempty"`
	Wada                        []WadaKeyType                        `xml:"urn:be:fgov:ehealth:samws:v2:refdata Wada,omitempty"`
	NoGenericPrescriptionReason []NoGenericPrescriptionReasonKeyType `xml:"urn:be:fgov:ehealth:samws:v2:refdata NoGenericPrescriptionReason,omitempty"`
	Indication                  []IndicationKeyType                  `xml:"urn:be:fgov:ehealth:samws:v2:refdata Indication,omitempty"`
	DosageParameter             []DosageParameterKeyType             `xml:"urn:be:fgov:ehealth:samws:v2:refdata DosageParameter,omitempty"`
	StandardForm                []StandardFormKeyBcpiType            `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardForm,omitempty"`
	StandardRoute               []StandardRouteKeyBcpiType           `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardRoute,omitempty"`
	StandardSubstance           []StandardSubstanceKeyBcpiType       `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardSubstance,omitempty"`
}

type UnsetFamhpReferencesRequestType struct {
	AtcClassification          []AtcClassificationKeyType          `xml:"urn:be:fgov:ehealth:samws:v2:refdata AtcClassification,omitempty"`
	DeliveryModus              []DeliveryModusKeyType              `xml:"urn:be:fgov:ehealth:samws:v2:refdata DeliveryModus,omitempty"`
	DeliveryModusSpecification []DeliveryModusSpecificationKeyType `xml:"urn:be:fgov:ehealth:samws:v2:refdata DeliveryModusSpecification,omitempty"`
	DeviceType                 []DeviceTypeKeyType                 `xml:"urn:be:fgov:ehealth:samws:v2:refdata DeviceType,omitempty"`
	PackagingClosure           []PackagingClosureKeyType           `xml:"urn:be:fgov:ehealth:samws:v2:refdata PackagingClosure,omitempty"`
	PackagingMaterial          []PackagingMaterialKeyType          `xml:"urn:be:fgov:ehealth:samws:v2:refdata PackagingMaterial,omitempty"`
	PackagingType              []PackagingTypeKeyType              `xml:"urn:be:fgov:ehealth:samws:v2:refdata PackagingType,omitempty"`
	PharmaceuticalForm         []PharmaceuticalFormKeyType         `xml:"urn:be:fgov:ehealth:samws:v2:refdata PharmaceuticalFormCode,omitempty"`
	RouteOfAdministration      []RouteOfAdministrationKeyType      `xml:"urn:be:fgov:ehealth:samws:v2:refdata RouteOfAdministration,omitempty"`
	Substance                  []SubstanceKeyType                  `xml:"urn:be:fgov:ehealth:samws:v2:refdata Substance,omitempty"`
	StandardForm               []StandardFormKeyFamhpType          `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardForm,omitempty"`
	StandardRoute              []StandardRouteKeyFamhpType         `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardRoute,omitempty"`
	StandardSubstance          []StandardSubstanceKeyFamhpType     `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardSubstance,omitempty"`
	StandardUnit               []StandardUnitKeyFamhpType          `xml:"urn:be:fgov:ehealth:samws:v2:refdata StandardUnit,omitempty"`
}

type UnsetNihdiReferencesRequestType struct {
	Appendix               []AppendixKeyType               `xml:"urn:be:fgov:ehealth:samws:v2:refdata Appendix,omitempty"`
	FormCategory           []FormCategoryKeyType           `xml:"urn:be:fgov:ehealth:samws:v2:refdata FormCategory,omitempty"`
	Parameter              []ParameterKeyType              `xml:"urn:be:fgov:ehealth:samws:v2:refdata Parameter,omitempty"`
	ReimbursementCriterion []ReimbursementCriterionKeyType `xml:"urn:be:fgov:ehealth:samws:v2:refdata ReimbursementCriterion,omitempty"`
}

type UpdateDmppReimbursementStatusRequestType struct {
	Dmpp []UpdateDmppReimbursementStatusType `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Dmpp"`
}

type UpdateDmppReimbursementStatusType struct {
	Reimbursable        bool                    `xml:"urn:be:fgov:ehealth:samws:v2:actual:common Reimbursable"`
	CtiExtended         CtiExtendedType         `xml:"ctiExtended,attr"`
	From                ValidityDateType        `xml:"from,attr"`
	To                  ValidityDateType        `xml:"to,attr,omitempty"`
	DeliveryEnvironment DeliveryEnvironmentType `xml:"deliveryEnvironment,attr"`
	Code                DmppCodeType            `xml:"code,attr"`
	CodeType            DmppCodeTypeType        `xml:"codeType,attr"`
}

type ValidityDateType time.Time

func (t *ValidityDateType) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ValidityDateType) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type VatNrPerCountryType struct {
	VatNrType   VatNrType       `xml:",chardata"`
	CountryCode CountryCodeType `xml:"countryCode,attr"`
}

// Must be at least 7 items long
type VatNrType string

type VerseDataType struct {
	CreatedTimestamp          time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
	CreatedUserId             String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	VerseNum                  int           `xml:"urn:be:fgov:ehealth:samws:v2:core VerseNum"`
	VerseSeqParent            int           `xml:"urn:be:fgov:ehealth:samws:v2:core VerseSeqParent"`
	VerseLevel                int           `xml:"urn:be:fgov:ehealth:samws:v2:core VerseLevel"`
	VerseType                 String2Type   `xml:"urn:be:fgov:ehealth:samws:v2:core VerseType,omitempty"`
	CheckBoxInd               bool          `xml:"urn:be:fgov:ehealth:samws:v2:export CheckBoxInd"`
	MinCheckNum               int           `xml:"urn:be:fgov:ehealth:samws:v2:core MinCheckNum,omitempty"`
	AndClauseNum              int           `xml:"urn:be:fgov:ehealth:samws:v2:core AndClauseNum,omitempty"`
	TextFr                    string        `xml:"urn:be:fgov:ehealth:samws:v2:export TextFr"`
	TextNl                    string        `xml:"urn:be:fgov:ehealth:samws:v2:export TextNl"`
	RequestType               CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core RequestType,omitempty"`
	AgreementTerm             int           `xml:"urn:be:fgov:ehealth:samws:v2:core AgreementTerm,omitempty"`
	AgreementTermUnit         CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core AgreementTermUnit,omitempty"`
	MaxPackageNumber          int           `xml:"urn:be:fgov:ehealth:samws:v2:core MaxPackageNumber,omitempty"`
	PurchasingAdvisorQualList String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core PurchasingAdvisorQualList,omitempty"`
	LegalReference            String100Type `xml:"urn:be:fgov:ehealth:samws:v2:core LegalReference,omitempty"`
	ModificationDate          time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:export ModificationDate,omitempty"`
	AgreementYearMax          int           `xml:"urn:be:fgov:ehealth:samws:v2:core AgreementYearMax,omitempty"`
	AgreementRenewalMax       int           `xml:"urn:be:fgov:ehealth:samws:v2:core AgreementRenewalMax,omitempty"`
	SexRestricted             CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core SexRestricted,omitempty"`
	MinimumAgeAuthorized      float64       `xml:"urn:be:fgov:ehealth:samws:v2:core MinimumAgeAuthorized,omitempty"`
	MinimumAgeAuthorizedUnit  String5Type   `xml:"urn:be:fgov:ehealth:samws:v2:core MinimumAgeAuthorizedUnit,omitempty"`
	MaximumAgeAuthorized      float64       `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumAgeAuthorized,omitempty"`
	MaximumAgeAuthorizedUnit  String5Type   `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumAgeAuthorizedUnit,omitempty"`
	MaximumContentQuantity    float64       `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumContentQuantity,omitempty"`
	MaximumContentUnit        String5Type   `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumContentUnit,omitempty"`
	MaximumStrengthQuantity   float64       `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumStrengthQuantity,omitempty"`
	MaximumStrengthUnit       String5Type   `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumStrengthUnit,omitempty"`
	MaximumDurationQuantity   float64       `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumDurationQuantity,omitempty"`
	MaximumDurationUnit       String5Type   `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumDurationUnit,omitempty"`
	OtherAddedDocumentInd     bool          `xml:"urn:be:fgov:ehealth:samws:v2:export OtherAddedDocumentInd,omitempty"`
	ModificationStatus        CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	From                      time.Time     `xml:"from,attr"`
	To                        time.Time     `xml:"to,attr,omitempty"`
}

func (t *VerseDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T VerseDataType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		ModificationDate *xsdDate     `xml:"urn:be:fgov:ehealth:samws:v2:export ModificationDate,omitempty"`
		From             *xsdDate     `xml:"from,attr"`
		To               *xsdDate     `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	layout.ModificationDate = (*xsdDate)(&layout.T.ModificationDate)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *VerseDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T VerseDataType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:export CreatedTimestamp"`
		ModificationDate *xsdDate     `xml:"urn:be:fgov:ehealth:samws:v2:export ModificationDate,omitempty"`
		From             *xsdDate     `xml:"from,attr"`
		To               *xsdDate     `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	overlay.ModificationDate = (*xsdDate)(&overlay.T.ModificationDate)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type VerseFullDataType struct {
	Data          []VerseDataType             `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	AddedDocument []AddedDocumentFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export AddedDocument,omitempty"`
	VerseSeq      int                         `xml:"VerseSeq,attr"`
}

type VerseKeyType struct {
	VerseSeq int `xml:"VerseSeq,attr"`
}

type VerseType struct {
	CreatedTimestamp          time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
	CreatedUserId             String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core CreatedUserId"`
	VerseNum                  int           `xml:"urn:be:fgov:ehealth:samws:v2:core VerseNum"`
	VerseSeqParent            int           `xml:"urn:be:fgov:ehealth:samws:v2:core VerseSeqParent"`
	VerseLevel                int           `xml:"urn:be:fgov:ehealth:samws:v2:core VerseLevel"`
	VerseType                 String2Type   `xml:"urn:be:fgov:ehealth:samws:v2:core VerseType,omitempty"`
	CheckBoxInd               bool          `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CheckBoxInd"`
	MinCheckNum               int           `xml:"urn:be:fgov:ehealth:samws:v2:core MinCheckNum,omitempty"`
	AndClauseNum              int           `xml:"urn:be:fgov:ehealth:samws:v2:core AndClauseNum,omitempty"`
	TextFr                    string        `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit TextFr"`
	TextNl                    string        `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit TextNl"`
	RequestType               CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core RequestType,omitempty"`
	AgreementTerm             int           `xml:"urn:be:fgov:ehealth:samws:v2:core AgreementTerm,omitempty"`
	AgreementTermUnit         CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core AgreementTermUnit,omitempty"`
	MaxPackageNumber          int           `xml:"urn:be:fgov:ehealth:samws:v2:core MaxPackageNumber,omitempty"`
	PurchasingAdvisorQualList String10Type  `xml:"urn:be:fgov:ehealth:samws:v2:core PurchasingAdvisorQualList,omitempty"`
	LegalReference            String100Type `xml:"urn:be:fgov:ehealth:samws:v2:core LegalReference,omitempty"`
	ModificationDate          time.Time     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit ModificationDate,omitempty"`
	AgreementYearMax          int           `xml:"urn:be:fgov:ehealth:samws:v2:core AgreementYearMax,omitempty"`
	AgreementRenewalMax       int           `xml:"urn:be:fgov:ehealth:samws:v2:core AgreementRenewalMax,omitempty"`
	SexRestricted             CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core SexRestricted,omitempty"`
	MinimumAgeAuthorized      float64       `xml:"urn:be:fgov:ehealth:samws:v2:core MinimumAgeAuthorized,omitempty"`
	MinimumAgeAuthorizedUnit  String5Type   `xml:"urn:be:fgov:ehealth:samws:v2:core MinimumAgeAuthorizedUnit,omitempty"`
	MaximumAgeAuthorized      float64       `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumAgeAuthorized,omitempty"`
	MaximumAgeAuthorizedUnit  String5Type   `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumAgeAuthorizedUnit,omitempty"`
	MaximumContentQuantity    float64       `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumContentQuantity,omitempty"`
	MaximumContentUnit        String5Type   `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumContentUnit,omitempty"`
	MaximumStrengthQuantity   float64       `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumStrengthQuantity,omitempty"`
	MaximumStrengthUnit       String5Type   `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumStrengthUnit,omitempty"`
	MaximumDurationQuantity   float64       `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumDurationQuantity,omitempty"`
	MaximumDurationUnit       String5Type   `xml:"urn:be:fgov:ehealth:samws:v2:core MaximumDurationUnit,omitempty"`
	OtherAddedDocumentInd     bool          `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit OtherAddedDocumentInd,omitempty"`
	ModificationStatus        CharacterType `xml:"urn:be:fgov:ehealth:samws:v2:core ModificationStatus"`
	VerseSeq                  int           `xml:"VerseSeq,attr"`
}

func (t *VerseType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T VerseType
	var layout struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
		ModificationDate *xsdDate     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit ModificationDate,omitempty"`
	}
	layout.T = (*T)(t)
	layout.CreatedTimestamp = (*xsdDateTime)(&layout.T.CreatedTimestamp)
	layout.ModificationDate = (*xsdDate)(&layout.T.ModificationDate)
	return e.EncodeElement(layout, start)
}
func (t *VerseType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T VerseType
	var overlay struct {
		*T
		CreatedTimestamp *xsdDateTime `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit CreatedTimestamp"`
		ModificationDate *xsdDate     `xml:"urn:be:fgov:ehealth:samws:v2:chapteriv:submit ModificationDate,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.CreatedTimestamp = (*xsdDateTime)(&overlay.T.CreatedTimestamp)
	overlay.ModificationDate = (*xsdDate)(&overlay.T.ModificationDate)
	return d.DecodeElement(&overlay, &start)
}

type VersionedExportType struct {
	Version string `xml:"version,attr,omitempty"`
	SamId   string `xml:"SamId,attr"`
}

type VirtualForm struct {
	Abbreviation ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Abbreviation"`
	Name         ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	Description  ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Description,omitempty"`
	Code         String10Type    `xml:"code,attr"`
}

type VirtualFormKeyType struct {
	Code String10Type `xml:"code,attr"`
}

type VirtualFormType struct {
	Abbreviation ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Abbreviation"`
	Name         ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	Description  ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Description,omitempty"`
	Code         String10Type    `xml:"code,attr"`
}

type VirtualFormWithStandardsType struct {
	StandardForm []ExportStandardFormType `xml:"urn:be:fgov:ehealth:samws:v2:export StandardForm,omitempty"`
	Abbreviation Text255Type              `xml:"urn:be:fgov:ehealth:samws:v2:core Abbreviation"`
	Name         Text255Type              `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Description  TextType                 `xml:"urn:be:fgov:ehealth:samws:v2:core Description,omitempty"`
	Code         String10Type             `xml:"code,attr"`
}

type VirtualIngredientDataType struct {
	Type      IngredientTypeType         `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	Strength  StrengthRangeType          `xml:"urn:be:fgov:ehealth:samws:v2:core Strength,omitempty"`
	Substance SubstanceWithStandardsType `xml:"urn:be:fgov:ehealth:samws:v2:export Substance"`
	From      time.Time                  `xml:"from,attr"`
	To        time.Time                  `xml:"to,attr,omitempty"`
}

func (t *VirtualIngredientDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T VirtualIngredientDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *VirtualIngredientDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T VirtualIngredientDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type VirtualIngredientFullDataType struct {
	Data                  []VirtualIngredientDataType         `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	RealVirtualIngredient []RealVirtualIngredientFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export RealVirtualIngredient,omitempty"`
	Rank                  int                                 `xml:"rank,attr"`
}

type VirtualIngredientKeyType struct {
	Rank int `xml:"rank,attr"`
}

type VirtualIngredientType struct {
	Type          IngredientTypeType `xml:"urn:be:fgov:ehealth:samws:v2:core Type"`
	Strength      StrengthRangeType  `xml:"urn:be:fgov:ehealth:samws:v2:core Strength,omitempty"`
	SubstanceCode String10Type       `xml:"urn:be:fgov:ehealth:samws:v2:core SubstanceCode"`
	Rank          int                `xml:"rank,attr"`
}

type VmpComponentDataType struct {
	PhaseNumber           int                                      `xml:"urn:be:fgov:ehealth:samws:v2:core PhaseNumber,omitempty"`
	Name                  Text255Type                              `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	VirtualForm           VirtualFormWithStandardsType             `xml:"urn:be:fgov:ehealth:samws:v2:export VirtualForm"`
	RouteOfAdministration []RouteOfAdministrationWithStandardsType `xml:"urn:be:fgov:ehealth:samws:v2:export RouteOfAdministration"`
	From                  time.Time                                `xml:"from,attr"`
	To                    time.Time                                `xml:"to,attr,omitempty"`
}

func (t *VmpComponentDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T VmpComponentDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *VmpComponentDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T VmpComponentDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type VmpComponentFullDataType struct {
	Data              []VmpComponentDataType          `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	VirtualIngredient []VirtualIngredientFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export VirtualIngredient,omitempty"`
	Code              int                             `xml:"code,attr"`
}

type VmpComponentKeyType struct {
	Code int `xml:"code,attr"`
}

type VmpComponentType struct {
	PhaseNumber               int            `xml:"urn:be:fgov:ehealth:samws:v2:core PhaseNumber,omitempty"`
	Name                      Text255Type    `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	VirtualFormCode           String10Type   `xml:"urn:be:fgov:ehealth:samws:v2:core VirtualFormCode"`
	RouteOfAdministrationCode []String10Type `xml:"urn:be:fgov:ehealth:samws:v2:core RouteOfAdministrationCodes"`
	Code                      int            `xml:"code,attr"`
}

type VmpDataType struct {
	Abbreviation ConsultTextType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation Abbreviation"`
	Name         ConsultTextType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	From         ValidityDateType `xml:"from,attr"`
	To           ValidityDateType `xml:"to,attr,omitempty"`
}

type VmpFullDataType struct {
	Data         []VmpDataType              `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	VmpComponent []VmpComponentFullDataType `xml:"urn:be:fgov:ehealth:samws:v2:export VmpComponent,omitempty"`
	Code         int                        `xml:"code,attr"`
}

type VmpGroupDataType struct {
	Name ConsultTextType  `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	From ValidityDateType `xml:"from,attr"`
	To   ValidityDateType `xml:"to,attr,omitempty"`
}

type VmpGroupFullDataType struct {
	Data      []VmpGroupDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	ProductId string             `xml:"ProductId,attr"`
	Code      int                `xml:"code,attr"`
}

type VmpGroupKeyType struct {
	Code int `xml:"code,attr"`
}

type VmpGroupType struct {
	Data []VmpGroupDataType `xml:"urn:be:fgov:ehealth:samws:v2:consultation:list Data"`
	Code string             `xml:"code,attr"`
}

type VmpKeyType struct {
	Code int `xml:"code,attr"`
}

type VmpType struct {
	Data []VmpDataType `xml:"urn:be:fgov:ehealth:samws:v2:consultation:list Data"`
	Code string        `xml:"code,attr"`
}

type VtmDataType struct {
	Name Text255Type `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	From time.Time   `xml:"from,attr"`
	To   time.Time   `xml:"to,attr,omitempty"`
}

func (t *VtmDataType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T VtmDataType
	var layout struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	layout.T = (*T)(t)
	layout.From = (*xsdDate)(&layout.T.From)
	layout.To = (*xsdDate)(&layout.T.To)
	return e.EncodeElement(layout, start)
}
func (t *VtmDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T VtmDataType
	var overlay struct {
		*T
		From *xsdDate `xml:"from,attr"`
		To   *xsdDate `xml:"to,attr,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.From = (*xsdDate)(&overlay.T.From)
	overlay.To = (*xsdDate)(&overlay.T.To)
	return d.DecodeElement(&overlay, &start)
}

type VtmFullDataType struct {
	Data []VtmDataType `xml:"urn:be:fgov:ehealth:samws:v2:export Data,omitempty"`
	Code int           `xml:"code,attr"`
}

type VtmKeyType struct {
	Code int `xml:"code,attr"`
}

type VtmType struct {
	Name Text255Type `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Code int         `xml:"code,attr"`
}

type Wada struct {
	Name        ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Name"`
	Description ConsultTextType `xml:"urn:be:fgov:ehealth:samws:v2:consultation Description,omitempty"`
	Code        String10Type    `xml:"code,attr"`
}

type WadaKeyType struct {
	Code String10Type `xml:"code,attr"`
}

type WadaType struct {
	Name        Text255Type  `xml:"urn:be:fgov:ehealth:samws:v2:core Name"`
	Description TextType     `xml:"urn:be:fgov:ehealth:samws:v2:core Description,omitempty"`
	Code        String10Type `xml:"code,attr"`
}

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return []byte((time.Time)(t).Format("2006-01-02")), nil
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return []byte((time.Time)(t).Format("2006-01-02T15:04:05.999999999")), nil
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
